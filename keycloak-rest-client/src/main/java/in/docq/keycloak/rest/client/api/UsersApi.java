/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.*;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.CredentialRepresentation;
import in.docq.keycloak.rest.client.model.FederatedIdentityRepresentation;
import in.docq.keycloak.rest.client.model.GroupRepresentation;
import in.docq.keycloak.rest.client.model.UPConfig;
import in.docq.keycloak.rest.client.model.UserProfileMetadata;
import in.docq.keycloak.rest.client.model.UserRepresentation;
import in.docq.keycloak.rest.client.model.UserSessionRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionStage;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmUsersCountGet
     * @param realm realm name (not id!) (required)
     * @param email email filter (optional)
     * @param emailVerified  (optional)
     * @param enabled Boolean representing if user is enabled or not (optional)
     * @param firstName first name filter (optional)
     * @param lastName last name filter (optional)
     * @param q  (optional)
     * @param search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \&quot;foo\&quot; for exact search. (optional)
     * @param username username filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersCountGetCall(String realm, String email, Boolean emailVerified, Boolean enabled, String firstName, String lastName, String q, String search, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/count"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (emailVerified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailVerified", emailVerified));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersCountGetValidateBeforeCall(String realm, String email, Boolean emailVerified, Boolean enabled, String firstName, String lastName, String q, String search, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersCountGet(Async)");
        }

        return adminRealmsRealmUsersCountGetCall(realm, email, emailVerified, enabled, firstName, lastName, q, search, username, _callback);

    }

    /**
     * Returns the number of users that match the given criteria.
     * It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. &lt;p&gt; 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. &lt;p&gt; 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
     * @param realm realm name (not id!) (required)
     * @param email email filter (optional)
     * @param emailVerified  (optional)
     * @param enabled Boolean representing if user is enabled or not (optional)
     * @param firstName first name filter (optional)
     * @param lastName last name filter (optional)
     * @param q  (optional)
     * @param search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \&quot;foo\&quot; for exact search. (optional)
     * @param username username filter (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer adminRealmsRealmUsersCountGet(String realm, String email, Boolean emailVerified, Boolean enabled, String firstName, String lastName, String q, String search, String username) throws ApiException {
        ApiResponse<Integer> localVarResp = adminRealmsRealmUsersCountGetWithHttpInfo(realm, email, emailVerified, enabled, firstName, lastName, q, search, username);
        return localVarResp.getData();
    }

    /**
     * Returns the number of users that match the given criteria.
     * It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. &lt;p&gt; 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. &lt;p&gt; 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
     * @param realm realm name (not id!) (required)
     * @param email email filter (optional)
     * @param emailVerified  (optional)
     * @param enabled Boolean representing if user is enabled or not (optional)
     * @param firstName first name filter (optional)
     * @param lastName last name filter (optional)
     * @param q  (optional)
     * @param search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \&quot;foo\&quot; for exact search. (optional)
     * @param username username filter (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> adminRealmsRealmUsersCountGetWithHttpInfo(String realm, String email, Boolean emailVerified, Boolean enabled, String firstName, String lastName, String q, String search, String username) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersCountGetValidateBeforeCall(realm, email, emailVerified, enabled, firstName, lastName, q, search, username, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the number of users that match the given criteria. (asynchronously)
     * It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. &lt;p&gt; 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. &lt;p&gt; 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
     * @param realm realm name (not id!) (required)
     * @param email email filter (optional)
     * @param emailVerified  (optional)
     * @param enabled Boolean representing if user is enabled or not (optional)
     * @param firstName first name filter (optional)
     * @param lastName last name filter (optional)
     * @param q  (optional)
     * @param search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \&quot;foo\&quot; for exact search. (optional)
     * @param username username filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersCountGetAsync(String realm, String email, Boolean emailVerified, Boolean enabled, String firstName, String lastName, String q, String search, String username, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersCountGetValidateBeforeCall(realm, email, emailVerified, enabled, firstName, lastName, q, search, username, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersGet
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param email A String contained in email, or the complete email, if param \&quot;exact\&quot; is true (optional)
     * @param emailVerified whether the email has been verified (optional)
     * @param enabled Boolean representing if user is enabled or not (optional)
     * @param exact Boolean which defines whether the params \&quot;last\&quot;, \&quot;first\&quot;, \&quot;email\&quot; and \&quot;username\&quot; must match exactly (optional)
     * @param first Pagination offset (optional)
     * @param firstName A String contained in firstName, or the complete firstName, if param \&quot;exact\&quot; is true (optional)
     * @param idpAlias The alias of an Identity Provider linked to the user (optional)
     * @param idpUserId The userId at an Identity Provider linked to the user (optional)
     * @param lastName A String contained in lastName, or the complete lastName, if param \&quot;exact\&quot; is true (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param q A query to search for custom attributes, in the format &#39;key1:value2 key2:value2&#39; (optional)
     * @param search A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \&quot;foo\&quot; for exact search. (optional)
     * @param username A String contained in username, or the complete username, if param \&quot;exact\&quot; is true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersGetCall(String token, String realm, Boolean briefRepresentation, String email, Boolean emailVerified, Boolean enabled, Boolean exact, Integer first, String firstName, String idpAlias, String idpUserId, String lastName, Integer max, String q, String search, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (emailVerified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailVerified", emailVerified));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (idpAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpAlias", idpAlias));
        }

        if (idpUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idpUserId", idpUserId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            localVarHeaderParams.put("Authorization", "Bearer " + token);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersGetValidateBeforeCall(String token, String realm, Boolean briefRepresentation, String email, Boolean emailVerified, Boolean enabled, Boolean exact, Integer first, String firstName, String idpAlias, String idpUserId, String lastName, Integer max, String q, String search, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersGet(Async)");
        }

        return adminRealmsRealmUsersGetCall(token, realm, briefRepresentation, email, emailVerified, enabled, exact, first, firstName, idpAlias, idpUserId, lastName, max, q, search, username, _callback);

    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param email A String contained in email, or the complete email, if param \&quot;exact\&quot; is true (optional)
     * @param emailVerified whether the email has been verified (optional)
     * @param enabled Boolean representing if user is enabled or not (optional)
     * @param exact Boolean which defines whether the params \&quot;last\&quot;, \&quot;first\&quot;, \&quot;email\&quot; and \&quot;username\&quot; must match exactly (optional)
     * @param first Pagination offset (optional)
     * @param firstName A String contained in firstName, or the complete firstName, if param \&quot;exact\&quot; is true (optional)
     * @param idpAlias The alias of an Identity Provider linked to the user (optional)
     * @param idpUserId The userId at an Identity Provider linked to the user (optional)
     * @param lastName A String contained in lastName, or the complete lastName, if param \&quot;exact\&quot; is true (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param q A query to search for custom attributes, in the format &#39;key1:value2 key2:value2&#39; (optional)
     * @param search A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \&quot;foo\&quot; for exact search. (optional)
     * @param username A String contained in username, or the complete username, if param \&quot;exact\&quot; is true (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<List<UserRepresentation>> adminRealmsRealmUsersGetAsync(String token, String realm, Boolean briefRepresentation, String email, Boolean emailVerified, Boolean enabled, Boolean exact, Integer first, String firstName, String idpAlias, String idpUserId, String lastName, Integer max, String q, String search, String username) {
        try {
            FutureApiCallBack<List<UserRepresentation>> futureAPICallback = FutureApiCallBack.newCallback();
            okhttp3.Call localVarCall = adminRealmsRealmUsersGetValidateBeforeCall(token, realm, briefRepresentation, email, emailVerified, enabled, exact, first, firstName, idpAlias, idpUserId, lastName, max, q, search, username, futureAPICallback);
            Type localVarReturnType = new TypeToken<List<UserRepresentation>>() {
            }.getType();
            localVarApiClient.executeAsync(localVarCall, localVarReturnType, futureAPICallback);
            return futureAPICallback.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    public CompletionStage<UserRepresentation> adminRealmsRealmUsersGetAsync(String token, String realm, String userName) {
        return adminRealmsRealmUsersGetAsync(
                token,
                realm,
                null,
                null,
                null,
                true,
                true,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                userName
        ).thenApply(userRepresentations -> {
            if(userRepresentations.isEmpty()) {
                throw new CompletionException(new ApiException(404, userName + " Not Found"));
            }
            return userRepresentations.get(0);
        });
    }

    /**
     * Build call for adminRealmsRealmUsersPost
     * @param realm realm name (not id!) (required)
     * @param userRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersPostCall(String bearerToken, String realm, UserRepresentation userRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
            localVarHeaderParams.put("Authorization", "Bearer " + bearerToken);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersPostValidateBeforeCall(String bearerToken, String realm, UserRepresentation userRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersPost(Async)");
        }

        return adminRealmsRealmUsersPostCall(bearerToken, realm, userRepresentation, _callback);

    }

    /**
     * Create a new user Username must be unique. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userRepresentation  (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<Void> adminRealmsRealmUsersPostAsync(String bearerToken, String realm, UserRepresentation userRepresentation)  {
        try {
            FutureApiCallBack<Void> futureAPICallback = FutureApiCallBack.newCallback();
            okhttp3.Call localVarCall = adminRealmsRealmUsersPostValidateBeforeCall(bearerToken, realm, userRepresentation, futureAPICallback);
            localVarApiClient.executeAsync(localVarCall, futureAPICallback);
            return futureAPICallback.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Build call for adminRealmsRealmUsersProfileGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersProfileGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/profile"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersProfileGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersProfileGet(Async)");
        }

        return adminRealmsRealmUsersProfileGetCall(realm, _callback);

    }

    /**
     * 
     * Get the configuration for the user profile
     * @param realm realm name (not id!) (required)
     * @return UPConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UPConfig adminRealmsRealmUsersProfileGet(String realm) throws ApiException {
        ApiResponse<UPConfig> localVarResp = adminRealmsRealmUsersProfileGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration for the user profile
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;UPConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UPConfig> adminRealmsRealmUsersProfileGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersProfileGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<UPConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration for the user profile
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersProfileGetAsync(String realm, final ApiCallback<UPConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersProfileGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<UPConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersProfileMetadataGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersProfileMetadataGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/profile/metadata"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersProfileMetadataGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersProfileMetadataGet(Async)");
        }

        return adminRealmsRealmUsersProfileMetadataGetCall(realm, _callback);

    }

    /**
     * 
     * Get the UserProfileMetadata from the configuration
     * @param realm realm name (not id!) (required)
     * @return UserProfileMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserProfileMetadata adminRealmsRealmUsersProfileMetadataGet(String realm) throws ApiException {
        ApiResponse<UserProfileMetadata> localVarResp = adminRealmsRealmUsersProfileMetadataGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the UserProfileMetadata from the configuration
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;UserProfileMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserProfileMetadata> adminRealmsRealmUsersProfileMetadataGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersProfileMetadataGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<UserProfileMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the UserProfileMetadata from the configuration
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersProfileMetadataGetAsync(String realm, final ApiCallback<UserProfileMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersProfileMetadataGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<UserProfileMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersProfilePut
     * @param realm realm name (not id!) (required)
     * @param upConfig  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersProfilePutCall(String realm, UPConfig upConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upConfig;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/profile"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersProfilePutValidateBeforeCall(String realm, UPConfig upConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersProfilePut(Async)");
        }

        return adminRealmsRealmUsersProfilePutCall(realm, upConfig, _callback);

    }

    /**
     * 
     * Set the configuration for the user profile
     * @param realm realm name (not id!) (required)
     * @param upConfig  (optional)
     * @return UPConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UPConfig adminRealmsRealmUsersProfilePut(String realm, UPConfig upConfig) throws ApiException {
        ApiResponse<UPConfig> localVarResp = adminRealmsRealmUsersProfilePutWithHttpInfo(realm, upConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the configuration for the user profile
     * @param realm realm name (not id!) (required)
     * @param upConfig  (optional)
     * @return ApiResponse&lt;UPConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UPConfig> adminRealmsRealmUsersProfilePutWithHttpInfo(String realm, UPConfig upConfig) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersProfilePutValidateBeforeCall(realm, upConfig, null);
        Type localVarReturnType = new TypeToken<UPConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the configuration for the user profile
     * @param realm realm name (not id!) (required)
     * @param upConfig  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersProfilePutAsync(String realm, UPConfig upConfig, final ApiCallback<UPConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersProfilePutValidateBeforeCall(realm, upConfig, _callback);
        Type localVarReturnType = new TypeToken<UPConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/configured-user-storage-credential-types"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet(Async)");
        }

        return adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetCall(realm, userId, _callback);

    }

    /**
     * Return credential types, which are provided by the user storage where user is stored.
     * Returned values can contain for example \&quot;password\&quot;, \&quot;otp\&quot; etc. This will always return empty list for \&quot;local\&quot; users, which are not backed by any user storage
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet(String realm, String userId) throws ApiException {
        ApiResponse<List<String>> localVarResp = adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * Return credential types, which are provided by the user storage where user is stored.
     * Returned values can contain for example \&quot;password\&quot;, \&quot;otp\&quot; etc. This will always return empty list for \&quot;local\&quot; users, which are not backed by any user storage
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return credential types, which are provided by the user storage where user is stored. (asynchronously)
     * Returned values can contain for example \&quot;password\&quot;, \&quot;otp\&quot; etc. This will always return empty list for \&quot;local\&quot; users, which are not backed by any user storage
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetAsync(String realm, String userId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdConsentsClientDelete
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param client Client id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdConsentsClientDeleteCall(String realm, String userId, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/consents/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdConsentsClientDeleteValidateBeforeCall(String realm, String userId, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdConsentsClientDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdConsentsClientDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmUsersUserIdConsentsClientDelete(Async)");
        }

        return adminRealmsRealmUsersUserIdConsentsClientDeleteCall(realm, userId, client, _callback);

    }

    /**
     * Revoke consent and offline tokens for particular client from user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param client Client id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdConsentsClientDelete(String realm, String userId, String client) throws ApiException {
        adminRealmsRealmUsersUserIdConsentsClientDeleteWithHttpInfo(realm, userId, client);
    }

    /**
     * Revoke consent and offline tokens for particular client from user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param client Client id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdConsentsClientDeleteWithHttpInfo(String realm, String userId, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdConsentsClientDeleteValidateBeforeCall(realm, userId, client, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke consent and offline tokens for particular client from user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param client Client id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdConsentsClientDeleteAsync(String realm, String userId, String client, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdConsentsClientDeleteValidateBeforeCall(realm, userId, client, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdConsentsGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdConsentsGetCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/consents"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdConsentsGetValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdConsentsGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdConsentsGet(Async)");
        }

        return adminRealmsRealmUsersUserIdConsentsGetCall(realm, userId, _callback);

    }

    /**
     * Get consents granted by the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> adminRealmsRealmUsersUserIdConsentsGet(String realm, String userId) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = adminRealmsRealmUsersUserIdConsentsGetWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * Get consents granted by the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> adminRealmsRealmUsersUserIdConsentsGetWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdConsentsGetValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get consents granted by the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdConsentsGetAsync(String realm, String userId, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdConsentsGetValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteCall(String realm, String userId, String credentialId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "credentialId" + "}", localVarApiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteValidateBeforeCall(String realm, String userId, String credentialId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(Async)");
        }

        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(Async)");
        }

        return adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteCall(realm, userId, credentialId, _callback);

    }

    /**
     * Remove a credential for a user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(String realm, String userId, String credentialId) throws ApiException {
        adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteWithHttpInfo(realm, userId, credentialId);
    }

    /**
     * Remove a credential for a user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteWithHttpInfo(String realm, String userId, String credentialId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteValidateBeforeCall(realm, userId, credentialId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a credential for a user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteAsync(String realm, String userId, String credentialId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteValidateBeforeCall(realm, userId, credentialId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @param newPreviousCredentialId The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostCall(String realm, String userId, String credentialId, String newPreviousCredentialId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "credentialId" + "}", localVarApiClient.escapeString(credentialId.toString()))
            .replace("{" + "newPreviousCredentialId" + "}", localVarApiClient.escapeString(newPreviousCredentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostValidateBeforeCall(String realm, String userId, String credentialId, String newPreviousCredentialId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(Async)");
        }

        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(Async)");
        }

        // verify the required parameter 'newPreviousCredentialId' is set
        if (newPreviousCredentialId == null) {
            throw new ApiException("Missing the required parameter 'newPreviousCredentialId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(Async)");
        }

        return adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostCall(realm, userId, credentialId, newPreviousCredentialId, _callback);

    }

    /**
     * Move a credential to a position behind another credential
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @param newPreviousCredentialId The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(String realm, String userId, String credentialId, String newPreviousCredentialId) throws ApiException {
        adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostWithHttpInfo(realm, userId, credentialId, newPreviousCredentialId);
    }

    /**
     * Move a credential to a position behind another credential
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @param newPreviousCredentialId The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostWithHttpInfo(String realm, String userId, String credentialId, String newPreviousCredentialId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostValidateBeforeCall(realm, userId, credentialId, newPreviousCredentialId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move a credential to a position behind another credential (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @param newPreviousCredentialId The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostAsync(String realm, String userId, String credentialId, String newPreviousCredentialId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostValidateBeforeCall(realm, userId, credentialId, newPreviousCredentialId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostCall(String realm, String userId, String credentialId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveToFirst"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "credentialId" + "}", localVarApiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostValidateBeforeCall(String realm, String userId, String credentialId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(Async)");
        }

        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(Async)");
        }

        return adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostCall(realm, userId, credentialId, _callback);

    }

    /**
     * Move a credential to a first position in the credentials list of the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(String realm, String userId, String credentialId) throws ApiException {
        adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostWithHttpInfo(realm, userId, credentialId);
    }

    /**
     * Move a credential to a first position in the credentials list of the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostWithHttpInfo(String realm, String userId, String credentialId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostValidateBeforeCall(realm, userId, credentialId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move a credential to a first position in the credentials list of the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId The credential to move (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostAsync(String realm, String userId, String credentialId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostValidateBeforeCall(realm, userId, credentialId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutCall(String realm, String userId, String credentialId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/userLabel"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "credentialId" + "}", localVarApiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutValidateBeforeCall(String realm, String userId, String credentialId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(Async)");
        }

        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(Async)");
        }

        return adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutCall(realm, userId, credentialId, body, _callback);

    }

    /**
     * Update a credential label for a user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(String realm, String userId, String credentialId, String body) throws ApiException {
        adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutWithHttpInfo(realm, userId, credentialId, body);
    }

    /**
     * Update a credential label for a user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutWithHttpInfo(String realm, String userId, String credentialId, String body) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutValidateBeforeCall(realm, userId, credentialId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a credential label for a user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutAsync(String realm, String userId, String credentialId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutValidateBeforeCall(realm, userId, credentialId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdCredentialsGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsGetCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/credentials"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdCredentialsGetValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdCredentialsGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdCredentialsGet(Async)");
        }

        return adminRealmsRealmUsersUserIdCredentialsGetCall(realm, userId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return List&lt;CredentialRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CredentialRepresentation> adminRealmsRealmUsersUserIdCredentialsGet(String realm, String userId) throws ApiException {
        ApiResponse<List<CredentialRepresentation>> localVarResp = adminRealmsRealmUsersUserIdCredentialsGetWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;CredentialRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CredentialRepresentation>> adminRealmsRealmUsersUserIdCredentialsGetWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsGetValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<List<CredentialRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdCredentialsGetAsync(String realm, String userId, final ApiCallback<List<CredentialRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdCredentialsGetValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<List<CredentialRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdDelete
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdDeleteCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdDeleteValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdDelete(Async)");
        }

        return adminRealmsRealmUsersUserIdDeleteCall(realm, userId, _callback);

    }

    /**
     * Delete the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdDelete(String realm, String userId) throws ApiException {
        adminRealmsRealmUsersUserIdDeleteWithHttpInfo(realm, userId);
    }

    /**
     * Delete the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdDeleteWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdDeleteValidateBeforeCall(realm, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdDeleteAsync(String realm, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdDeleteValidateBeforeCall(realm, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdDisableCredentialTypesPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdDisableCredentialTypesPutCall(String realm, String userId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/disable-credential-types"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdDisableCredentialTypesPutValidateBeforeCall(String realm, String userId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdDisableCredentialTypesPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdDisableCredentialTypesPut(Async)");
        }

        return adminRealmsRealmUsersUserIdDisableCredentialTypesPutCall(realm, userId, requestBody, _callback);

    }

    /**
     * Disable all credentials for a user of a specific type
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdDisableCredentialTypesPut(String realm, String userId, List<String> requestBody) throws ApiException {
        adminRealmsRealmUsersUserIdDisableCredentialTypesPutWithHttpInfo(realm, userId, requestBody);
    }

    /**
     * Disable all credentials for a user of a specific type
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdDisableCredentialTypesPutWithHttpInfo(String realm, String userId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdDisableCredentialTypesPutValidateBeforeCall(realm, userId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable all credentials for a user of a specific type (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdDisableCredentialTypesPutAsync(String realm, String userId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdDisableCredentialTypesPutValidateBeforeCall(realm, userId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdExecuteActionsEmailPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdExecuteActionsEmailPutCall(String realm, String userId, String clientId, Integer lifespan, String redirectUri, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/execute-actions-email"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (lifespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lifespan", lifespan));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdExecuteActionsEmailPutValidateBeforeCall(String realm, String userId, String clientId, Integer lifespan, String redirectUri, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdExecuteActionsEmailPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdExecuteActionsEmailPut(Async)");
        }

        return adminRealmsRealmUsersUserIdExecuteActionsEmailPutCall(realm, userId, clientId, lifespan, redirectUri, requestBody, _callback);

    }

    /**
     * Send an email to the user with a link they can click to execute particular actions.
     * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdExecuteActionsEmailPut(String realm, String userId, String clientId, Integer lifespan, String redirectUri, List<String> requestBody) throws ApiException {
        adminRealmsRealmUsersUserIdExecuteActionsEmailPutWithHttpInfo(realm, userId, clientId, lifespan, redirectUri, requestBody);
    }

    /**
     * Send an email to the user with a link they can click to execute particular actions.
     * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdExecuteActionsEmailPutWithHttpInfo(String realm, String userId, String clientId, Integer lifespan, String redirectUri, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdExecuteActionsEmailPutValidateBeforeCall(realm, userId, clientId, lifespan, redirectUri, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send an email to the user with a link they can click to execute particular actions. (asynchronously)
     * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdExecuteActionsEmailPutAsync(String realm, String userId, String clientId, Integer lifespan, String redirectUri, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdExecuteActionsEmailPutValidateBeforeCall(realm, userId, clientId, lifespan, redirectUri, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdFederatedIdentityGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityGetCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/federated-identity"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityGetValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdFederatedIdentityGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdFederatedIdentityGet(Async)");
        }

        return adminRealmsRealmUsersUserIdFederatedIdentityGetCall(realm, userId, _callback);

    }

    /**
     * Get social logins associated with the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return List&lt;FederatedIdentityRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<FederatedIdentityRepresentation> adminRealmsRealmUsersUserIdFederatedIdentityGet(String realm, String userId) throws ApiException {
        ApiResponse<List<FederatedIdentityRepresentation>> localVarResp = adminRealmsRealmUsersUserIdFederatedIdentityGetWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * Get social logins associated with the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;FederatedIdentityRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FederatedIdentityRepresentation>> adminRealmsRealmUsersUserIdFederatedIdentityGetWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdFederatedIdentityGetValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<List<FederatedIdentityRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get social logins associated with the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityGetAsync(String realm, String userId, final ApiCallback<List<FederatedIdentityRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdFederatedIdentityGetValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<List<FederatedIdentityRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteCall(String realm, String userId, String provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/federated-identity/{provider}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteValidateBeforeCall(String realm, String userId, String provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(Async)");
        }

        return adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteCall(realm, userId, provider, _callback);

    }

    /**
     * Remove a social login provider from user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(String realm, String userId, String provider) throws ApiException {
        adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteWithHttpInfo(realm, userId, provider);
    }

    /**
     * Remove a social login provider from user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteWithHttpInfo(String realm, String userId, String provider) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteValidateBeforeCall(realm, userId, provider, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a social login provider from user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteAsync(String realm, String userId, String provider, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteValidateBeforeCall(realm, userId, provider, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdFederatedIdentityProviderPost
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityProviderPostCall(String realm, String userId, String provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/federated-identity/{provider}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityProviderPostValidateBeforeCall(String realm, String userId, String provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderPost(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling adminRealmsRealmUsersUserIdFederatedIdentityProviderPost(Async)");
        }

        return adminRealmsRealmUsersUserIdFederatedIdentityProviderPostCall(realm, userId, provider, _callback);

    }

    /**
     * Add a social login provider to the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdFederatedIdentityProviderPost(String realm, String userId, String provider) throws ApiException {
        adminRealmsRealmUsersUserIdFederatedIdentityProviderPostWithHttpInfo(realm, userId, provider);
    }

    /**
     * Add a social login provider to the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdFederatedIdentityProviderPostWithHttpInfo(String realm, String userId, String provider) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdFederatedIdentityProviderPostValidateBeforeCall(realm, userId, provider, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a social login provider to the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param provider Social login provider id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdFederatedIdentityProviderPostAsync(String realm, String userId, String provider, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdFederatedIdentityProviderPostValidateBeforeCall(realm, userId, provider, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param userProfileMetadata Indicates if the user profile metadata should be added to the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGetCall(String realm, String userId, Boolean userProfileMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userProfileMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProfileMetadata", userProfileMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdGetValidateBeforeCall(String realm, String userId, Boolean userProfileMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdGet(Async)");
        }

        return adminRealmsRealmUsersUserIdGetCall(realm, userId, userProfileMetadata, _callback);

    }

    /**
     * Get representation of the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param userProfileMetadata Indicates if the user profile metadata should be added to the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<UserRepresentation> adminRealmsRealmUsersUserIdGetAsync(String realm, String userId, Boolean userProfileMetadata, final ApiCallback<UserRepresentation> _callback) throws ApiException {
        try {
        FutureApiCallBack<UserRepresentation> futureAPICallback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGetValidateBeforeCall(realm, userId, userProfileMetadata, futureAPICallback);
        Type localVarReturnType = new TypeToken<UserRepresentation>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return futureAPICallback.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdGroupsCountGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param search  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsCountGetCall(String realm, String userId, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/groups/count"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdGroupsCountGetValidateBeforeCall(String realm, String userId, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdGroupsCountGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdGroupsCountGet(Async)");
        }

        return adminRealmsRealmUsersUserIdGroupsCountGetCall(realm, userId, search, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param search  (optional)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Long> adminRealmsRealmUsersUserIdGroupsCountGet(String realm, String userId, String search) throws ApiException {
        ApiResponse<Map<String, Long>> localVarResp = adminRealmsRealmUsersUserIdGroupsCountGetWithHttpInfo(realm, userId, search);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param search  (optional)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Long>> adminRealmsRealmUsersUserIdGroupsCountGetWithHttpInfo(String realm, String userId, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsCountGetValidateBeforeCall(realm, userId, search, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param search  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsCountGetAsync(String realm, String userId, String search, final ApiCallback<Map<String, Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsCountGetValidateBeforeCall(realm, userId, search, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdGroupsGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsGetCall(String realm, String userId, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdGroupsGetValidateBeforeCall(String realm, String userId, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdGroupsGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdGroupsGet(Async)");
        }

        return adminRealmsRealmUsersUserIdGroupsGetCall(realm, userId, briefRepresentation, first, max, search, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> adminRealmsRealmUsersUserIdGroupsGet(String realm, String userId, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = adminRealmsRealmUsersUserIdGroupsGetWithHttpInfo(realm, userId, briefRepresentation, first, max, search);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> adminRealmsRealmUsersUserIdGroupsGetWithHttpInfo(String realm, String userId, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsGetValidateBeforeCall(realm, userId, briefRepresentation, first, max, search, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsGetAsync(String realm, String userId, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsGetValidateBeforeCall(realm, userId, briefRepresentation, first, max, search, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdGroupsGroupIdDelete
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsGroupIdDeleteCall(String realm, String userId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/groups/{groupId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdGroupsGroupIdDeleteValidateBeforeCall(String realm, String userId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdGroupsGroupIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdGroupsGroupIdDelete(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmUsersUserIdGroupsGroupIdDelete(Async)");
        }

        return adminRealmsRealmUsersUserIdGroupsGroupIdDeleteCall(realm, userId, groupId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdGroupsGroupIdDelete(String realm, String userId, String groupId) throws ApiException {
        adminRealmsRealmUsersUserIdGroupsGroupIdDeleteWithHttpInfo(realm, userId, groupId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdGroupsGroupIdDeleteWithHttpInfo(String realm, String userId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsGroupIdDeleteValidateBeforeCall(realm, userId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsGroupIdDeleteAsync(String realm, String userId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsGroupIdDeleteValidateBeforeCall(realm, userId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdGroupsGroupIdPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsGroupIdPutCall(String realm, String userId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/groups/{groupId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdGroupsGroupIdPutValidateBeforeCall(String realm, String userId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdGroupsGroupIdPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdGroupsGroupIdPut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmUsersUserIdGroupsGroupIdPut(Async)");
        }

        return adminRealmsRealmUsersUserIdGroupsGroupIdPutCall(realm, userId, groupId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdGroupsGroupIdPut(String realm, String userId, String groupId) throws ApiException {
        adminRealmsRealmUsersUserIdGroupsGroupIdPutWithHttpInfo(realm, userId, groupId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdGroupsGroupIdPutWithHttpInfo(String realm, String userId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsGroupIdPutValidateBeforeCall(realm, userId, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdGroupsGroupIdPutAsync(String realm, String userId, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdGroupsGroupIdPutValidateBeforeCall(realm, userId, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdImpersonationPost
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdImpersonationPostCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/impersonation"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdImpersonationPostValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdImpersonationPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdImpersonationPost(Async)");
        }

        return adminRealmsRealmUsersUserIdImpersonationPostCall(realm, userId, _callback);

    }

    /**
     * Impersonate the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> adminRealmsRealmUsersUserIdImpersonationPost(String realm, String userId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = adminRealmsRealmUsersUserIdImpersonationPostWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * Impersonate the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> adminRealmsRealmUsersUserIdImpersonationPostWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdImpersonationPostValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Impersonate the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdImpersonationPostAsync(String realm, String userId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdImpersonationPostValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdLogoutPost
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdLogoutPostCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/logout"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdLogoutPostValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdLogoutPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdLogoutPost(Async)");
        }

        return adminRealmsRealmUsersUserIdLogoutPostCall(realm, userId, _callback);

    }

    /**
     * Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdLogoutPost(String realm, String userId) throws ApiException {
        adminRealmsRealmUsersUserIdLogoutPostWithHttpInfo(realm, userId);
    }

    /**
     * Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdLogoutPostWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdLogoutPostValidateBeforeCall(realm, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdLogoutPostAsync(String realm, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdLogoutPostValidateBeforeCall(realm, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public CompletionStage<Void> realmsRealmProtocolOpenIdConnectLogoutPostAsync(String realm, String clientId, String clientSecret, String bearerToken, String refreshToken)  {
        try {
            FutureApiCallBack<Void> futureAPICallback = FutureApiCallBack.newCallback();
            okhttp3.Call localVarCall = realmsRealmProtocolOpenIdConnectLogoutPostCall(realm, clientId, clientSecret, bearerToken, refreshToken, futureAPICallback);
            localVarApiClient.executeAsync(localVarCall, futureAPICallback);
            return futureAPICallback.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    public okhttp3.Call realmsRealmProtocolOpenIdConnectLogoutPostCall(String realm, String clientId, String clientSecret, String bearerToken, String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/realms/{realm}/protocol/openid-connect/logout"
                .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
            localVarHeaderParams.put("Authorization", "Bearer " + bearerToken);
        }

        final String[] localVarContentTypes = {
                "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    /**
     * Build call for adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetCall(String realm, String userId, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/offline-sessions/{clientUuid}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "clientUuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetValidateBeforeCall(String realm, String userId, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(Async)");
        }

        return adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetCall(realm, userId, clientUuid, _callback);

    }

    /**
     * Get offline sessions associated with the user and client
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientUuid  (required)
     * @return List&lt;UserSessionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSessionRepresentation> adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(String realm, String userId, String clientUuid) throws ApiException {
        ApiResponse<List<UserSessionRepresentation>> localVarResp = adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetWithHttpInfo(realm, userId, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get offline sessions associated with the user and client
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientUuid  (required)
     * @return ApiResponse&lt;List&lt;UserSessionRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSessionRepresentation>> adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetWithHttpInfo(String realm, String userId, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetValidateBeforeCall(realm, userId, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get offline sessions associated with the user and client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetAsync(String realm, String userId, String clientUuid, final ApiCallback<List<UserSessionRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetValidateBeforeCall(realm, userId, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param userRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdPutCall(String realm, String userId, UserRepresentation userRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdPutValidateBeforeCall(String realm, String userId, UserRepresentation userRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdPut(Async)");
        }

        return adminRealmsRealmUsersUserIdPutCall(realm, userId, userRepresentation, _callback);

    }

    /**
     * Update the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param userRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdPut(String realm, String userId, UserRepresentation userRepresentation) throws ApiException {
        adminRealmsRealmUsersUserIdPutWithHttpInfo(realm, userId, userRepresentation);
    }

    /**
     * Update the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param userRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdPutWithHttpInfo(String realm, String userId, UserRepresentation userRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdPutValidateBeforeCall(realm, userId, userRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param userRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdPutAsync(String realm, String userId, UserRepresentation userRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdPutValidateBeforeCall(realm, userId, userRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdResetPasswordEmailPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (optional)
     * @param redirectUri redirect uri (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmUsersUserIdResetPasswordEmailPutCall(String realm, String userId, String clientId, String redirectUri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/reset-password-email"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdResetPasswordEmailPutValidateBeforeCall(String realm, String userId, String clientId, String redirectUri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdResetPasswordEmailPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdResetPasswordEmailPut(Async)");
        }

        return adminRealmsRealmUsersUserIdResetPasswordEmailPutCall(realm, userId, clientId, redirectUri, _callback);

    }

    /**
     * Send an email to the user with a link they can click to reset their password.
     * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (optional)
     * @param redirectUri redirect uri (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void adminRealmsRealmUsersUserIdResetPasswordEmailPut(String realm, String userId, String clientId, String redirectUri) throws ApiException {
        adminRealmsRealmUsersUserIdResetPasswordEmailPutWithHttpInfo(realm, userId, clientId, redirectUri);
    }

    /**
     * Send an email to the user with a link they can click to reset their password.
     * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (optional)
     * @param redirectUri redirect uri (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> adminRealmsRealmUsersUserIdResetPasswordEmailPutWithHttpInfo(String realm, String userId, String clientId, String redirectUri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdResetPasswordEmailPutValidateBeforeCall(realm, userId, clientId, redirectUri, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send an email to the user with a link they can click to reset their password. (asynchronously)
     * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (optional)
     * @param redirectUri redirect uri (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmUsersUserIdResetPasswordEmailPutAsync(String realm, String userId, String clientId, String redirectUri, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdResetPasswordEmailPutValidateBeforeCall(realm, userId, clientId, redirectUri, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdResetPasswordPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdResetPasswordPutCall(String realm, String userId, CredentialRepresentation credentialRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credentialRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/reset-password"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdResetPasswordPutValidateBeforeCall(String realm, String userId, CredentialRepresentation credentialRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdResetPasswordPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdResetPasswordPut(Async)");
        }

        return adminRealmsRealmUsersUserIdResetPasswordPutCall(realm, userId, credentialRepresentation, _callback);

    }

    /**
     * Set up a new password for the user.
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdResetPasswordPut(String realm, String userId, CredentialRepresentation credentialRepresentation) throws ApiException {
        adminRealmsRealmUsersUserIdResetPasswordPutWithHttpInfo(realm, userId, credentialRepresentation);
    }

    /**
     * Set up a new password for the user.
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdResetPasswordPutWithHttpInfo(String realm, String userId, CredentialRepresentation credentialRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdResetPasswordPutValidateBeforeCall(realm, userId, credentialRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set up a new password for the user. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param credentialRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdResetPasswordPutAsync(String realm, String userId, CredentialRepresentation credentialRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdResetPasswordPutValidateBeforeCall(realm, userId, credentialRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdSendVerifyEmailPut
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdSendVerifyEmailPutCall(String realm, String userId, String clientId, Integer lifespan, String redirectUri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/send-verify-email"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (lifespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lifespan", lifespan));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdSendVerifyEmailPutValidateBeforeCall(String realm, String userId, String clientId, Integer lifespan, String redirectUri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdSendVerifyEmailPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdSendVerifyEmailPut(Async)");
        }

        return adminRealmsRealmUsersUserIdSendVerifyEmailPutCall(realm, userId, clientId, lifespan, redirectUri, _callback);

    }

    /**
     * Send an email-verification email to the user An email contains a link the user can click to verify their email address.
     * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdSendVerifyEmailPut(String realm, String userId, String clientId, Integer lifespan, String redirectUri) throws ApiException {
        adminRealmsRealmUsersUserIdSendVerifyEmailPutWithHttpInfo(realm, userId, clientId, lifespan, redirectUri);
    }

    /**
     * Send an email-verification email to the user An email contains a link the user can click to verify their email address.
     * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdSendVerifyEmailPutWithHttpInfo(String realm, String userId, String clientId, Integer lifespan, String redirectUri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdSendVerifyEmailPutValidateBeforeCall(realm, userId, clientId, lifespan, redirectUri, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send an email-verification email to the user An email contains a link the user can click to verify their email address. (asynchronously)
     * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId Client id (optional)
     * @param lifespan Number of seconds after which the generated token expires (optional)
     * @param redirectUri Redirect uri (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdSendVerifyEmailPutAsync(String realm, String userId, String clientId, Integer lifespan, String redirectUri, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdSendVerifyEmailPutValidateBeforeCall(realm, userId, clientId, lifespan, redirectUri, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdSessionsGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdSessionsGetCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/sessions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdSessionsGetValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdSessionsGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdSessionsGet(Async)");
        }

        return adminRealmsRealmUsersUserIdSessionsGetCall(realm, userId, _callback);

    }

    /**
     * Get sessions associated with the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return List&lt;UserSessionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSessionRepresentation> adminRealmsRealmUsersUserIdSessionsGet(String realm, String userId) throws ApiException {
        ApiResponse<List<UserSessionRepresentation>> localVarResp = adminRealmsRealmUsersUserIdSessionsGetWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * Get sessions associated with the user
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;UserSessionRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSessionRepresentation>> adminRealmsRealmUsersUserIdSessionsGetWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdSessionsGetValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sessions associated with the user (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdSessionsGetAsync(String realm, String userId, final ApiCallback<List<UserSessionRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdSessionsGetValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdUnmanagedAttributesGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdUnmanagedAttributesGetCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/unmanagedAttributes"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdUnmanagedAttributesGetValidateBeforeCall(String realm, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdUnmanagedAttributesGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdUnmanagedAttributesGet(Async)");
        }

        return adminRealmsRealmUsersUserIdUnmanagedAttributesGetCall(realm, userId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<String>> adminRealmsRealmUsersUserIdUnmanagedAttributesGet(String realm, String userId) throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = adminRealmsRealmUsersUserIdUnmanagedAttributesGetWithHttpInfo(realm, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> adminRealmsRealmUsersUserIdUnmanagedAttributesGetWithHttpInfo(String realm, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdUnmanagedAttributesGetValidateBeforeCall(realm, userId, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdUnmanagedAttributesGetAsync(String realm, String userId, final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdUnmanagedAttributesGetValidateBeforeCall(realm, userId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
