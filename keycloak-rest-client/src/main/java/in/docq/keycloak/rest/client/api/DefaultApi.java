/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.AbstractPolicyRepresentation;
import in.docq.keycloak.rest.client.model.PolicyEvaluationRequest;
import in.docq.keycloak.rest.client.model.PolicyEvaluationResponse;
import in.docq.keycloak.rest.client.model.PolicyProviderRepresentation;
import in.docq.keycloak.rest.client.model.PolicyRepresentation;
import in.docq.keycloak.rest.client.model.ResourceRepresentation;
import in.docq.keycloak.rest.client.model.ResourceServerRepresentation;
import in.docq.keycloak.rest.client.model.ScopeRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerGetCall(realm, clientUuid, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ResourceServerRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceServerRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<ResourceServerRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;ResourceServerRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceServerRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<ResourceServerRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerGetAsync(String realm, String clientUuid, final ApiCallback<ResourceServerRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<ResourceServerRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostCall(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceServerRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/import"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostValidateBeforeCall(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostCall(realm, clientUuid, resourceServerRepresentation, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostWithHttpInfo(realm, clientUuid, resourceServerRepresentation);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostWithHttpInfo(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostValidateBeforeCall(realm, clientUuid, resourceServerRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostAsync(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerImportPostValidateBeforeCall(realm, clientUuid, resourceServerRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostCall(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyEvaluationRequest;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/evaluate"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostValidateBeforeCall(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostCall(realm, clientUuid, policyEvaluationRequest, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @return PolicyEvaluationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PolicyEvaluationResponse adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest) throws ApiException {
        ApiResponse<PolicyEvaluationResponse> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostWithHttpInfo(realm, clientUuid, policyEvaluationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @return ApiResponse&lt;PolicyEvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyEvaluationResponse> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostWithHttpInfo(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostValidateBeforeCall(realm, clientUuid, policyEvaluationRequest, null);
        Type localVarReturnType = new TypeToken<PolicyEvaluationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostAsync(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest, final ApiCallback<PolicyEvaluationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostValidateBeforeCall(realm, clientUuid, policyEvaluationRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyEvaluationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetCall(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyId", policyId));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetValidateBeforeCall(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetCall(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @return List&lt;AbstractPolicyRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public List<AbstractPolicyRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type) throws ApiException {
        ApiResponse<List<AbstractPolicyRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetWithHttpInfo(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;List&lt;AbstractPolicyRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AbstractPolicyRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetWithHttpInfo(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetValidateBeforeCall(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type, null);
        Type localVarReturnType = new TypeToken<List<AbstractPolicyRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetAsync(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type, final ApiCallback<List<AbstractPolicyRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetValidateBeforeCall(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type, _callback);
        Type localVarReturnType = new TypeToken<List<AbstractPolicyRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostCall(String realm, String clientUuid, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostValidateBeforeCall(String realm, String clientUuid, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostCall(realm, clientUuid, body, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(String realm, String clientUuid, String body) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostWithHttpInfo(realm, clientUuid, body);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostWithHttpInfo(String realm, String clientUuid, String body) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostValidateBeforeCall(realm, clientUuid, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostAsync(String realm, String clientUuid, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostValidateBeforeCall(realm, clientUuid, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetCall(realm, clientUuid, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;PolicyProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyProviderRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<PolicyProviderRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;PolicyProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyProviderRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<PolicyProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetAsync(String realm, String clientUuid, final ApiCallback<List<PolicyProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetCall(String realm, String clientUuid, String fields, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/search"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetValidateBeforeCall(String realm, String clientUuid, String fields, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetCall(realm, clientUuid, fields, name, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @return AbstractPolicyRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AbstractPolicyRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(String realm, String clientUuid, String fields, String name) throws ApiException {
        ApiResponse<AbstractPolicyRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetWithHttpInfo(realm, clientUuid, fields, name);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;AbstractPolicyRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractPolicyRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetWithHttpInfo(String realm, String clientUuid, String fields, String name) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetValidateBeforeCall(realm, clientUuid, fields, name, null);
        Type localVarReturnType = new TypeToken<AbstractPolicyRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetAsync(String realm, String clientUuid, String fields, String name, final ApiCallback<AbstractPolicyRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetValidateBeforeCall(realm, clientUuid, fields, name, _callback);
        Type localVarReturnType = new TypeToken<AbstractPolicyRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostCall(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyEvaluationRequest;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/evaluate"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostValidateBeforeCall(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostCall(realm, clientUuid, policyEvaluationRequest, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @return PolicyEvaluationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PolicyEvaluationResponse adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest) throws ApiException {
        ApiResponse<PolicyEvaluationResponse> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostWithHttpInfo(realm, clientUuid, policyEvaluationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @return ApiResponse&lt;PolicyEvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyEvaluationResponse> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostWithHttpInfo(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostValidateBeforeCall(realm, clientUuid, policyEvaluationRequest, null);
        Type localVarReturnType = new TypeToken<PolicyEvaluationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param policyEvaluationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostAsync(String realm, String clientUuid, PolicyEvaluationRequest policyEvaluationRequest, final ApiCallback<PolicyEvaluationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostValidateBeforeCall(realm, clientUuid, policyEvaluationRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyEvaluationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetCall(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyId", policyId));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetValidateBeforeCall(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetCall(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @return List&lt;AbstractPolicyRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public List<AbstractPolicyRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type) throws ApiException {
        ApiResponse<List<AbstractPolicyRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetWithHttpInfo(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;List&lt;AbstractPolicyRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AbstractPolicyRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetWithHttpInfo(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetValidateBeforeCall(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type, null);
        Type localVarReturnType = new TypeToken<List<AbstractPolicyRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param permission  (optional)
     * @param policyId  (optional)
     * @param resource  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetAsync(String realm, String clientUuid, String fields, Integer first, Integer max, String name, String owner, Boolean permission, String policyId, String resource, String scope, String type, final ApiCallback<List<AbstractPolicyRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetValidateBeforeCall(realm, clientUuid, fields, first, max, name, owner, permission, policyId, resource, scope, type, _callback);
        Type localVarReturnType = new TypeToken<List<AbstractPolicyRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostCall(String realm, String clientUuid, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostValidateBeforeCall(String realm, String clientUuid, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostCall(realm, clientUuid, body, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(String realm, String clientUuid, String body) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostWithHttpInfo(realm, clientUuid, body);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostWithHttpInfo(String realm, String clientUuid, String body) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostValidateBeforeCall(realm, clientUuid, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostAsync(String realm, String clientUuid, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostValidateBeforeCall(realm, clientUuid, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetCall(realm, clientUuid, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;PolicyProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyProviderRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<PolicyProviderRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;PolicyProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyProviderRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<PolicyProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetAsync(String realm, String clientUuid, final ApiCallback<List<PolicyProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetCall(String realm, String clientUuid, String fields, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/search"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetValidateBeforeCall(String realm, String clientUuid, String fields, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetCall(realm, clientUuid, fields, name, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @return AbstractPolicyRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AbstractPolicyRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(String realm, String clientUuid, String fields, String name) throws ApiException {
        ApiResponse<AbstractPolicyRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetWithHttpInfo(realm, clientUuid, fields, name);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;AbstractPolicyRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractPolicyRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetWithHttpInfo(String realm, String clientUuid, String fields, String name) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetValidateBeforeCall(realm, clientUuid, fields, name, null);
        Type localVarReturnType = new TypeToken<AbstractPolicyRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param fields  (optional)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetAsync(String realm, String clientUuid, String fields, String name, final ApiCallback<AbstractPolicyRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetValidateBeforeCall(realm, clientUuid, fields, name, _callback);
        Type localVarReturnType = new TypeToken<AbstractPolicyRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPutCall(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceServerRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPutValidateBeforeCall(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerPutCall(realm, clientUuid, resourceServerRepresentation, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerPut(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerPutWithHttpInfo(realm, clientUuid, resourceServerRepresentation);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerPutWithHttpInfo(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPutValidateBeforeCall(realm, clientUuid, resourceServerRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceServerRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerPutAsync(String realm, String clientUuid, ResourceServerRepresentation resourceServerRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerPutValidateBeforeCall(realm, clientUuid, resourceServerRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetCall(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetValidateBeforeCall(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return List&lt;ResourceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        ApiResponse<List<ResourceRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetWithHttpInfo(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ApiResponse&lt;List&lt;ResourceRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetWithHttpInfo(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetValidateBeforeCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, null);
        Type localVarReturnType = new TypeToken<List<ResourceRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetAsync(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback<List<ResourceRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetValidateBeforeCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostCall(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostValidateBeforeCall(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @return ResourceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation) throws ApiException {
        ApiResponse<ResourceRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostWithHttpInfo(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @return ApiResponse&lt;ResourceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostWithHttpInfo(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostValidateBeforeCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation, null);
        Type localVarReturnType = new TypeToken<ResourceRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostAsync(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation, final ApiCallback<ResourceRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostValidateBeforeCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation, _callback);
        Type localVarReturnType = new TypeToken<ResourceRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/attributes"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "resource-id" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetValidateBeforeCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetWithHttpInfo(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetWithHttpInfo(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetAsync(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "resource-id" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteValidateBeforeCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteWithHttpInfo(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteWithHttpInfo(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteAsync(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "resource-id" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetValidateBeforeCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ResourceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        ApiResponse<ResourceRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetWithHttpInfo(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ApiResponse&lt;ResourceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetWithHttpInfo(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, null);
        Type localVarReturnType = new TypeToken<ResourceRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetAsync(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback<ResourceRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);
        Type localVarReturnType = new TypeToken<ResourceRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "resource-id" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetValidateBeforeCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return List&lt;PolicyRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        ApiResponse<List<PolicyRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetWithHttpInfo(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ApiResponse&lt;List&lt;PolicyRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetWithHttpInfo(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, null);
        Type localVarReturnType = new TypeToken<List<PolicyRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetAsync(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback<List<PolicyRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "resource-id" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutValidateBeforeCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutWithHttpInfo(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutWithHttpInfo(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param resourceRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutAsync(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, ResourceRepresentation resourceRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, resourceRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/scopes"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "resource-id" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetValidateBeforeCall(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return List&lt;ScopeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScopeRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        ApiResponse<List<ScopeRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetWithHttpInfo(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @return ApiResponse&lt;List&lt;ScopeRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScopeRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetWithHttpInfo(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, null);
        Type localVarReturnType = new TypeToken<List<ScopeRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param resourceId  (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetAsync(String realm, String clientUuid, String resourceId, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String name, String owner, String scope, String type, String uri, final ApiCallback<List<ScopeRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetValidateBeforeCall(realm, clientUuid, resourceId, id, deep, exactName, first, matchingUri, max, name, owner, scope, type, uri, _callback);
        Type localVarReturnType = new TypeToken<List<ScopeRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetCall(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String owner, String scope, String type, String uri, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/search"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_id", id));
        }

        if (deep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deep", deep));
        }

        if (exactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactName", exactName));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (matchingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingUri", matchingUri));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetValidateBeforeCall(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String owner, String scope, String type, String uri, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, owner, scope, type, uri, name, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param name  (optional)
     * @return ResourceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String owner, String scope, String type, String uri, String name) throws ApiException {
        ApiResponse<ResourceRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetWithHttpInfo(realm, clientUuid, id, deep, exactName, first, matchingUri, max, owner, scope, type, uri, name);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;ResourceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetWithHttpInfo(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String owner, String scope, String type, String uri, String name) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetValidateBeforeCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, owner, scope, type, uri, name, null);
        Type localVarReturnType = new TypeToken<ResourceRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id  (optional)
     * @param deep  (optional)
     * @param exactName  (optional)
     * @param first  (optional)
     * @param matchingUri  (optional)
     * @param max  (optional)
     * @param owner  (optional)
     * @param scope  (optional)
     * @param type  (optional)
     * @param uri  (optional)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetAsync(String realm, String clientUuid, String id, Boolean deep, Boolean exactName, Integer first, Boolean matchingUri, Integer max, String owner, String scope, String type, String uri, String name, final ApiCallback<ResourceRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetValidateBeforeCall(realm, clientUuid, id, deep, exactName, first, matchingUri, max, owner, scope, type, uri, name, _callback);
        Type localVarReturnType = new TypeToken<ResourceRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param scopeId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetCall(String realm, String clientUuid, Integer first, Integer max, String name, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopeId", scopeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetValidateBeforeCall(String realm, String clientUuid, Integer first, Integer max, String name, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetCall(realm, clientUuid, first, max, name, scopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param scopeId  (optional)
     * @return List&lt;ScopeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ScopeRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(String realm, String clientUuid, Integer first, Integer max, String name, String scopeId) throws ApiException {
        ApiResponse<List<ScopeRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetWithHttpInfo(realm, clientUuid, first, max, name, scopeId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param scopeId  (optional)
     * @return ApiResponse&lt;List&lt;ScopeRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScopeRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetWithHttpInfo(String realm, String clientUuid, Integer first, Integer max, String name, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetValidateBeforeCall(realm, clientUuid, first, max, name, scopeId, null);
        Type localVarReturnType = new TypeToken<List<ScopeRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first  (optional)
     * @param max  (optional)
     * @param name  (optional)
     * @param scopeId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetAsync(String realm, String clientUuid, Integer first, Integer max, String name, String scopeId, final ApiCallback<List<ScopeRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetValidateBeforeCall(realm, clientUuid, first, max, name, scopeId, _callback);
        Type localVarReturnType = new TypeToken<List<ScopeRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostCall(String realm, String clientUuid, ScopeRepresentation scopeRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostValidateBeforeCall(String realm, String clientUuid, ScopeRepresentation scopeRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostCall(realm, clientUuid, scopeRepresentation, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(String realm, String clientUuid, ScopeRepresentation scopeRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostWithHttpInfo(realm, clientUuid, scopeRepresentation);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostWithHttpInfo(String realm, String clientUuid, ScopeRepresentation scopeRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostValidateBeforeCall(realm, clientUuid, scopeRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostAsync(String realm, String clientUuid, ScopeRepresentation scopeRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopePostValidateBeforeCall(realm, clientUuid, scopeRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "scope-id" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteValidateBeforeCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteCall(realm, clientUuid, scopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(String realm, String clientUuid, String scopeId) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteWithHttpInfo(realm, clientUuid, scopeId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteWithHttpInfo(String realm, String clientUuid, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteValidateBeforeCall(realm, clientUuid, scopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteAsync(String realm, String clientUuid, String scopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteValidateBeforeCall(realm, clientUuid, scopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "scope-id" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetValidateBeforeCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetCall(realm, clientUuid, scopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return ScopeRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScopeRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(String realm, String clientUuid, String scopeId) throws ApiException {
        ApiResponse<ScopeRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetWithHttpInfo(realm, clientUuid, scopeId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return ApiResponse&lt;ScopeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetWithHttpInfo(String realm, String clientUuid, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetValidateBeforeCall(realm, clientUuid, scopeId, null);
        Type localVarReturnType = new TypeToken<ScopeRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetAsync(String realm, String clientUuid, String scopeId, final ApiCallback<ScopeRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetValidateBeforeCall(realm, clientUuid, scopeId, _callback);
        Type localVarReturnType = new TypeToken<ScopeRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "scope-id" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetValidateBeforeCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetCall(realm, clientUuid, scopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return List&lt;PolicyRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(String realm, String clientUuid, String scopeId) throws ApiException {
        ApiResponse<List<PolicyRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetWithHttpInfo(realm, clientUuid, scopeId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return ApiResponse&lt;List&lt;PolicyRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetWithHttpInfo(String realm, String clientUuid, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetValidateBeforeCall(realm, clientUuid, scopeId, null);
        Type localVarReturnType = new TypeToken<List<PolicyRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetAsync(String realm, String clientUuid, String scopeId, final ApiCallback<List<PolicyRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetValidateBeforeCall(realm, clientUuid, scopeId, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param scopeRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutCall(String realm, String clientUuid, String scopeId, ScopeRepresentation scopeRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "scope-id" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutValidateBeforeCall(String realm, String clientUuid, String scopeId, ScopeRepresentation scopeRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutCall(realm, clientUuid, scopeId, scopeRepresentation, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param scopeRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(String realm, String clientUuid, String scopeId, ScopeRepresentation scopeRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutWithHttpInfo(realm, clientUuid, scopeId, scopeRepresentation);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param scopeRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutWithHttpInfo(String realm, String clientUuid, String scopeId, ScopeRepresentation scopeRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutValidateBeforeCall(realm, clientUuid, scopeId, scopeRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param scopeRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutAsync(String realm, String clientUuid, String scopeId, ScopeRepresentation scopeRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutValidateBeforeCall(realm, clientUuid, scopeId, scopeRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/resources"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "scope-id" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetValidateBeforeCall(String realm, String clientUuid, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetCall(realm, clientUuid, scopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return List&lt;ResourceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(String realm, String clientUuid, String scopeId) throws ApiException {
        ApiResponse<List<ResourceRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetWithHttpInfo(realm, clientUuid, scopeId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @return ApiResponse&lt;List&lt;ResourceRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetWithHttpInfo(String realm, String clientUuid, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetValidateBeforeCall(realm, clientUuid, scopeId, null);
        Type localVarReturnType = new TypeToken<List<ResourceRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetAsync(String realm, String clientUuid, String scopeId, final ApiCallback<List<ResourceRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetValidateBeforeCall(realm, clientUuid, scopeId, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetCall(String realm, String clientUuid, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/search"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetValidateBeforeCall(String realm, String clientUuid, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetCall(realm, clientUuid, name, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param name  (optional)
     * @return List&lt;ScopeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<ScopeRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(String realm, String clientUuid, String name) throws ApiException {
        ApiResponse<List<ScopeRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetWithHttpInfo(realm, clientUuid, name);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param name  (optional)
     * @return ApiResponse&lt;List&lt;ScopeRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScopeRepresentation>> adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetWithHttpInfo(String realm, String clientUuid, String name) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetValidateBeforeCall(realm, clientUuid, name, null);
        Type localVarReturnType = new TypeToken<List<ScopeRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetAsync(String realm, String clientUuid, String name, final ApiCallback<List<ScopeRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetValidateBeforeCall(realm, clientUuid, name, _callback);
        Type localVarReturnType = new TypeToken<List<ScopeRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/settings"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetCall(realm, clientUuid, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ResourceServerRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceServerRepresentation adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<ResourceServerRepresentation> localVarResp = adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;ResourceServerRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceServerRepresentation> adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<ResourceServerRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetAsync(String realm, String clientUuid, final ApiCallback<ResourceServerRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<ResourceServerRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
