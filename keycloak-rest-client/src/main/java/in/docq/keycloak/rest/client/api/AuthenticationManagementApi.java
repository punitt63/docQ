/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.AuthenticationExecutionInfoRepresentation;
import in.docq.keycloak.rest.client.model.AuthenticationExecutionRepresentation;
import in.docq.keycloak.rest.client.model.AuthenticationFlowRepresentation;
import in.docq.keycloak.rest.client.model.AuthenticatorConfigInfoRepresentation;
import in.docq.keycloak.rest.client.model.AuthenticatorConfigRepresentation;
import in.docq.keycloak.rest.client.model.ConfigPropertyRepresentation;
import in.docq.keycloak.rest.client.model.RequiredActionConfigInfoRepresentation;
import in.docq.keycloak.rest.client.model.RequiredActionConfigRepresentation;
import in.docq.keycloak.rest.client.model.RequiredActionProviderRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmAuthenticationAuthenticatorProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationAuthenticatorProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/authenticator-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationAuthenticatorProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationAuthenticatorProvidersGet(Async)");
        }

        return adminRealmsRealmAuthenticationAuthenticatorProvidersGetCall(realm, _callback);

    }

    /**
     * Get authenticator providers Returns a stream of authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> adminRealmsRealmAuthenticationAuthenticatorProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = adminRealmsRealmAuthenticationAuthenticatorProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get authenticator providers Returns a stream of authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> adminRealmsRealmAuthenticationAuthenticatorProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationAuthenticatorProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authenticator providers Returns a stream of authenticator providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationAuthenticatorProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationAuthenticatorProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationClientAuthenticatorProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/client-authenticator-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationClientAuthenticatorProvidersGet(Async)");
        }

        return adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetCall(realm, _callback);

    }

    /**
     * Get client authenticator providers Returns a stream of client authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> adminRealmsRealmAuthenticationClientAuthenticatorProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get client authenticator providers Returns a stream of client authenticator providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client authenticator providers Returns a stream of client authenticator providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationClientAuthenticatorProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/config-description/{providerId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetValidateBeforeCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet(Async)");
        }

        return adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetCall(realm, providerId, _callback);

    }

    /**
     * Get authenticator provider&#39;s configuration description
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @return AuthenticatorConfigInfoRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorConfigInfoRepresentation adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet(String realm, String providerId) throws ApiException {
        ApiResponse<AuthenticatorConfigInfoRepresentation> localVarResp = adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(realm, providerId);
        return localVarResp.getData();
    }

    /**
     * Get authenticator provider&#39;s configuration description
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;AuthenticatorConfigInfoRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorConfigInfoRepresentation> adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetWithHttpInfo(String realm, String providerId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetValidateBeforeCall(realm, providerId, null);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigInfoRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authenticator provider&#39;s configuration description (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetAsync(String realm, String providerId, final ApiCallback<AuthenticatorConfigInfoRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigDescriptionProviderIdGetValidateBeforeCall(realm, providerId, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigInfoRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationConfigIdDelete
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigIdDeleteCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationConfigIdDeleteValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationConfigIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationConfigIdDelete(Async)");
        }

        return adminRealmsRealmAuthenticationConfigIdDeleteCall(realm, id, _callback);

    }

    /**
     * Delete authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationConfigIdDelete(String realm, String id) throws ApiException {
        adminRealmsRealmAuthenticationConfigIdDeleteWithHttpInfo(realm, id);
    }

    /**
     * Delete authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationConfigIdDeleteWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigIdDeleteValidateBeforeCall(realm, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigIdDeleteAsync(String realm, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigIdDeleteValidateBeforeCall(realm, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationConfigIdGet
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigIdGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationConfigIdGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationConfigIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationConfigIdGet(Async)");
        }

        return adminRealmsRealmAuthenticationConfigIdGetCall(realm, id, _callback);

    }

    /**
     * Get authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @return AuthenticatorConfigRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorConfigRepresentation adminRealmsRealmAuthenticationConfigIdGet(String realm, String id) throws ApiException {
        ApiResponse<AuthenticatorConfigRepresentation> localVarResp = adminRealmsRealmAuthenticationConfigIdGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @return ApiResponse&lt;AuthenticatorConfigRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorConfigRepresentation> adminRealmsRealmAuthenticationConfigIdGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigIdGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigIdGetAsync(String realm, String id, final ApiCallback<AuthenticatorConfigRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigIdGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationConfigIdPut
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigIdPutCall(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorConfigRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationConfigIdPutValidateBeforeCall(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationConfigIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationConfigIdPut(Async)");
        }

        return adminRealmsRealmAuthenticationConfigIdPutCall(realm, id, authenticatorConfigRepresentation, _callback);

    }

    /**
     * Update authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationConfigIdPut(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationConfigIdPutWithHttpInfo(realm, id, authenticatorConfigRepresentation);
    }

    /**
     * Update authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationConfigIdPutWithHttpInfo(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigIdPutValidateBeforeCall(realm, id, authenticatorConfigRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Configuration id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationConfigIdPutAsync(String realm, String id, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigIdPutValidateBeforeCall(realm, id, authenticatorConfigRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationConfigPost
     * @param realm realm name (not id!) (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmAuthenticationConfigPostCall(String realm, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorConfigRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationConfigPostValidateBeforeCall(String realm, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationConfigPost(Async)");
        }

        return adminRealmsRealmAuthenticationConfigPostCall(realm, authenticatorConfigRepresentation, _callback);

    }

    /**
     * Create new authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void adminRealmsRealmAuthenticationConfigPost(String realm, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationConfigPostWithHttpInfo(realm, authenticatorConfigRepresentation);
    }

    /**
     * Create new authenticator configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> adminRealmsRealmAuthenticationConfigPostWithHttpInfo(String realm, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigPostValidateBeforeCall(realm, authenticatorConfigRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new authenticator configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmAuthenticationConfigPostAsync(String realm, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationConfigPostValidateBeforeCall(realm, authenticatorConfigRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param id Configuration id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetCall(String realm, String executionId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions/{executionId}/config/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetValidateBeforeCall(String realm, String executionId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetCall(realm, executionId, id, _callback);

    }

    /**
     * Get execution&#39;s configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param id Configuration id (required)
     * @return AuthenticatorConfigRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AuthenticatorConfigRepresentation adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet(String realm, String executionId, String id) throws ApiException {
        ApiResponse<AuthenticatorConfigRepresentation> localVarResp = adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetWithHttpInfo(realm, executionId, id);
        return localVarResp.getData();
    }

    /**
     * Get execution&#39;s configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param id Configuration id (required)
     * @return ApiResponse&lt;AuthenticatorConfigRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AuthenticatorConfigRepresentation> adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetWithHttpInfo(String realm, String executionId, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetValidateBeforeCall(realm, executionId, id, null);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get execution&#39;s configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param id Configuration id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetAsync(String realm, String executionId, String id, final ApiCallback<AuthenticatorConfigRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGetValidateBeforeCall(realm, executionId, id, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorConfigRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostCall(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorConfigRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions/{executionId}/config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostValidateBeforeCall(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostCall(realm, executionId, authenticatorConfigRepresentation, _callback);

    }

    /**
     * Update execution with new configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(realm, executionId, authenticatorConfigRepresentation);
    }

    /**
     * Update execution with new configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostWithHttpInfo(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostValidateBeforeCall(realm, executionId, authenticatorConfigRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update execution with new configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param authenticatorConfigRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostAsync(String realm, String executionId, AuthenticatorConfigRepresentation authenticatorConfigRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPostValidateBeforeCall(realm, executionId, authenticatorConfigRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsExecutionIdDelete
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions/{executionId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdDelete(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdDelete(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteCall(realm, executionId, _callback);

    }

    /**
     * Delete execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationExecutionsExecutionIdDelete(String realm, String executionId) throws ApiException {
        adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(realm, executionId);
    }

    /**
     * Delete execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete execution (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdDeleteValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsExecutionIdGet
     * @param realm realm name (not id!) (required)
     * @param executionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdGetCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions/{executionId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdGetValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdGet(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdGet(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsExecutionIdGetCall(realm, executionId, _callback);

    }

    /**
     * Get Single Execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId  (required)
     * @return AuthenticationExecutionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationExecutionRepresentation adminRealmsRealmAuthenticationExecutionsExecutionIdGet(String realm, String executionId) throws ApiException {
        ApiResponse<AuthenticationExecutionRepresentation> localVarResp = adminRealmsRealmAuthenticationExecutionsExecutionIdGetWithHttpInfo(realm, executionId);
        return localVarResp.getData();
    }

    /**
     * Get Single Execution
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId  (required)
     * @return ApiResponse&lt;AuthenticationExecutionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationExecutionRepresentation> adminRealmsRealmAuthenticationExecutionsExecutionIdGetWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdGetValidateBeforeCall(realm, executionId, null);
        Type localVarReturnType = new TypeToken<AuthenticationExecutionRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Single Execution (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdGetAsync(String realm, String executionId, final ApiCallback<AuthenticationExecutionRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdGetValidateBeforeCall(realm, executionId, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationExecutionRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions/{executionId}/lower-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostCall(realm, executionId, _callback);

    }

    /**
     * Lower execution&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost(String realm, String executionId) throws ApiException {
        adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(realm, executionId);
    }

    /**
     * Lower execution&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lower execution&#39;s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPostValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions/{executionId}/raise-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostValidateBeforeCall(String realm, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostCall(realm, executionId, _callback);

    }

    /**
     * Raise execution&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost(String realm, String executionId) throws ApiException {
        adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(realm, executionId);
    }

    /**
     * Raise execution&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostWithHttpInfo(String realm, String executionId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostValidateBeforeCall(realm, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Raise execution&#39;s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param executionId Execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostAsync(String realm, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPostValidateBeforeCall(realm, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationExecutionsPost
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsPostCall(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationExecutionRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/executions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationExecutionsPostValidateBeforeCall(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationExecutionsPost(Async)");
        }

        return adminRealmsRealmAuthenticationExecutionsPostCall(realm, authenticationExecutionRepresentation, _callback);

    }

    /**
     * Add new authentication execution
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationExecutionsPost(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationExecutionsPostWithHttpInfo(realm, authenticationExecutionRepresentation);
    }

    /**
     * Add new authentication execution
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationExecutionsPostWithHttpInfo(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsPostValidateBeforeCall(realm, authenticationExecutionRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new authentication execution (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationExecutionRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationExecutionsPostAsync(String realm, AuthenticationExecutionRepresentation authenticationExecutionRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationExecutionsPostValidateBeforeCall(realm, authenticationExecutionRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost
     * @param realm realm name (not id!) (required)
     * @param flowAlias name of the existing authentication flow (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostCall(String realm, String flowAlias, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{flowAlias}/copy"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostValidateBeforeCall(String realm, String flowAlias, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostCall(realm, flowAlias, requestBody, _callback);

    }

    /**
     * Copy existing authentication flow under a new name The new name is given as &#39;newName&#39; attribute of the passed JSON object
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias name of the existing authentication flow (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost(String realm, String flowAlias, Map<String, String> requestBody) throws ApiException {
        adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(realm, flowAlias, requestBody);
    }

    /**
     * Copy existing authentication flow under a new name The new name is given as &#39;newName&#39; attribute of the passed JSON object
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias name of the existing authentication flow (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostWithHttpInfo(String realm, String flowAlias, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostValidateBeforeCall(realm, flowAlias, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copy existing authentication flow under a new name The new name is given as &#39;newName&#39; attribute of the passed JSON object (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias name of the existing authentication flow (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostAsync(String realm, String flowAlias, Map<String, String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasCopyPostValidateBeforeCall(realm, flowAlias, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/execution"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostValidateBeforeCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostCall(realm, flowAlias, requestBody, _callback);

    }

    /**
     * Add new authentication execution to a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(realm, flowAlias, requestBody);
    }

    /**
     * Add new authentication execution to a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostWithHttpInfo(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostValidateBeforeCall(realm, flowAlias, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new authentication execution to a flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent flow (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostAsync(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPostValidateBeforeCall(realm, flowAlias, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/flow"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostValidateBeforeCall(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostCall(realm, flowAlias, requestBody, _callback);

    }

    /**
     * Add new flow with new execution to existing flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(realm, flowAlias, requestBody);
    }

    /**
     * Add new flow with new execution to existing flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostWithHttpInfo(String realm, String flowAlias, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostValidateBeforeCall(realm, flowAlias, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new flow with new execution to existing flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Alias of parent authentication flow (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostAsync(String realm, String flowAlias, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPostValidateBeforeCall(realm, flowAlias, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetCall(String realm, String flowAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{flowAlias}/executions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetValidateBeforeCall(String realm, String flowAlias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetCall(realm, flowAlias, _callback);

    }

    /**
     * Get authentication executions for a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @return List&lt;AuthenticationExecutionInfoRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AuthenticationExecutionInfoRepresentation> adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet(String realm, String flowAlias) throws ApiException {
        ApiResponse<List<AuthenticationExecutionInfoRepresentation>> localVarResp = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(realm, flowAlias);
        return localVarResp.getData();
    }

    /**
     * Get authentication executions for a flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @return ApiResponse&lt;List&lt;AuthenticationExecutionInfoRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AuthenticationExecutionInfoRepresentation>> adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetWithHttpInfo(String realm, String flowAlias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetValidateBeforeCall(realm, flowAlias, null);
        Type localVarReturnType = new TypeToken<List<AuthenticationExecutionInfoRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authentication executions for a flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetAsync(String realm, String flowAlias, final ApiCallback<List<AuthenticationExecutionInfoRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGetValidateBeforeCall(realm, flowAlias, _callback);
        Type localVarReturnType = new TypeToken<List<AuthenticationExecutionInfoRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutCall(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationExecutionInfoRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{flowAlias}/executions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "flowAlias" + "}", localVarApiClient.escapeString(flowAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutValidateBeforeCall(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut(Async)");
        }

        // verify the required parameter 'flowAlias' is set
        if (flowAlias == null) {
            throw new ApiException("Missing the required parameter 'flowAlias' when calling adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutCall(realm, flowAlias, authenticationExecutionInfoRepresentation, _callback);

    }

    /**
     * Update authentication executions of a Flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(realm, flowAlias, authenticationExecutionInfoRepresentation);
    }

    /**
     * Update authentication executions of a Flow
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutWithHttpInfo(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutValidateBeforeCall(realm, flowAlias, authenticationExecutionInfoRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update authentication executions of a Flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param flowAlias Flow alias (required)
     * @param authenticationExecutionInfoRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutAsync(String realm, String flowAlias, AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPutValidateBeforeCall(realm, flowAlias, authenticationExecutionInfoRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsGet(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsGetCall(realm, _callback);

    }

    /**
     * Get authentication flows Returns a stream of authentication flows.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;AuthenticationFlowRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AuthenticationFlowRepresentation> adminRealmsRealmAuthenticationFlowsGet(String realm) throws ApiException {
        ApiResponse<List<AuthenticationFlowRepresentation>> localVarResp = adminRealmsRealmAuthenticationFlowsGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get authentication flows Returns a stream of authentication flows.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;AuthenticationFlowRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AuthenticationFlowRepresentation>> adminRealmsRealmAuthenticationFlowsGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<AuthenticationFlowRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authentication flows Returns a stream of authentication flows. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsGetAsync(String realm, final ApiCallback<List<AuthenticationFlowRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<AuthenticationFlowRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsIdDelete
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsIdDeleteCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsIdDeleteValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationFlowsIdDelete(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsIdDeleteCall(realm, id, _callback);

    }

    /**
     * Delete an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsIdDelete(String realm, String id) throws ApiException {
        adminRealmsRealmAuthenticationFlowsIdDeleteWithHttpInfo(realm, id);
    }

    /**
     * Delete an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsIdDeleteWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsIdDeleteValidateBeforeCall(realm, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an authentication flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsIdDeleteAsync(String realm, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsIdDeleteValidateBeforeCall(realm, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsIdGet
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsIdGetCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsIdGetValidateBeforeCall(String realm, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationFlowsIdGet(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsIdGetCall(realm, id, _callback);

    }

    /**
     * Get authentication flow for id
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @return AuthenticationFlowRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationFlowRepresentation adminRealmsRealmAuthenticationFlowsIdGet(String realm, String id) throws ApiException {
        ApiResponse<AuthenticationFlowRepresentation> localVarResp = adminRealmsRealmAuthenticationFlowsIdGetWithHttpInfo(realm, id);
        return localVarResp.getData();
    }

    /**
     * Get authentication flow for id
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @return ApiResponse&lt;AuthenticationFlowRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationFlowRepresentation> adminRealmsRealmAuthenticationFlowsIdGetWithHttpInfo(String realm, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsIdGetValidateBeforeCall(realm, id, null);
        Type localVarReturnType = new TypeToken<AuthenticationFlowRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authentication flow for id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id Flow id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsIdGetAsync(String realm, String id, final ApiCallback<AuthenticationFlowRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsIdGetValidateBeforeCall(realm, id, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationFlowRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsIdPut
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param authenticationFlowRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsIdPutCall(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationFlowRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsIdPutValidateBeforeCall(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmAuthenticationFlowsIdPut(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsIdPutCall(realm, id, authenticationFlowRepresentation, _callback);

    }

    /**
     * Update an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param authenticationFlowRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsIdPut(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationFlowsIdPutWithHttpInfo(realm, id, authenticationFlowRepresentation);
    }

    /**
     * Update an authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param authenticationFlowRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsIdPutWithHttpInfo(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsIdPutValidateBeforeCall(realm, id, authenticationFlowRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an authentication flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param id  (required)
     * @param authenticationFlowRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsIdPutAsync(String realm, String id, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsIdPutValidateBeforeCall(realm, id, authenticationFlowRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFlowsPost
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsPostCall(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationFlowRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/flows"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFlowsPostValidateBeforeCall(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFlowsPost(Async)");
        }

        return adminRealmsRealmAuthenticationFlowsPostCall(realm, authenticationFlowRepresentation, _callback);

    }

    /**
     * Create a new authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationFlowsPost(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationFlowsPostWithHttpInfo(realm, authenticationFlowRepresentation);
    }

    /**
     * Create a new authentication flow
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationFlowsPostWithHttpInfo(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsPostValidateBeforeCall(realm, authenticationFlowRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new authentication flow (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param authenticationFlowRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFlowsPostAsync(String realm, AuthenticationFlowRepresentation authenticationFlowRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFlowsPostValidateBeforeCall(realm, authenticationFlowRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFormActionProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFormActionProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/form-action-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFormActionProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFormActionProvidersGet(Async)");
        }

        return adminRealmsRealmAuthenticationFormActionProvidersGetCall(realm, _callback);

    }

    /**
     * Get form action providers Returns a stream of form action providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> adminRealmsRealmAuthenticationFormActionProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = adminRealmsRealmAuthenticationFormActionProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get form action providers Returns a stream of form action providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> adminRealmsRealmAuthenticationFormActionProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFormActionProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get form action providers Returns a stream of form action providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFormActionProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFormActionProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationFormProvidersGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFormProvidersGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/form-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationFormProvidersGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationFormProvidersGet(Async)");
        }

        return adminRealmsRealmAuthenticationFormProvidersGetCall(realm, _callback);

    }

    /**
     * Get form providers Returns a stream of form providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> adminRealmsRealmAuthenticationFormProvidersGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = adminRealmsRealmAuthenticationFormProvidersGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get form providers Returns a stream of form providers.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> adminRealmsRealmAuthenticationFormProvidersGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFormProvidersGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get form providers Returns a stream of form providers. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationFormProvidersGetAsync(String realm, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationFormProvidersGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationPerClientConfigDescriptionGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationPerClientConfigDescriptionGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/per-client-config-description"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationPerClientConfigDescriptionGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationPerClientConfigDescriptionGet(Async)");
        }

        return adminRealmsRealmAuthenticationPerClientConfigDescriptionGetCall(realm, _callback);

    }

    /**
     * Get configuration descriptions for all clients
     * 
     * @param realm realm name (not id!) (required)
     * @return Map&lt;String, List&lt;ConfigPropertyRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<ConfigPropertyRepresentation>> adminRealmsRealmAuthenticationPerClientConfigDescriptionGet(String realm) throws ApiException {
        ApiResponse<Map<String, List<ConfigPropertyRepresentation>>> localVarResp = adminRealmsRealmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get configuration descriptions for all clients
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;Map&lt;String, List&lt;ConfigPropertyRepresentation&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<ConfigPropertyRepresentation>>> adminRealmsRealmAuthenticationPerClientConfigDescriptionGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationPerClientConfigDescriptionGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<Map<String, List<ConfigPropertyRepresentation>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configuration descriptions for all clients (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationPerClientConfigDescriptionGetAsync(String realm, final ApiCallback<Map<String, List<ConfigPropertyRepresentation>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationPerClientConfigDescriptionGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<ConfigPropertyRepresentation>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRegisterRequiredActionPost
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRegisterRequiredActionPostCall(String realm, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/register-required-action"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRegisterRequiredActionPostValidateBeforeCall(String realm, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRegisterRequiredActionPost(Async)");
        }

        return adminRealmsRealmAuthenticationRegisterRequiredActionPostCall(realm, requestBody, _callback);

    }

    /**
     * Register a new required actions
     * 
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRegisterRequiredActionPost(String realm, Map<String, String> requestBody) throws ApiException {
        adminRealmsRealmAuthenticationRegisterRequiredActionPostWithHttpInfo(realm, requestBody);
    }

    /**
     * Register a new required actions
     * 
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRegisterRequiredActionPostWithHttpInfo(String realm, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRegisterRequiredActionPostValidateBeforeCall(realm, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a new required actions (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRegisterRequiredActionPostAsync(String realm, Map<String, String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRegisterRequiredActionPostValidateBeforeCall(realm, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasConfigDelete
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}/config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigDelete(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteCall(realm, alias, _callback);

    }

    /**
     * Delete RequiredAction configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRequiredActionsAliasConfigDelete(String realm, String alias) throws ApiException {
        adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteWithHttpInfo(realm, alias);
    }

    /**
     * Delete RequiredAction configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete RequiredAction configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigDeleteValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGet
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}/config-description"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGet(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetCall(realm, alias, _callback);

    }

    /**
     * Get RequiredAction provider configuration description
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return RequiredActionConfigInfoRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RequiredActionConfigInfoRepresentation adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGet(String realm, String alias) throws ApiException {
        ApiResponse<RequiredActionConfigInfoRepresentation> localVarResp = adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get RequiredAction provider configuration description
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;RequiredActionConfigInfoRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequiredActionConfigInfoRepresentation> adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<RequiredActionConfigInfoRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get RequiredAction provider configuration description (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetAsync(String realm, String alias, final ApiCallback<RequiredActionConfigInfoRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<RequiredActionConfigInfoRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasConfigGet
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}/config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigGet(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetCall(realm, alias, _callback);

    }

    /**
     * Get RequiredAction configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return RequiredActionConfigRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RequiredActionConfigRepresentation adminRealmsRealmAuthenticationRequiredActionsAliasConfigGet(String realm, String alias) throws ApiException {
        ApiResponse<RequiredActionConfigRepresentation> localVarResp = adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get RequiredAction configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;RequiredActionConfigRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequiredActionConfigRepresentation> adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<RequiredActionConfigRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get RequiredAction configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetAsync(String realm, String alias, final ApiCallback<RequiredActionConfigRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<RequiredActionConfigRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasConfigPut
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionConfigRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutCall(String realm, String alias, RequiredActionConfigRepresentation requiredActionConfigRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requiredActionConfigRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}/config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutValidateBeforeCall(String realm, String alias, RequiredActionConfigRepresentation requiredActionConfigRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasConfigPut(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutCall(realm, alias, requiredActionConfigRepresentation, _callback);

    }

    /**
     * Update RequiredAction configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionConfigRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRequiredActionsAliasConfigPut(String realm, String alias, RequiredActionConfigRepresentation requiredActionConfigRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutWithHttpInfo(realm, alias, requiredActionConfigRepresentation);
    }

    /**
     * Update RequiredAction configuration
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionConfigRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutWithHttpInfo(String realm, String alias, RequiredActionConfigRepresentation requiredActionConfigRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutValidateBeforeCall(realm, alias, requiredActionConfigRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update RequiredAction configuration (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionConfigRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutAsync(String realm, String alias, RequiredActionConfigRepresentation requiredActionConfigRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasConfigPutValidateBeforeCall(realm, alias, requiredActionConfigRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasDelete
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasDeleteCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasDeleteValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasDelete(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasDeleteCall(realm, alias, _callback);

    }

    /**
     * Delete required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRequiredActionsAliasDelete(String realm, String alias) throws ApiException {
        adminRealmsRealmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(realm, alias);
    }

    /**
     * Delete required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRequiredActionsAliasDeleteWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasDeleteValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete required action (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasDeleteAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasDeleteValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasGet
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasGet(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasGetCall(realm, alias, _callback);

    }

    /**
     * Get required action for alias
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return RequiredActionProviderRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RequiredActionProviderRepresentation adminRealmsRealmAuthenticationRequiredActionsAliasGet(String realm, String alias) throws ApiException {
        ApiResponse<RequiredActionProviderRepresentation> localVarResp = adminRealmsRealmAuthenticationRequiredActionsAliasGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get required action for alias
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;RequiredActionProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequiredActionProviderRepresentation> adminRealmsRealmAuthenticationRequiredActionsAliasGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<RequiredActionProviderRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get required action for alias (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasGetAsync(String realm, String alias, final ApiCallback<RequiredActionProviderRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<RequiredActionProviderRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}/lower-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostCall(realm, alias, _callback);

    }

    /**
     * Lower required action&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost(String realm, String alias) throws ApiException {
        adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(realm, alias);
    }

    /**
     * Lower required action&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lower required action&#39;s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPostValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasPut
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasPutCall(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requiredActionProviderRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasPutValidateBeforeCall(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasPut(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasPutCall(realm, alias, requiredActionProviderRepresentation, _callback);

    }

    /**
     * Update required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRequiredActionsAliasPut(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation) throws ApiException {
        adminRealmsRealmAuthenticationRequiredActionsAliasPutWithHttpInfo(realm, alias, requiredActionProviderRepresentation);
    }

    /**
     * Update required action
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRequiredActionsAliasPutWithHttpInfo(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasPutValidateBeforeCall(realm, alias, requiredActionProviderRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update required action (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param requiredActionProviderRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasPutAsync(String realm, String alias, RequiredActionProviderRepresentation requiredActionProviderRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasPutValidateBeforeCall(realm, alias, requiredActionProviderRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions/{alias}/raise-priority"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostCall(realm, alias, _callback);

    }

    /**
     * Raise required action&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost(String realm, String alias) throws ApiException {
        adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(realm, alias);
    }

    /**
     * Raise required action&#39;s priority
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Raise required action&#39;s priority (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias Alias of required action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPostValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationRequiredActionsGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/required-actions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationRequiredActionsGet(Async)");
        }

        return adminRealmsRealmAuthenticationRequiredActionsGetCall(realm, _callback);

    }

    /**
     * Get required actions Returns a stream of required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;RequiredActionProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RequiredActionProviderRepresentation> adminRealmsRealmAuthenticationRequiredActionsGet(String realm) throws ApiException {
        ApiResponse<List<RequiredActionProviderRepresentation>> localVarResp = adminRealmsRealmAuthenticationRequiredActionsGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get required actions Returns a stream of required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RequiredActionProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RequiredActionProviderRepresentation>> adminRealmsRealmAuthenticationRequiredActionsGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<RequiredActionProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get required actions Returns a stream of required actions. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationRequiredActionsGetAsync(String realm, final ApiCallback<List<RequiredActionProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationRequiredActionsGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<RequiredActionProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmAuthenticationUnregisteredRequiredActionsGet
     * @param realm realm name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetCall(String realm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/authentication/unregistered-required-actions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetValidateBeforeCall(String realm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmAuthenticationUnregisteredRequiredActionsGet(Async)");
        }

        return adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetCall(realm, _callback);

    }

    /**
     * Get unregistered required actions Returns a stream of unregistered required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return List&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, String>> adminRealmsRealmAuthenticationUnregisteredRequiredActionsGet(String realm) throws ApiException {
        ApiResponse<List<Map<String, String>>> localVarResp = adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(realm);
        return localVarResp.getData();
    }

    /**
     * Get unregistered required actions Returns a stream of unregistered required actions.
     * 
     * @param realm realm name (not id!) (required)
     * @return ApiResponse&lt;List&lt;Map&lt;String, String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, String>>> adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetWithHttpInfo(String realm) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetValidateBeforeCall(realm, null);
        Type localVarReturnType = new TypeToken<List<Map<String, String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get unregistered required actions Returns a stream of unregistered required actions. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetAsync(String realm, final ApiCallback<List<Map<String, String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmAuthenticationUnregisteredRequiredActionsGetValidateBeforeCall(realm, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
