/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import com.google.gson.reflect.TypeToken;
import in.docq.keycloak.rest.client.*;
import in.docq.keycloak.rest.client.model.IdentityProviderMapperRepresentation;
import in.docq.keycloak.rest.client.model.IdentityProviderMapperTypeRepresentation;
import in.docq.keycloak.rest.client.model.IdentityProviderRepresentation;
import in.docq.keycloak.rest.client.model.ManagementPermissionReference;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentityProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentityProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmIdentityProviderImportConfigPost
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderImportConfigPostCall(String realm, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/import-config"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderImportConfigPostValidateBeforeCall(String realm, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderImportConfigPost(Async)");
        }

        return adminRealmsRealmIdentityProviderImportConfigPostCall(realm, requestBody, _callback);

    }

    /**
     * Import identity provider from JSON body
     * Import identity provider from uploaded JSON file
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> adminRealmsRealmIdentityProviderImportConfigPost(String realm, Map<String, Object> requestBody) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = adminRealmsRealmIdentityProviderImportConfigPostWithHttpInfo(realm, requestBody);
        return localVarResp.getData();
    }

    /**
     * Import identity provider from JSON body
     * Import identity provider from uploaded JSON file
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> adminRealmsRealmIdentityProviderImportConfigPostWithHttpInfo(String realm, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderImportConfigPostValidateBeforeCall(realm, requestBody, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import identity provider from JSON body (asynchronously)
     * Import identity provider from uploaded JSON file
     * @param realm realm name (not id!) (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderImportConfigPostAsync(String realm, Map<String, Object> requestBody, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderImportConfigPostValidateBeforeCall(realm, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasDelete
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasDeleteCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasDeleteValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasDelete(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasDeleteCall(realm, alias, _callback);

    }

    /**
     * Delete the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesAliasDelete(String realm, String alias) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesAliasDeleteWithHttpInfo(realm, alias);
    }

    /**
     * Delete the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesAliasDeleteWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasDeleteValidateBeforeCall(realm, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasDeleteAsync(String realm, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasDeleteValidateBeforeCall(realm, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasExportGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasExportGetCall(String realm, String alias, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/export"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasExportGetValidateBeforeCall(String realm, String alias, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasExportGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasExportGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasExportGetCall(realm, alias, format, _callback);

    }

    /**
     * Export public broker configuration for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesAliasExportGet(String realm, String alias, String format) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesAliasExportGetWithHttpInfo(realm, alias, format);
    }

    /**
     * Export public broker configuration for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesAliasExportGetWithHttpInfo(String realm, String alias, String format) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasExportGetValidateBeforeCall(realm, alias, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export public broker configuration for identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param format Format to use (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasExportGetAsync(String realm, String alias, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasExportGetValidateBeforeCall(realm, alias, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasGetCall(realm, alias, _callback);

    }

    /**
     * Get the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return IdentityProviderRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IdentityProviderRepresentation adminRealmsRealmIdentityProviderInstancesAliasGet(String realm, String alias) throws ApiException {
        ApiResponse<IdentityProviderRepresentation> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;IdentityProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentityProviderRepresentation> adminRealmsRealmIdentityProviderInstancesAliasGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<IdentityProviderRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasGetAsync(String realm, String alias, final ApiCallback<IdentityProviderRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetCall(realm, alias, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(String realm, String alias) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetAsync(String realm, String alias, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutCall(String realm, String alias, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutValidateBeforeCall(String realm, String alias, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutCall(realm, alias, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (optional)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(String realm, String alias, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo(realm, alias, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (optional)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo(String realm, String alias, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutValidateBeforeCall(realm, alias, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutAsync(String realm, String alias, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutValidateBeforeCall(realm, alias, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetCall(realm, alias, _callback);

    }

    /**
     * Get mapper types for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return Map&lt;String, IdentityProviderMapperTypeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, IdentityProviderMapperTypeRepresentation> adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(String realm, String alias) throws ApiException {
        ApiResponse<Map<String, IdentityProviderMapperTypeRepresentation>> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get mapper types for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;Map&lt;String, IdentityProviderMapperTypeRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, IdentityProviderMapperTypeRepresentation>> adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<Map<String, IdentityProviderMapperTypeRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper types for identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetAsync(String realm, String alias, final ApiCallback<Map<String, IdentityProviderMapperTypeRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<Map<String, IdentityProviderMapperTypeRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasMappersGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasMappersGetCall(realm, alias, _callback);

    }

    /**
     * Get mappers for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return List&lt;IdentityProviderMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentityProviderMapperRepresentation> adminRealmsRealmIdentityProviderInstancesAliasMappersGet(String realm, String alias) throws ApiException {
        ApiResponse<List<IdentityProviderMapperRepresentation>> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasMappersGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Get mappers for identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;List&lt;IdentityProviderMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentityProviderMapperRepresentation>> adminRealmsRealmIdentityProviderInstancesAliasMappersGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<List<IdentityProviderMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers for identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersGetAsync(String realm, String alias, final ApiCallback<List<IdentityProviderMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProviderMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteValidateBeforeCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteCall(realm, alias, id, _callback);

    }

    /**
     * Delete a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(String realm, String alias, String id) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo(realm, alias, id);
    }

    /**
     * Delete a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo(String realm, String alias, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteValidateBeforeCall(realm, alias, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a mapper for the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteAsync(String realm, String alias, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteValidateBeforeCall(realm, alias, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetValidateBeforeCall(String realm, String alias, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetCall(realm, alias, id, _callback);

    }

    /**
     * Get mapper by id for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id  (required)
     * @return IdentityProviderMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IdentityProviderMapperRepresentation adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(String realm, String alias, String id) throws ApiException {
        ApiResponse<IdentityProviderMapperRepresentation> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo(realm, alias, id);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id  (required)
     * @return ApiResponse&lt;IdentityProviderMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentityProviderMapperRepresentation> adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo(String realm, String alias, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetValidateBeforeCall(realm, alias, id, null);
        Type localVarReturnType = new TypeToken<IdentityProviderMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id for the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetAsync(String realm, String alias, String id, final ApiCallback<IdentityProviderMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetValidateBeforeCall(realm, alias, id, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutCall(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutValidateBeforeCall(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutCall(realm, alias, id, identityProviderMapperRepresentation, _callback);

    }

    /**
     * Update a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo(realm, alias, id, identityProviderMapperRepresentation);
    }

    /**
     * Update a mapper for the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutValidateBeforeCall(realm, alias, id, identityProviderMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a mapper for the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param id Mapper id (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutAsync(String realm, String alias, String id, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutValidateBeforeCall(realm, alias, id, identityProviderMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasMappersPost
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersPostCall(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersPostValidateBeforeCall(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersPost(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasMappersPost(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasMappersPostCall(realm, alias, identityProviderMapperRepresentation, _callback);

    }

    /**
     * Add a mapper to identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesAliasMappersPost(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesAliasMappersPostWithHttpInfo(realm, alias, identityProviderMapperRepresentation);
    }

    /**
     * Add a mapper to identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesAliasMappersPostWithHttpInfo(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersPostValidateBeforeCall(realm, alias, identityProviderMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a mapper to identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasMappersPostAsync(String realm, String alias, IdentityProviderMapperRepresentation identityProviderMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasMappersPostValidateBeforeCall(realm, alias, identityProviderMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasPut
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasPutCall(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasPutValidateBeforeCall(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasPut(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasPut(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasPutCall(realm, alias, identityProviderRepresentation, _callback);

    }

    /**
     * Update the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesAliasPut(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesAliasPutWithHttpInfo(realm, alias, identityProviderRepresentation);
    }

    /**
     * Update the identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesAliasPutWithHttpInfo(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasPutValidateBeforeCall(realm, alias, identityProviderRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param identityProviderRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasPutAsync(String realm, String alias, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasPutValidateBeforeCall(realm, alias, identityProviderRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetValidateBeforeCall(String realm, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetCall(realm, alias, _callback);

    }

    /**
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not.
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(String realm, String alias) throws ApiException {
        ApiResponse<Boolean> localVarResp = adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetWithHttpInfo(realm, alias);
        return localVarResp.getData();
    }

    /**
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not.
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetWithHttpInfo(String realm, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetValidateBeforeCall(realm, alias, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetAsync(String realm, String alias, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetValidateBeforeCall(realm, alias, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesGet
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param realmOnly Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesGetCall(String realm, Boolean briefRepresentation, Integer first, Integer max, Boolean realmOnly, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (realmOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("realmOnly", realmOnly));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesGetValidateBeforeCall(String realm, Boolean briefRepresentation, Integer first, Integer max, Boolean realmOnly, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesGet(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesGetCall(realm, briefRepresentation, first, max, realmOnly, search, _callback);

    }

    /**
     * List identity providers
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param realmOnly Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @return List&lt;IdentityProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentityProviderRepresentation> adminRealmsRealmIdentityProviderInstancesGet(String realm, Boolean briefRepresentation, Integer first, Integer max, Boolean realmOnly, String search) throws ApiException {
        ApiResponse<List<IdentityProviderRepresentation>> localVarResp = adminRealmsRealmIdentityProviderInstancesGetWithHttpInfo(realm, briefRepresentation, first, max, realmOnly, search);
        return localVarResp.getData();
    }

    /**
     * List identity providers
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param realmOnly Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @return ApiResponse&lt;List&lt;IdentityProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentityProviderRepresentation>> adminRealmsRealmIdentityProviderInstancesGetWithHttpInfo(String realm, Boolean briefRepresentation, Integer first, Integer max, Boolean realmOnly, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesGetValidateBeforeCall(realm, briefRepresentation, first, max, realmOnly, search, null);
        Type localVarReturnType = new TypeToken<List<IdentityProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List identity providers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param realmOnly Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesGetAsync(String realm, Boolean briefRepresentation, Integer first, Integer max, Boolean realmOnly, String search, final ApiCallback<List<IdentityProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesGetValidateBeforeCall(realm, briefRepresentation, first, max, realmOnly, search, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderInstancesPost
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesPostCall(String realm, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityProviderRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/instances"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderInstancesPostValidateBeforeCall(String realm, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderInstancesPost(Async)");
        }

        return adminRealmsRealmIdentityProviderInstancesPostCall(realm, identityProviderRepresentation, _callback);

    }

    /**
     * Create a new identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmIdentityProviderInstancesPost(String realm, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        adminRealmsRealmIdentityProviderInstancesPostWithHttpInfo(realm, identityProviderRepresentation);
    }

    /**
     * Create a new identity provider
     * 
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmIdentityProviderInstancesPostWithHttpInfo(String realm, IdentityProviderRepresentation identityProviderRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesPostValidateBeforeCall(realm, identityProviderRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new identity provider (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param identityProviderRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderInstancesPostAsync(String realm, IdentityProviderRepresentation identityProviderRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderInstancesPostValidateBeforeCall(realm, identityProviderRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmIdentityProviderProvidersProviderIdGet
     * @param realm realm name (not id!) (required)
     * @param providerId The provider id to get the factory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderProvidersProviderIdGetCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/identity-provider/providers/{provider_id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "provider_id" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmIdentityProviderProvidersProviderIdGetValidateBeforeCall(String realm, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmIdentityProviderProvidersProviderIdGet(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling adminRealmsRealmIdentityProviderProvidersProviderIdGet(Async)");
        }

        return adminRealmsRealmIdentityProviderProvidersProviderIdGetCall(realm, providerId, _callback);

    }

    /**
     * Get the identity provider factory for that provider id
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId The provider id to get the factory (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object adminRealmsRealmIdentityProviderProvidersProviderIdGet(String realm, String providerId) throws ApiException {
        ApiResponse<Object> localVarResp = adminRealmsRealmIdentityProviderProvidersProviderIdGetWithHttpInfo(realm, providerId);
        return localVarResp.getData();
    }

    /**
     * Get the identity provider factory for that provider id
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId The provider id to get the factory (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminRealmsRealmIdentityProviderProvidersProviderIdGetWithHttpInfo(String realm, String providerId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderProvidersProviderIdGetValidateBeforeCall(realm, providerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the identity provider factory for that provider id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param providerId The provider id to get the factory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmIdentityProviderProvidersProviderIdGetAsync(String realm, String providerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmIdentityProviderProvidersProviderIdGetValidateBeforeCall(realm, providerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
