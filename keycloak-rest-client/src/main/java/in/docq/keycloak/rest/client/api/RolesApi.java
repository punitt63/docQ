/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.GroupRepresentation;
import in.docq.keycloak.rest.client.model.ManagementPermissionReference;
import in.docq.keycloak.rest.client.model.RoleRepresentation;
import in.docq.keycloak.rest.client.model.UserRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesGetCall(String realm, String clientUuid, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesGetValidateBeforeCall(String realm, String clientUuid, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesGetCall(realm, clientUuid, briefRepresentation, first, max, search, _callback);

    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidRolesGet(String realm, String clientUuid, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidRolesGetWithHttpInfo(realm, clientUuid, briefRepresentation, first, max, search);
        return localVarResp.getData();
    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidRolesGetWithHttpInfo(String realm, String clientUuid, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesGetValidateBeforeCall(realm, clientUuid, briefRepresentation, first, max, search, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesGetAsync(String realm, String clientUuid, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesGetValidateBeforeCall(realm, clientUuid, briefRepresentation, first, max, search, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesPostCall(String realm, String clientUuid, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesPostValidateBeforeCall(String realm, String clientUuid, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesPostCall(realm, clientUuid, roleRepresentation, _callback);

    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidRolesPost(String realm, String clientUuid, RoleRepresentation roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidRolesPostWithHttpInfo(realm, clientUuid, roleRepresentation);
    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidRolesPostWithHttpInfo(String realm, String clientUuid, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesPostValidateBeforeCall(realm, clientUuid, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new role for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesPostAsync(String realm, String clientUuid, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesPostValidateBeforeCall(realm, clientUuid, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/clients/{client-uuid}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Get client-level roles for the client that are in the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(String realm, String clientUuid, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(realm, clientUuid, roleName);
        return localVarResp.getData();
    }

    /**
     * Get client-level roles for the client that are in the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetValidateBeforeCall(realm, clientUuid, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client-level roles for the client that are in the role&#39;s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetAsync(String realm, String clientUuid, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetValidateBeforeCall(realm, clientUuid, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteCall(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteValidateBeforeCall(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteCall(realm, clientUuid, roleName, roleRepresentation, _callback);

    }

    /**
     * Remove roles from the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteWithHttpInfo(realm, clientUuid, roleName, roleRepresentation);
    }

    /**
     * Remove roles from the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteWithHttpInfo(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteValidateBeforeCall(realm, clientUuid, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove roles from the role&#39;s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteAsync(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteValidateBeforeCall(realm, clientUuid, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(String realm, String clientUuid, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetWithHttpInfo(realm, clientUuid, roleName);
        return localVarResp.getData();
    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetValidateBeforeCall(realm, clientUuid, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get composites of the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetAsync(String realm, String clientUuid, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetValidateBeforeCall(realm, clientUuid, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostCall(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostValidateBeforeCall(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostCall(realm, clientUuid, roleName, roleRepresentation, _callback);

    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostWithHttpInfo(realm, clientUuid, roleName, roleRepresentation);
    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostWithHttpInfo(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostValidateBeforeCall(realm, clientUuid, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a composite to the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostAsync(String realm, String clientUuid, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostValidateBeforeCall(realm, clientUuid, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Get realm-level roles of the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(String realm, String clientUuid, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetWithHttpInfo(realm, clientUuid, roleName);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles of the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, clientUuid, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles of the role&#39;s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetAsync(String realm, String clientUuid, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, clientUuid, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameDeleteCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameDeleteValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameDeleteCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidRolesRoleNameDelete(String realm, String clientUuid, String roleName) throws ApiException {
        adminRealmsRealmClientsClientUuidRolesRoleNameDeleteWithHttpInfo(realm, clientUuid, roleName);
    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidRolesRoleNameDeleteWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameDeleteValidateBeforeCall(realm, clientUuid, roleName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameDeleteAsync(String realm, String clientUuid, String roleName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameDeleteValidateBeforeCall(realm, clientUuid, roleName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameGetCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameGetValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameGetCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return RoleRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RoleRepresentation adminRealmsRealmClientsClientUuidRolesRoleNameGet(String realm, String clientUuid, String roleName) throws ApiException {
        ApiResponse<RoleRepresentation> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameGetWithHttpInfo(realm, clientUuid, roleName);
        return localVarResp.getData();
    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleRepresentation> adminRealmsRealmClientsClientUuidRolesRoleNameGetWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameGetValidateBeforeCall(realm, clientUuid, roleName, null);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameGetAsync(String realm, String clientUuid, String roleName, final ApiCallback<RoleRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameGetValidateBeforeCall(realm, clientUuid, roleName, _callback);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetCall(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetValidateBeforeCall(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetCall(realm, clientUuid, roleName, briefRepresentation, first, max, _callback);

    }

    /**
     * Returns a stream of groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetWithHttpInfo(realm, clientUuid, roleName, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Returns a stream of groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetWithHttpInfo(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetValidateBeforeCall(realm, clientUuid, roleName, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a stream of groups that have the specified role name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetAsync(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetValidateBeforeCall(realm, clientUuid, roleName, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(String realm, String clientUuid, String roleName) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetWithHttpInfo(realm, clientUuid, roleName);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, clientUuid, roleName, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetAsync(String realm, String clientUuid, String roleName, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, clientUuid, roleName, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutCall(String realm, String clientUuid, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutValidateBeforeCall(String realm, String clientUuid, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutCall(realm, clientUuid, roleName, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(String realm, String clientUuid, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutWithHttpInfo(realm, clientUuid, roleName, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutWithHttpInfo(String realm, String clientUuid, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, clientUuid, roleName, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutAsync(String realm, String clientUuid, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, clientUuid, roleName, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNamePut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNamePutCall(String realm, String clientUuid, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNamePutValidateBeforeCall(String realm, String clientUuid, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNamePutCall(realm, clientUuid, roleName, roleRepresentation, _callback);

    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidRolesRoleNamePut(String realm, String clientUuid, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidRolesRoleNamePutWithHttpInfo(realm, clientUuid, roleName, roleRepresentation);
    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidRolesRoleNamePutWithHttpInfo(String realm, String clientUuid, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNamePutValidateBeforeCall(realm, clientUuid, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNamePutAsync(String realm, String clientUuid, String roleName, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNamePutValidateBeforeCall(realm, clientUuid, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetCall(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/users"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetValidateBeforeCall(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetCall(realm, clientUuid, roleName, briefRepresentation, first, max, _callback);

    }

    /**
     * Returns a stream of users that have the specified role name.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return List&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserRepresentation> adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetWithHttpInfo(realm, clientUuid, roleName, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Returns a stream of users that have the specified role name.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return ApiResponse&lt;List&lt;UserRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserRepresentation>> adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetWithHttpInfo(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetValidateBeforeCall(realm, clientUuid, roleName, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a stream of users that have the specified role name. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetAsync(String realm, String clientUuid, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<UserRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetValidateBeforeCall(realm, clientUuid, roleName, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesGet
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesGetCall(String realm, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesGetValidateBeforeCall(String realm, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesGet(Async)");
        }

        return adminRealmsRealmRolesGetCall(realm, briefRepresentation, first, max, search, _callback);

    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmRolesGet(String realm, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmRolesGetWithHttpInfo(realm, briefRepresentation, first, max, search);
        return localVarResp.getData();
    }

    /**
     * Get all roles for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmRolesGetWithHttpInfo(String realm, Boolean briefRepresentation, Integer first, Integer max, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesGetValidateBeforeCall(realm, briefRepresentation, first, max, search, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param first  (optional)
     * @param max  (optional)
     * @param search  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesGetAsync(String realm, Boolean briefRepresentation, Integer first, Integer max, String search, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesGetValidateBeforeCall(realm, briefRepresentation, first, max, search, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesPost
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesPostCall(String realm, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesPostValidateBeforeCall(String realm, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesPost(Async)");
        }

        return adminRealmsRealmRolesPostCall(realm, roleRepresentation, _callback);

    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmRolesPost(String realm, RoleRepresentation roleRepresentation) throws ApiException {
        adminRealmsRealmRolesPostWithHttpInfo(realm, roleRepresentation);
    }

    /**
     * Create a new role for the realm or client
     * 
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmRolesPostWithHttpInfo(String realm, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesPostValidateBeforeCall(realm, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new role for the realm or client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesPostAsync(String realm, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesPostValidateBeforeCall(realm, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/composites/clients/{client-uuid}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetValidateBeforeCall(String realm, String clientUuid, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetCall(realm, clientUuid, roleName, _callback);

    }

    /**
     * Get client-level roles for the client that are in the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(String realm, String clientUuid, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(realm, clientUuid, roleName);
        return localVarResp.getData();
    }

    /**
     * Get client-level roles for the client that are in the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo(String realm, String clientUuid, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetValidateBeforeCall(realm, clientUuid, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client-level roles for the client that are in the role&#39;s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid  (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetAsync(String realm, String clientUuid, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetValidateBeforeCall(realm, clientUuid, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameCompositesDelete
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesDeleteCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameCompositesDeleteValidateBeforeCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameCompositesDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameCompositesDelete(Async)");
        }

        return adminRealmsRealmRolesRoleNameCompositesDeleteCall(realm, roleName, roleRepresentation, _callback);

    }

    /**
     * Remove roles from the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmRolesRoleNameCompositesDelete(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmRolesRoleNameCompositesDeleteWithHttpInfo(realm, roleName, roleRepresentation);
    }

    /**
     * Remove roles from the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmRolesRoleNameCompositesDeleteWithHttpInfo(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesDeleteValidateBeforeCall(realm, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove roles from the role&#39;s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesDeleteAsync(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesDeleteValidateBeforeCall(realm, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameCompositesGet
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameCompositesGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameCompositesGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameCompositesGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameCompositesGetCall(realm, roleName, _callback);

    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmRolesRoleNameCompositesGet(String realm, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmRolesRoleNameCompositesGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Get composites of the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmRolesRoleNameCompositesGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get composites of the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesGetAsync(String realm, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameCompositesPost
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesPostCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/composites"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameCompositesPostValidateBeforeCall(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameCompositesPost(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameCompositesPost(Async)");
        }

        return adminRealmsRealmRolesRoleNameCompositesPostCall(realm, roleName, roleRepresentation, _callback);

    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmRolesRoleNameCompositesPost(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmRolesRoleNameCompositesPostWithHttpInfo(realm, roleName, roleRepresentation);
    }

    /**
     * Add a composite to the role
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmRolesRoleNameCompositesPostWithHttpInfo(String realm, String roleName, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesPostValidateBeforeCall(realm, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a composite to the role (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesPostAsync(String realm, String roleName, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesPostValidateBeforeCall(realm, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameCompositesRealmGet
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesRealmGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/composites/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameCompositesRealmGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameCompositesRealmGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameCompositesRealmGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameCompositesRealmGetCall(realm, roleName, _callback);

    }

    /**
     * Get realm-level roles of the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmRolesRoleNameCompositesRealmGet(String realm, String roleName) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmRolesRoleNameCompositesRealmGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles of the role&#39;s composite
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmRolesRoleNameCompositesRealmGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles of the role&#39;s composite (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameCompositesRealmGetAsync(String realm, String roleName, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameCompositesRealmGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameDelete
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameDeleteCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameDeleteValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameDelete(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameDelete(Async)");
        }

        return adminRealmsRealmRolesRoleNameDeleteCall(realm, roleName, _callback);

    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmRolesRoleNameDelete(String realm, String roleName) throws ApiException {
        adminRealmsRealmRolesRoleNameDeleteWithHttpInfo(realm, roleName);
    }

    /**
     * Delete a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmRolesRoleNameDeleteWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameDeleteValidateBeforeCall(realm, roleName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameDeleteAsync(String realm, String roleName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameDeleteValidateBeforeCall(realm, roleName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameGet
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameGetCall(realm, roleName, _callback);

    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return RoleRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RoleRepresentation adminRealmsRealmRolesRoleNameGet(String realm, String roleName) throws ApiException {
        ApiResponse<RoleRepresentation> localVarResp = adminRealmsRealmRolesRoleNameGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Get a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @return ApiResponse&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleRepresentation> adminRealmsRealmRolesRoleNameGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameGetAsync(String realm, String roleName, final ApiCallback<RoleRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<RoleRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameGroupsGet
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameGroupsGetCall(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameGroupsGetValidateBeforeCall(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameGroupsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameGroupsGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameGroupsGetCall(realm, roleName, briefRepresentation, first, max, _callback);

    }

    /**
     * Returns a stream of groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> adminRealmsRealmRolesRoleNameGroupsGet(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = adminRealmsRealmRolesRoleNameGroupsGetWithHttpInfo(realm, roleName, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Returns a stream of groups that have the specified role name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> adminRealmsRealmRolesRoleNameGroupsGetWithHttpInfo(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameGroupsGetValidateBeforeCall(realm, roleName, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a stream of groups that have the specified role name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameGroupsGetAsync(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameGroupsGetValidateBeforeCall(realm, roleName, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameManagementPermissionsGetCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameManagementPermissionsGetValidateBeforeCall(String realm, String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameManagementPermissionsGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameManagementPermissionsGetCall(realm, roleName, _callback);

    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmRolesRoleNameManagementPermissionsGet(String realm, String roleName) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmRolesRoleNameManagementPermissionsGetWithHttpInfo(realm, roleName);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmRolesRoleNameManagementPermissionsGetWithHttpInfo(String realm, String roleName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, roleName, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameManagementPermissionsGetAsync(String realm, String roleName, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameManagementPermissionsGetValidateBeforeCall(realm, roleName, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameManagementPermissionsPutCall(String realm, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameManagementPermissionsPutValidateBeforeCall(String realm, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameManagementPermissionsPut(Async)");
        }

        return adminRealmsRealmRolesRoleNameManagementPermissionsPutCall(realm, roleName, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmRolesRoleNameManagementPermissionsPut(String realm, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmRolesRoleNameManagementPermissionsPutWithHttpInfo(realm, roleName, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmRolesRoleNameManagementPermissionsPutWithHttpInfo(String realm, String roleName, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, roleName, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether role Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameManagementPermissionsPutAsync(String realm, String roleName, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameManagementPermissionsPutValidateBeforeCall(realm, roleName, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNamePut
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNamePutCall(String realm, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNamePutValidateBeforeCall(String realm, String roleName, RoleRepresentation roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNamePut(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNamePut(Async)");
        }

        return adminRealmsRealmRolesRoleNamePutCall(realm, roleName, roleRepresentation, _callback);

    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmRolesRoleNamePut(String realm, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        adminRealmsRealmRolesRoleNamePutWithHttpInfo(realm, roleName, roleRepresentation);
    }

    /**
     * Update a role by name
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmRolesRoleNamePutWithHttpInfo(String realm, String roleName, RoleRepresentation roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNamePutValidateBeforeCall(realm, roleName, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a role by name (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName role&#39;s name (not id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNamePutAsync(String realm, String roleName, RoleRepresentation roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNamePutValidateBeforeCall(realm, roleName, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmRolesRoleNameUsersGet
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameUsersGetCall(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/roles/{role-name}/users"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "role-name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmRolesRoleNameUsersGetValidateBeforeCall(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmRolesRoleNameUsersGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling adminRealmsRealmRolesRoleNameUsersGet(Async)");
        }

        return adminRealmsRealmRolesRoleNameUsersGetCall(realm, roleName, briefRepresentation, first, max, _callback);

    }

    /**
     * Returns a stream of users that have the specified role name.
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return List&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserRepresentation> adminRealmsRealmRolesRoleNameUsersGet(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserRepresentation>> localVarResp = adminRealmsRealmRolesRoleNameUsersGetWithHttpInfo(realm, roleName, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Returns a stream of users that have the specified role name.
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @return ApiResponse&lt;List&lt;UserRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserRepresentation>> adminRealmsRealmRolesRoleNameUsersGetWithHttpInfo(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameUsersGetValidateBeforeCall(realm, roleName, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a stream of users that have the specified role name. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param roleName the role name. (required)
     * @param briefRepresentation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param first first result to return. Ignored if negative or {@code null}. (optional)
     * @param max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmRolesRoleNameUsersGetAsync(String realm, String roleName, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<UserRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmRolesRoleNameUsersGetValidateBeforeCall(realm, roleName, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
