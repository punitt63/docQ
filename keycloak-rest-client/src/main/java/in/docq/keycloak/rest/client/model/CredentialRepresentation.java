/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * CredentialRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class CredentialRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_USER_LABEL = "userLabel";
  @SerializedName(SERIALIZED_NAME_USER_LABEL)
  @javax.annotation.Nullable
  private String userLabel;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private Long createdDate;

  public static final String SERIALIZED_NAME_SECRET_DATA = "secretData";
  @SerializedName(SERIALIZED_NAME_SECRET_DATA)
  @javax.annotation.Nullable
  private String secretData;

  public static final String SERIALIZED_NAME_CREDENTIAL_DATA = "credentialData";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_DATA)
  @javax.annotation.Nullable
  private String credentialData;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  @javax.annotation.Nullable
  private Integer priority;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public static final String SERIALIZED_NAME_TEMPORARY = "temporary";
  @SerializedName(SERIALIZED_NAME_TEMPORARY)
  @javax.annotation.Nullable
  private Boolean temporary;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEVICE)
  @javax.annotation.Nullable
  private String device;

  public static final String SERIALIZED_NAME_HASHED_SALTED_VALUE = "hashedSaltedValue";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HASHED_SALTED_VALUE)
  @javax.annotation.Nullable
  private String hashedSaltedValue;

  public static final String SERIALIZED_NAME_SALT = "salt";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SALT)
  @javax.annotation.Nullable
  private String salt;

  public static final String SERIALIZED_NAME_HASH_ITERATIONS = "hashIterations";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HASH_ITERATIONS)
  @javax.annotation.Nullable
  private Integer hashIterations;

  public static final String SERIALIZED_NAME_COUNTER = "counter";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COUNTER)
  @javax.annotation.Nullable
  private Integer counter;

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  @javax.annotation.Nullable
  private String algorithm;

  public static final String SERIALIZED_NAME_DIGITS = "digits";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DIGITS)
  @javax.annotation.Nullable
  private Integer digits;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PERIOD)
  @javax.annotation.Nullable
  private Integer period;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONFIG)
  @javax.annotation.Nullable
  private Map<String, List<String>> config;

  public CredentialRepresentation() {
  }

  public CredentialRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public CredentialRepresentation type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public CredentialRepresentation userLabel(@javax.annotation.Nullable String userLabel) {
    this.userLabel = userLabel;
    return this;
  }

  /**
   * Get userLabel
   * @return userLabel
   */
  @javax.annotation.Nullable
  public String getUserLabel() {
    return userLabel;
  }

  public void setUserLabel(@javax.annotation.Nullable String userLabel) {
    this.userLabel = userLabel;
  }


  public CredentialRepresentation createdDate(@javax.annotation.Nullable Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable Long createdDate) {
    this.createdDate = createdDate;
  }


  public CredentialRepresentation secretData(@javax.annotation.Nullable String secretData) {
    this.secretData = secretData;
    return this;
  }

  /**
   * Get secretData
   * @return secretData
   */
  @javax.annotation.Nullable
  public String getSecretData() {
    return secretData;
  }

  public void setSecretData(@javax.annotation.Nullable String secretData) {
    this.secretData = secretData;
  }


  public CredentialRepresentation credentialData(@javax.annotation.Nullable String credentialData) {
    this.credentialData = credentialData;
    return this;
  }

  /**
   * Get credentialData
   * @return credentialData
   */
  @javax.annotation.Nullable
  public String getCredentialData() {
    return credentialData;
  }

  public void setCredentialData(@javax.annotation.Nullable String credentialData) {
    this.credentialData = credentialData;
  }


  public CredentialRepresentation priority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
  }


  public CredentialRepresentation value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }


  public CredentialRepresentation temporary(@javax.annotation.Nullable Boolean temporary) {
    this.temporary = temporary;
    return this;
  }

  /**
   * Get temporary
   * @return temporary
   */
  @javax.annotation.Nullable
  public Boolean getTemporary() {
    return temporary;
  }

  public void setTemporary(@javax.annotation.Nullable Boolean temporary) {
    this.temporary = temporary;
  }


  @Deprecated
  public CredentialRepresentation device(@javax.annotation.Nullable String device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDevice() {
    return device;
  }

  @Deprecated
  public void setDevice(@javax.annotation.Nullable String device) {
    this.device = device;
  }


  @Deprecated
  public CredentialRepresentation hashedSaltedValue(@javax.annotation.Nullable String hashedSaltedValue) {
    this.hashedSaltedValue = hashedSaltedValue;
    return this;
  }

  /**
   * Get hashedSaltedValue
   * @return hashedSaltedValue
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getHashedSaltedValue() {
    return hashedSaltedValue;
  }

  @Deprecated
  public void setHashedSaltedValue(@javax.annotation.Nullable String hashedSaltedValue) {
    this.hashedSaltedValue = hashedSaltedValue;
  }


  @Deprecated
  public CredentialRepresentation salt(@javax.annotation.Nullable String salt) {
    this.salt = salt;
    return this;
  }

  /**
   * Get salt
   * @return salt
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getSalt() {
    return salt;
  }

  @Deprecated
  public void setSalt(@javax.annotation.Nullable String salt) {
    this.salt = salt;
  }


  @Deprecated
  public CredentialRepresentation hashIterations(@javax.annotation.Nullable Integer hashIterations) {
    this.hashIterations = hashIterations;
    return this;
  }

  /**
   * Get hashIterations
   * @return hashIterations
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getHashIterations() {
    return hashIterations;
  }

  @Deprecated
  public void setHashIterations(@javax.annotation.Nullable Integer hashIterations) {
    this.hashIterations = hashIterations;
  }


  @Deprecated
  public CredentialRepresentation counter(@javax.annotation.Nullable Integer counter) {
    this.counter = counter;
    return this;
  }

  /**
   * Get counter
   * @return counter
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getCounter() {
    return counter;
  }

  @Deprecated
  public void setCounter(@javax.annotation.Nullable Integer counter) {
    this.counter = counter;
  }


  @Deprecated
  public CredentialRepresentation algorithm(@javax.annotation.Nullable String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Get algorithm
   * @return algorithm
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getAlgorithm() {
    return algorithm;
  }

  @Deprecated
  public void setAlgorithm(@javax.annotation.Nullable String algorithm) {
    this.algorithm = algorithm;
  }


  @Deprecated
  public CredentialRepresentation digits(@javax.annotation.Nullable Integer digits) {
    this.digits = digits;
    return this;
  }

  /**
   * Get digits
   * @return digits
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getDigits() {
    return digits;
  }

  @Deprecated
  public void setDigits(@javax.annotation.Nullable Integer digits) {
    this.digits = digits;
  }


  @Deprecated
  public CredentialRepresentation period(@javax.annotation.Nullable Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  @Deprecated
  public void setPeriod(@javax.annotation.Nullable Integer period) {
    this.period = period;
  }


  @Deprecated
  public CredentialRepresentation config(@javax.annotation.Nullable Map<String, List<String>> config) {
    this.config = config;
    return this;
  }

  public CredentialRepresentation putConfigItem(String key, List<String> configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

  /**
   * Get config
   * @return config
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Map<String, List<String>> getConfig() {
    return config;
  }

  @Deprecated
  public void setConfig(@javax.annotation.Nullable Map<String, List<String>> config) {
    this.config = config;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialRepresentation credentialRepresentation = (CredentialRepresentation) o;
    return Objects.equals(this.id, credentialRepresentation.id) &&
        Objects.equals(this.type, credentialRepresentation.type) &&
        Objects.equals(this.userLabel, credentialRepresentation.userLabel) &&
        Objects.equals(this.createdDate, credentialRepresentation.createdDate) &&
        Objects.equals(this.secretData, credentialRepresentation.secretData) &&
        Objects.equals(this.credentialData, credentialRepresentation.credentialData) &&
        Objects.equals(this.priority, credentialRepresentation.priority) &&
        Objects.equals(this.value, credentialRepresentation.value) &&
        Objects.equals(this.temporary, credentialRepresentation.temporary) &&
        Objects.equals(this.device, credentialRepresentation.device) &&
        Objects.equals(this.hashedSaltedValue, credentialRepresentation.hashedSaltedValue) &&
        Objects.equals(this.salt, credentialRepresentation.salt) &&
        Objects.equals(this.hashIterations, credentialRepresentation.hashIterations) &&
        Objects.equals(this.counter, credentialRepresentation.counter) &&
        Objects.equals(this.algorithm, credentialRepresentation.algorithm) &&
        Objects.equals(this.digits, credentialRepresentation.digits) &&
        Objects.equals(this.period, credentialRepresentation.period) &&
        Objects.equals(this.config, credentialRepresentation.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, userLabel, createdDate, secretData, credentialData, priority, value, temporary, device, hashedSaltedValue, salt, hashIterations, counter, algorithm, digits, period, config);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userLabel: ").append(toIndentedString(userLabel)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    secretData: ").append(toIndentedString(secretData)).append("\n");
    sb.append("    credentialData: ").append(toIndentedString(credentialData)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    temporary: ").append(toIndentedString(temporary)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    hashedSaltedValue: ").append(toIndentedString(hashedSaltedValue)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("    hashIterations: ").append(toIndentedString(hashIterations)).append("\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    digits: ").append(toIndentedString(digits)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("userLabel");
    openapiFields.add("createdDate");
    openapiFields.add("secretData");
    openapiFields.add("credentialData");
    openapiFields.add("priority");
    openapiFields.add("value");
    openapiFields.add("temporary");
    openapiFields.add("device");
    openapiFields.add("hashedSaltedValue");
    openapiFields.add("salt");
    openapiFields.add("hashIterations");
    openapiFields.add("counter");
    openapiFields.add("algorithm");
    openapiFields.add("digits");
    openapiFields.add("period");
    openapiFields.add("config");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredentialRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredentialRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredentialRepresentation is not found in the empty JSON string", CredentialRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredentialRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredentialRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("userLabel") != null && !jsonObj.get("userLabel").isJsonNull()) && !jsonObj.get("userLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLabel").toString()));
      }
      if ((jsonObj.get("secretData") != null && !jsonObj.get("secretData").isJsonNull()) && !jsonObj.get("secretData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretData").toString()));
      }
      if ((jsonObj.get("credentialData") != null && !jsonObj.get("credentialData").isJsonNull()) && !jsonObj.get("credentialData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialData").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) && !jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      if ((jsonObj.get("hashedSaltedValue") != null && !jsonObj.get("hashedSaltedValue").isJsonNull()) && !jsonObj.get("hashedSaltedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashedSaltedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashedSaltedValue").toString()));
      }
      if ((jsonObj.get("salt") != null && !jsonObj.get("salt").isJsonNull()) && !jsonObj.get("salt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salt").toString()));
      }
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredentialRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredentialRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredentialRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredentialRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<CredentialRepresentation>() {
           @Override
           public void write(JsonWriter out, CredentialRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredentialRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredentialRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredentialRepresentation
   * @throws IOException if the JSON string is invalid with respect to CredentialRepresentation
   */
  public static CredentialRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredentialRepresentation.class);
  }

  /**
   * Convert an instance of CredentialRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

