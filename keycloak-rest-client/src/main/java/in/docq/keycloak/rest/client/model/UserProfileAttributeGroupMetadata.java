/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * UserProfileAttributeGroupMetadata
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class UserProfileAttributeGroupMetadata {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_HEADER = "displayHeader";
  @SerializedName(SERIALIZED_NAME_DISPLAY_HEADER)
  @javax.annotation.Nullable
  private String displayHeader;

  public static final String SERIALIZED_NAME_DISPLAY_DESCRIPTION = "displayDescription";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DESCRIPTION)
  @javax.annotation.Nullable
  private String displayDescription;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  @javax.annotation.Nullable
  private Map<String, Object> annotations = new HashMap<>();

  public UserProfileAttributeGroupMetadata() {
  }

  public UserProfileAttributeGroupMetadata name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UserProfileAttributeGroupMetadata displayHeader(@javax.annotation.Nullable String displayHeader) {
    this.displayHeader = displayHeader;
    return this;
  }

  /**
   * Get displayHeader
   * @return displayHeader
   */
  @javax.annotation.Nullable
  public String getDisplayHeader() {
    return displayHeader;
  }

  public void setDisplayHeader(@javax.annotation.Nullable String displayHeader) {
    this.displayHeader = displayHeader;
  }


  public UserProfileAttributeGroupMetadata displayDescription(@javax.annotation.Nullable String displayDescription) {
    this.displayDescription = displayDescription;
    return this;
  }

  /**
   * Get displayDescription
   * @return displayDescription
   */
  @javax.annotation.Nullable
  public String getDisplayDescription() {
    return displayDescription;
  }

  public void setDisplayDescription(@javax.annotation.Nullable String displayDescription) {
    this.displayDescription = displayDescription;
  }


  public UserProfileAttributeGroupMetadata annotations(@javax.annotation.Nullable Map<String, Object> annotations) {
    this.annotations = annotations;
    return this;
  }

  public UserProfileAttributeGroupMetadata putAnnotationsItem(String key, Object annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(@javax.annotation.Nullable Map<String, Object> annotations) {
    this.annotations = annotations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProfileAttributeGroupMetadata userProfileAttributeGroupMetadata = (UserProfileAttributeGroupMetadata) o;
    return Objects.equals(this.name, userProfileAttributeGroupMetadata.name) &&
        Objects.equals(this.displayHeader, userProfileAttributeGroupMetadata.displayHeader) &&
        Objects.equals(this.displayDescription, userProfileAttributeGroupMetadata.displayDescription) &&
        Objects.equals(this.annotations, userProfileAttributeGroupMetadata.annotations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayHeader, displayDescription, annotations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProfileAttributeGroupMetadata {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayHeader: ").append(toIndentedString(displayHeader)).append("\n");
    sb.append("    displayDescription: ").append(toIndentedString(displayDescription)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("displayHeader");
    openapiFields.add("displayDescription");
    openapiFields.add("annotations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserProfileAttributeGroupMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProfileAttributeGroupMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProfileAttributeGroupMetadata is not found in the empty JSON string", UserProfileAttributeGroupMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProfileAttributeGroupMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProfileAttributeGroupMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayHeader") != null && !jsonObj.get("displayHeader").isJsonNull()) && !jsonObj.get("displayHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayHeader").toString()));
      }
      if ((jsonObj.get("displayDescription") != null && !jsonObj.get("displayDescription").isJsonNull()) && !jsonObj.get("displayDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProfileAttributeGroupMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProfileAttributeGroupMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProfileAttributeGroupMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProfileAttributeGroupMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProfileAttributeGroupMetadata>() {
           @Override
           public void write(JsonWriter out, UserProfileAttributeGroupMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProfileAttributeGroupMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserProfileAttributeGroupMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserProfileAttributeGroupMetadata
   * @throws IOException if the JSON string is invalid with respect to UserProfileAttributeGroupMetadata
   */
  public static UserProfileAttributeGroupMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProfileAttributeGroupMetadata.class);
  }

  /**
   * Convert an instance of UserProfileAttributeGroupMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

