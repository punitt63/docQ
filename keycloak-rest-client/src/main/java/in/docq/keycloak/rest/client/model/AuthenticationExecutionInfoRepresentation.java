/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * AuthenticationExecutionInfoRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AuthenticationExecutionInfoRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_REQUIREMENT = "requirement";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT)
  @javax.annotation.Nullable
  private String requirement;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  @javax.annotation.Nullable
  private String alias;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_REQUIREMENT_CHOICES = "requirementChoices";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT_CHOICES)
  @javax.annotation.Nullable
  private List<String> requirementChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURABLE = "configurable";
  @SerializedName(SERIALIZED_NAME_CONFIGURABLE)
  @javax.annotation.Nullable
  private Boolean configurable;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authenticationFlow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  @javax.annotation.Nullable
  private Boolean authenticationFlow;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  @javax.annotation.Nullable
  private String providerId;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONFIG = "authenticationConfig";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONFIG)
  @javax.annotation.Nullable
  private String authenticationConfig;

  public static final String SERIALIZED_NAME_FLOW_ID = "flowId";
  @SerializedName(SERIALIZED_NAME_FLOW_ID)
  @javax.annotation.Nullable
  private String flowId;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private Integer level;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private Integer index;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  @javax.annotation.Nullable
  private Integer priority;

  public AuthenticationExecutionInfoRepresentation() {
  }

  public AuthenticationExecutionInfoRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public AuthenticationExecutionInfoRepresentation requirement(@javax.annotation.Nullable String requirement) {
    this.requirement = requirement;
    return this;
  }

  /**
   * Get requirement
   * @return requirement
   */
  @javax.annotation.Nullable
  public String getRequirement() {
    return requirement;
  }

  public void setRequirement(@javax.annotation.Nullable String requirement) {
    this.requirement = requirement;
  }


  public AuthenticationExecutionInfoRepresentation displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public AuthenticationExecutionInfoRepresentation alias(@javax.annotation.Nullable String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(@javax.annotation.Nullable String alias) {
    this.alias = alias;
  }


  public AuthenticationExecutionInfoRepresentation description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public AuthenticationExecutionInfoRepresentation requirementChoices(@javax.annotation.Nullable List<String> requirementChoices) {
    this.requirementChoices = requirementChoices;
    return this;
  }

  public AuthenticationExecutionInfoRepresentation addRequirementChoicesItem(String requirementChoicesItem) {
    if (this.requirementChoices == null) {
      this.requirementChoices = new ArrayList<>();
    }
    this.requirementChoices.add(requirementChoicesItem);
    return this;
  }

  /**
   * Get requirementChoices
   * @return requirementChoices
   */
  @javax.annotation.Nullable
  public List<String> getRequirementChoices() {
    return requirementChoices;
  }

  public void setRequirementChoices(@javax.annotation.Nullable List<String> requirementChoices) {
    this.requirementChoices = requirementChoices;
  }


  public AuthenticationExecutionInfoRepresentation configurable(@javax.annotation.Nullable Boolean configurable) {
    this.configurable = configurable;
    return this;
  }

  /**
   * Get configurable
   * @return configurable
   */
  @javax.annotation.Nullable
  public Boolean getConfigurable() {
    return configurable;
  }

  public void setConfigurable(@javax.annotation.Nullable Boolean configurable) {
    this.configurable = configurable;
  }


  public AuthenticationExecutionInfoRepresentation authenticationFlow(@javax.annotation.Nullable Boolean authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Get authenticationFlow
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public Boolean getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(@javax.annotation.Nullable Boolean authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public AuthenticationExecutionInfoRepresentation providerId(@javax.annotation.Nullable String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * Get providerId
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(@javax.annotation.Nullable String providerId) {
    this.providerId = providerId;
  }


  public AuthenticationExecutionInfoRepresentation authenticationConfig(@javax.annotation.Nullable String authenticationConfig) {
    this.authenticationConfig = authenticationConfig;
    return this;
  }

  /**
   * Get authenticationConfig
   * @return authenticationConfig
   */
  @javax.annotation.Nullable
  public String getAuthenticationConfig() {
    return authenticationConfig;
  }

  public void setAuthenticationConfig(@javax.annotation.Nullable String authenticationConfig) {
    this.authenticationConfig = authenticationConfig;
  }


  public AuthenticationExecutionInfoRepresentation flowId(@javax.annotation.Nullable String flowId) {
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nullable
  public String getFlowId() {
    return flowId;
  }

  public void setFlowId(@javax.annotation.Nullable String flowId) {
    this.flowId = flowId;
  }


  public AuthenticationExecutionInfoRepresentation level(@javax.annotation.Nullable Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable Integer level) {
    this.level = level;
  }


  public AuthenticationExecutionInfoRepresentation index(@javax.annotation.Nullable Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable Integer index) {
    this.index = index;
  }


  public AuthenticationExecutionInfoRepresentation priority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationExecutionInfoRepresentation authenticationExecutionInfoRepresentation = (AuthenticationExecutionInfoRepresentation) o;
    return Objects.equals(this.id, authenticationExecutionInfoRepresentation.id) &&
        Objects.equals(this.requirement, authenticationExecutionInfoRepresentation.requirement) &&
        Objects.equals(this.displayName, authenticationExecutionInfoRepresentation.displayName) &&
        Objects.equals(this.alias, authenticationExecutionInfoRepresentation.alias) &&
        Objects.equals(this.description, authenticationExecutionInfoRepresentation.description) &&
        Objects.equals(this.requirementChoices, authenticationExecutionInfoRepresentation.requirementChoices) &&
        Objects.equals(this.configurable, authenticationExecutionInfoRepresentation.configurable) &&
        Objects.equals(this.authenticationFlow, authenticationExecutionInfoRepresentation.authenticationFlow) &&
        Objects.equals(this.providerId, authenticationExecutionInfoRepresentation.providerId) &&
        Objects.equals(this.authenticationConfig, authenticationExecutionInfoRepresentation.authenticationConfig) &&
        Objects.equals(this.flowId, authenticationExecutionInfoRepresentation.flowId) &&
        Objects.equals(this.level, authenticationExecutionInfoRepresentation.level) &&
        Objects.equals(this.index, authenticationExecutionInfoRepresentation.index) &&
        Objects.equals(this.priority, authenticationExecutionInfoRepresentation.priority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, requirement, displayName, alias, description, requirementChoices, configurable, authenticationFlow, providerId, authenticationConfig, flowId, level, index, priority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationExecutionInfoRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    requirementChoices: ").append(toIndentedString(requirementChoices)).append("\n");
    sb.append("    configurable: ").append(toIndentedString(configurable)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    authenticationConfig: ").append(toIndentedString(authenticationConfig)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("requirement");
    openapiFields.add("displayName");
    openapiFields.add("alias");
    openapiFields.add("description");
    openapiFields.add("requirementChoices");
    openapiFields.add("configurable");
    openapiFields.add("authenticationFlow");
    openapiFields.add("providerId");
    openapiFields.add("authenticationConfig");
    openapiFields.add("flowId");
    openapiFields.add("level");
    openapiFields.add("index");
    openapiFields.add("priority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticationExecutionInfoRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticationExecutionInfoRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationExecutionInfoRepresentation is not found in the empty JSON string", AuthenticationExecutionInfoRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticationExecutionInfoRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticationExecutionInfoRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("requirement") != null && !jsonObj.get("requirement").isJsonNull()) && !jsonObj.get("requirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requirement").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requirementChoices") != null && !jsonObj.get("requirementChoices").isJsonNull() && !jsonObj.get("requirementChoices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requirementChoices` to be an array in the JSON string but got `%s`", jsonObj.get("requirementChoices").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("authenticationConfig") != null && !jsonObj.get("authenticationConfig").isJsonNull()) && !jsonObj.get("authenticationConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationConfig").toString()));
      }
      if ((jsonObj.get("flowId") != null && !jsonObj.get("flowId").isJsonNull()) && !jsonObj.get("flowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationExecutionInfoRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationExecutionInfoRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationExecutionInfoRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationExecutionInfoRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationExecutionInfoRepresentation>() {
           @Override
           public void write(JsonWriter out, AuthenticationExecutionInfoRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationExecutionInfoRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticationExecutionInfoRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticationExecutionInfoRepresentation
   * @throws IOException if the JSON string is invalid with respect to AuthenticationExecutionInfoRepresentation
   */
  public static AuthenticationExecutionInfoRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationExecutionInfoRepresentation.class);
  }

  /**
   * Convert an instance of AuthenticationExecutionInfoRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

