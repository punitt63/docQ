/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * AuthenticationExecutionRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AuthenticationExecutionRepresentation {
  public static final String SERIALIZED_NAME_AUTHENTICATOR_CONFIG = "authenticatorConfig";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATOR_CONFIG)
  @javax.annotation.Nullable
  private String authenticatorConfig;

  public static final String SERIALIZED_NAME_AUTHENTICATOR = "authenticator";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATOR)
  @javax.annotation.Nullable
  private String authenticator;

  public static final String SERIALIZED_NAME_AUTHENTICATOR_FLOW = "authenticatorFlow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATOR_FLOW)
  @javax.annotation.Nullable
  private Boolean authenticatorFlow;

  public static final String SERIALIZED_NAME_REQUIREMENT = "requirement";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT)
  @javax.annotation.Nullable
  private String requirement;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  @javax.annotation.Nullable
  private Integer priority;

  public static final String SERIALIZED_NAME_AUTHETICATOR_FLOW = "autheticatorFlow";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AUTHETICATOR_FLOW)
  @javax.annotation.Nullable
  private Boolean autheticatorFlow;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_FLOW_ID = "flowId";
  @SerializedName(SERIALIZED_NAME_FLOW_ID)
  @javax.annotation.Nullable
  private String flowId;

  public static final String SERIALIZED_NAME_PARENT_FLOW = "parentFlow";
  @SerializedName(SERIALIZED_NAME_PARENT_FLOW)
  @javax.annotation.Nullable
  private String parentFlow;

  public AuthenticationExecutionRepresentation() {
  }

  public AuthenticationExecutionRepresentation authenticatorConfig(@javax.annotation.Nullable String authenticatorConfig) {
    this.authenticatorConfig = authenticatorConfig;
    return this;
  }

  /**
   * Get authenticatorConfig
   * @return authenticatorConfig
   */
  @javax.annotation.Nullable
  public String getAuthenticatorConfig() {
    return authenticatorConfig;
  }

  public void setAuthenticatorConfig(@javax.annotation.Nullable String authenticatorConfig) {
    this.authenticatorConfig = authenticatorConfig;
  }


  public AuthenticationExecutionRepresentation authenticator(@javax.annotation.Nullable String authenticator) {
    this.authenticator = authenticator;
    return this;
  }

  /**
   * Get authenticator
   * @return authenticator
   */
  @javax.annotation.Nullable
  public String getAuthenticator() {
    return authenticator;
  }

  public void setAuthenticator(@javax.annotation.Nullable String authenticator) {
    this.authenticator = authenticator;
  }


  public AuthenticationExecutionRepresentation authenticatorFlow(@javax.annotation.Nullable Boolean authenticatorFlow) {
    this.authenticatorFlow = authenticatorFlow;
    return this;
  }

  /**
   * Get authenticatorFlow
   * @return authenticatorFlow
   */
  @javax.annotation.Nullable
  public Boolean getAuthenticatorFlow() {
    return authenticatorFlow;
  }

  public void setAuthenticatorFlow(@javax.annotation.Nullable Boolean authenticatorFlow) {
    this.authenticatorFlow = authenticatorFlow;
  }


  public AuthenticationExecutionRepresentation requirement(@javax.annotation.Nullable String requirement) {
    this.requirement = requirement;
    return this;
  }

  /**
   * Get requirement
   * @return requirement
   */
  @javax.annotation.Nullable
  public String getRequirement() {
    return requirement;
  }

  public void setRequirement(@javax.annotation.Nullable String requirement) {
    this.requirement = requirement;
  }


  public AuthenticationExecutionRepresentation priority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(@javax.annotation.Nullable Integer priority) {
    this.priority = priority;
  }


  @Deprecated
  public AuthenticationExecutionRepresentation autheticatorFlow(@javax.annotation.Nullable Boolean autheticatorFlow) {
    this.autheticatorFlow = autheticatorFlow;
    return this;
  }

  /**
   * Get autheticatorFlow
   * @return autheticatorFlow
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getAutheticatorFlow() {
    return autheticatorFlow;
  }

  @Deprecated
  public void setAutheticatorFlow(@javax.annotation.Nullable Boolean autheticatorFlow) {
    this.autheticatorFlow = autheticatorFlow;
  }


  public AuthenticationExecutionRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public AuthenticationExecutionRepresentation flowId(@javax.annotation.Nullable String flowId) {
    this.flowId = flowId;
    return this;
  }

  /**
   * Get flowId
   * @return flowId
   */
  @javax.annotation.Nullable
  public String getFlowId() {
    return flowId;
  }

  public void setFlowId(@javax.annotation.Nullable String flowId) {
    this.flowId = flowId;
  }


  public AuthenticationExecutionRepresentation parentFlow(@javax.annotation.Nullable String parentFlow) {
    this.parentFlow = parentFlow;
    return this;
  }

  /**
   * Get parentFlow
   * @return parentFlow
   */
  @javax.annotation.Nullable
  public String getParentFlow() {
    return parentFlow;
  }

  public void setParentFlow(@javax.annotation.Nullable String parentFlow) {
    this.parentFlow = parentFlow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationExecutionRepresentation authenticationExecutionRepresentation = (AuthenticationExecutionRepresentation) o;
    return Objects.equals(this.authenticatorConfig, authenticationExecutionRepresentation.authenticatorConfig) &&
        Objects.equals(this.authenticator, authenticationExecutionRepresentation.authenticator) &&
        Objects.equals(this.authenticatorFlow, authenticationExecutionRepresentation.authenticatorFlow) &&
        Objects.equals(this.requirement, authenticationExecutionRepresentation.requirement) &&
        Objects.equals(this.priority, authenticationExecutionRepresentation.priority) &&
        Objects.equals(this.autheticatorFlow, authenticationExecutionRepresentation.autheticatorFlow) &&
        Objects.equals(this.id, authenticationExecutionRepresentation.id) &&
        Objects.equals(this.flowId, authenticationExecutionRepresentation.flowId) &&
        Objects.equals(this.parentFlow, authenticationExecutionRepresentation.parentFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticatorConfig, authenticator, authenticatorFlow, requirement, priority, autheticatorFlow, id, flowId, parentFlow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationExecutionRepresentation {\n");
    sb.append("    authenticatorConfig: ").append(toIndentedString(authenticatorConfig)).append("\n");
    sb.append("    authenticator: ").append(toIndentedString(authenticator)).append("\n");
    sb.append("    authenticatorFlow: ").append(toIndentedString(authenticatorFlow)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    autheticatorFlow: ").append(toIndentedString(autheticatorFlow)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    parentFlow: ").append(toIndentedString(parentFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticatorConfig");
    openapiFields.add("authenticator");
    openapiFields.add("authenticatorFlow");
    openapiFields.add("requirement");
    openapiFields.add("priority");
    openapiFields.add("autheticatorFlow");
    openapiFields.add("id");
    openapiFields.add("flowId");
    openapiFields.add("parentFlow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticationExecutionRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticationExecutionRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationExecutionRepresentation is not found in the empty JSON string", AuthenticationExecutionRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticationExecutionRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticationExecutionRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticatorConfig") != null && !jsonObj.get("authenticatorConfig").isJsonNull()) && !jsonObj.get("authenticatorConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticatorConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticatorConfig").toString()));
      }
      if ((jsonObj.get("authenticator") != null && !jsonObj.get("authenticator").isJsonNull()) && !jsonObj.get("authenticator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticator").toString()));
      }
      if ((jsonObj.get("requirement") != null && !jsonObj.get("requirement").isJsonNull()) && !jsonObj.get("requirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requirement").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("flowId") != null && !jsonObj.get("flowId").isJsonNull()) && !jsonObj.get("flowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowId").toString()));
      }
      if ((jsonObj.get("parentFlow") != null && !jsonObj.get("parentFlow").isJsonNull()) && !jsonObj.get("parentFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentFlow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationExecutionRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationExecutionRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationExecutionRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationExecutionRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationExecutionRepresentation>() {
           @Override
           public void write(JsonWriter out, AuthenticationExecutionRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationExecutionRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticationExecutionRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticationExecutionRepresentation
   * @throws IOException if the JSON string is invalid with respect to AuthenticationExecutionRepresentation
   */
  public static AuthenticationExecutionRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationExecutionRepresentation.class);
  }

  /**
   * Convert an instance of AuthenticationExecutionRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

