/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import in.docq.keycloak.rest.client.model.DecisionEffect;
import in.docq.keycloak.rest.client.model.PolicyResultRepresentation;
import in.docq.keycloak.rest.client.model.ResourceRepresentation;
import in.docq.keycloak.rest.client.model.ScopeRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * EvaluationResultRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class EvaluationResultRepresentation {
  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  @javax.annotation.Nullable
  private ResourceRepresentation resource;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  @javax.annotation.Nullable
  private List<ScopeRepresentation> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  @javax.annotation.Nullable
  private List<PolicyResultRepresentation> policies = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private DecisionEffect status;

  public static final String SERIALIZED_NAME_ALLOWED_SCOPES = "allowedScopes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SCOPES)
  @javax.annotation.Nullable
  private List<ScopeRepresentation> allowedScopes = new ArrayList<>();

  public EvaluationResultRepresentation() {
  }

  public EvaluationResultRepresentation resource(@javax.annotation.Nullable ResourceRepresentation resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public ResourceRepresentation getResource() {
    return resource;
  }

  public void setResource(@javax.annotation.Nullable ResourceRepresentation resource) {
    this.resource = resource;
  }


  public EvaluationResultRepresentation scopes(@javax.annotation.Nullable List<ScopeRepresentation> scopes) {
    this.scopes = scopes;
    return this;
  }

  public EvaluationResultRepresentation addScopesItem(ScopeRepresentation scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<ScopeRepresentation> getScopes() {
    return scopes;
  }

  public void setScopes(@javax.annotation.Nullable List<ScopeRepresentation> scopes) {
    this.scopes = scopes;
  }


  public EvaluationResultRepresentation policies(@javax.annotation.Nullable List<PolicyResultRepresentation> policies) {
    this.policies = policies;
    return this;
  }

  public EvaluationResultRepresentation addPoliciesItem(PolicyResultRepresentation policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public List<PolicyResultRepresentation> getPolicies() {
    return policies;
  }

  public void setPolicies(@javax.annotation.Nullable List<PolicyResultRepresentation> policies) {
    this.policies = policies;
  }


  public EvaluationResultRepresentation status(@javax.annotation.Nullable DecisionEffect status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DecisionEffect getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable DecisionEffect status) {
    this.status = status;
  }


  public EvaluationResultRepresentation allowedScopes(@javax.annotation.Nullable List<ScopeRepresentation> allowedScopes) {
    this.allowedScopes = allowedScopes;
    return this;
  }

  public EvaluationResultRepresentation addAllowedScopesItem(ScopeRepresentation allowedScopesItem) {
    if (this.allowedScopes == null) {
      this.allowedScopes = new ArrayList<>();
    }
    this.allowedScopes.add(allowedScopesItem);
    return this;
  }

  /**
   * Get allowedScopes
   * @return allowedScopes
   */
  @javax.annotation.Nullable
  public List<ScopeRepresentation> getAllowedScopes() {
    return allowedScopes;
  }

  public void setAllowedScopes(@javax.annotation.Nullable List<ScopeRepresentation> allowedScopes) {
    this.allowedScopes = allowedScopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationResultRepresentation evaluationResultRepresentation = (EvaluationResultRepresentation) o;
    return Objects.equals(this.resource, evaluationResultRepresentation.resource) &&
        Objects.equals(this.scopes, evaluationResultRepresentation.scopes) &&
        Objects.equals(this.policies, evaluationResultRepresentation.policies) &&
        Objects.equals(this.status, evaluationResultRepresentation.status) &&
        Objects.equals(this.allowedScopes, evaluationResultRepresentation.allowedScopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resource, scopes, policies, status, allowedScopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationResultRepresentation {\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    allowedScopes: ").append(toIndentedString(allowedScopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resource");
    openapiFields.add("scopes");
    openapiFields.add("policies");
    openapiFields.add("status");
    openapiFields.add("allowedScopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationResultRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationResultRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationResultRepresentation is not found in the empty JSON string", EvaluationResultRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationResultRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationResultRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        ResourceRepresentation.validateJsonElement(jsonObj.get("resource"));
      }
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull()) {
        JsonArray jsonArrayscopes = jsonObj.getAsJsonArray("scopes");
        if (jsonArrayscopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
          }

          // validate the optional field `scopes` (array)
          for (int i = 0; i < jsonArrayscopes.size(); i++) {
            ScopeRepresentation.validateJsonElement(jsonArrayscopes.get(i));
          };
        }
      }
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
          }

          // validate the optional field `policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            PolicyResultRepresentation.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DecisionEffect.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("allowedScopes") != null && !jsonObj.get("allowedScopes").isJsonNull()) {
        JsonArray jsonArrayallowedScopes = jsonObj.getAsJsonArray("allowedScopes");
        if (jsonArrayallowedScopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedScopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedScopes` to be an array in the JSON string but got `%s`", jsonObj.get("allowedScopes").toString()));
          }

          // validate the optional field `allowedScopes` (array)
          for (int i = 0; i < jsonArrayallowedScopes.size(); i++) {
            ScopeRepresentation.validateJsonElement(jsonArrayallowedScopes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationResultRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationResultRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationResultRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationResultRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationResultRepresentation>() {
           @Override
           public void write(JsonWriter out, EvaluationResultRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationResultRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationResultRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationResultRepresentation
   * @throws IOException if the JSON string is invalid with respect to EvaluationResultRepresentation
   */
  public static EvaluationResultRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationResultRepresentation.class);
  }

  /**
   * Convert an instance of EvaluationResultRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

