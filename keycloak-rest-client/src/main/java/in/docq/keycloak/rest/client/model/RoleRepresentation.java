/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import in.docq.keycloak.rest.client.model.Composites;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * RoleRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class RoleRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SCOPE_PARAM_REQUIRED = "scopeParamRequired";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SCOPE_PARAM_REQUIRED)
  @javax.annotation.Nullable
  private Boolean scopeParamRequired;

  public static final String SERIALIZED_NAME_COMPOSITE = "composite";
  @SerializedName(SERIALIZED_NAME_COMPOSITE)
  @javax.annotation.Nullable
  private Boolean composite;

  public static final String SERIALIZED_NAME_COMPOSITES = "composites";
  @SerializedName(SERIALIZED_NAME_COMPOSITES)
  @javax.annotation.Nullable
  private Composites composites;

  public static final String SERIALIZED_NAME_CLIENT_ROLE = "clientRole";
  @SerializedName(SERIALIZED_NAME_CLIENT_ROLE)
  @javax.annotation.Nullable
  private Boolean clientRole;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  @javax.annotation.Nullable
  private String containerId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @javax.annotation.Nullable
  private Map<String, List<String>> attributes = new HashMap<>();

  public RoleRepresentation() {
  }

  public RoleRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public RoleRepresentation name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public RoleRepresentation description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  @Deprecated
  public RoleRepresentation scopeParamRequired(@javax.annotation.Nullable Boolean scopeParamRequired) {
    this.scopeParamRequired = scopeParamRequired;
    return this;
  }

  /**
   * Get scopeParamRequired
   * @return scopeParamRequired
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getScopeParamRequired() {
    return scopeParamRequired;
  }

  @Deprecated
  public void setScopeParamRequired(@javax.annotation.Nullable Boolean scopeParamRequired) {
    this.scopeParamRequired = scopeParamRequired;
  }


  public RoleRepresentation composite(@javax.annotation.Nullable Boolean composite) {
    this.composite = composite;
    return this;
  }

  /**
   * Get composite
   * @return composite
   */
  @javax.annotation.Nullable
  public Boolean getComposite() {
    return composite;
  }

  public void setComposite(@javax.annotation.Nullable Boolean composite) {
    this.composite = composite;
  }


  public RoleRepresentation composites(@javax.annotation.Nullable Composites composites) {
    this.composites = composites;
    return this;
  }

  /**
   * Get composites
   * @return composites
   */
  @javax.annotation.Nullable
  public Composites getComposites() {
    return composites;
  }

  public void setComposites(@javax.annotation.Nullable Composites composites) {
    this.composites = composites;
  }


  public RoleRepresentation clientRole(@javax.annotation.Nullable Boolean clientRole) {
    this.clientRole = clientRole;
    return this;
  }

  /**
   * Get clientRole
   * @return clientRole
   */
  @javax.annotation.Nullable
  public Boolean getClientRole() {
    return clientRole;
  }

  public void setClientRole(@javax.annotation.Nullable Boolean clientRole) {
    this.clientRole = clientRole;
  }


  public RoleRepresentation containerId(@javax.annotation.Nullable String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * Get containerId
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(@javax.annotation.Nullable String containerId) {
    this.containerId = containerId;
  }


  public RoleRepresentation attributes(@javax.annotation.Nullable Map<String, List<String>> attributes) {
    this.attributes = attributes;
    return this;
  }

  public RoleRepresentation putAttributesItem(String key, List<String> attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getAttributes() {
    return attributes;
  }

  public void setAttributes(@javax.annotation.Nullable Map<String, List<String>> attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleRepresentation roleRepresentation = (RoleRepresentation) o;
    return Objects.equals(this.id, roleRepresentation.id) &&
        Objects.equals(this.name, roleRepresentation.name) &&
        Objects.equals(this.description, roleRepresentation.description) &&
        Objects.equals(this.scopeParamRequired, roleRepresentation.scopeParamRequired) &&
        Objects.equals(this.composite, roleRepresentation.composite) &&
        Objects.equals(this.composites, roleRepresentation.composites) &&
        Objects.equals(this.clientRole, roleRepresentation.clientRole) &&
        Objects.equals(this.containerId, roleRepresentation.containerId) &&
        Objects.equals(this.attributes, roleRepresentation.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, scopeParamRequired, composite, composites, clientRole, containerId, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scopeParamRequired: ").append(toIndentedString(scopeParamRequired)).append("\n");
    sb.append("    composite: ").append(toIndentedString(composite)).append("\n");
    sb.append("    composites: ").append(toIndentedString(composites)).append("\n");
    sb.append("    clientRole: ").append(toIndentedString(clientRole)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("scopeParamRequired");
    openapiFields.add("composite");
    openapiFields.add("composites");
    openapiFields.add("clientRole");
    openapiFields.add("containerId");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleRepresentation is not found in the empty JSON string", RoleRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `composites`
      if (jsonObj.get("composites") != null && !jsonObj.get("composites").isJsonNull()) {
        Composites.validateJsonElement(jsonObj.get("composites"));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleRepresentation>() {
           @Override
           public void write(JsonWriter out, RoleRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleRepresentation
   * @throws IOException if the JSON string is invalid with respect to RoleRepresentation
   */
  public static RoleRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleRepresentation.class);
  }

  /**
   * Convert an instance of RoleRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

