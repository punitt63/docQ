/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.RoleRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientRoleMappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientRoleMappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientRoleMappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetCall(String realm, String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetValidateBeforeCall(String realm, String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetCall(realm, groupId, clientId, _callback);

    }

    /**
     * Get available client-level roles that can be mapped to the user or group
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet(String realm, String groupId, String clientId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo(realm, groupId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get available client-level roles that can be mapped to the user or group
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo(String realm, String groupId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetValidateBeforeCall(realm, groupId, clientId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available client-level roles that can be mapped to the user or group (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetAsync(String realm, String groupId, String clientId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetValidateBeforeCall(realm, groupId, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetCall(String realm, String groupId, String clientId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetValidateBeforeCall(String realm, String groupId, String clientId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetCall(realm, groupId, clientId, briefRepresentation, _callback);

    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet(String realm, String groupId, String clientId, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo(realm, groupId, clientId, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo(String realm, String groupId, String clientId, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetValidateBeforeCall(realm, groupId, clientId, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetAsync(String realm, String groupId, String clientId, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetValidateBeforeCall(realm, groupId, clientId, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteCall(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteValidateBeforeCall(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete(Async)");
        }

        return adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteCall(realm, groupId, clientId, roleRepresentation, _callback);

    }

    /**
     * Delete client-level roles from user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteWithHttpInfo(realm, groupId, clientId, roleRepresentation);
    }

    /**
     * Delete client-level roles from user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteWithHttpInfo(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteValidateBeforeCall(realm, groupId, clientId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete client-level roles from user or group role mapping (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteAsync(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteValidateBeforeCall(realm, groupId, clientId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetCall(String realm, String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetValidateBeforeCall(String realm, String groupId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetCall(realm, groupId, clientId, _callback);

    }

    /**
     * Get client-level role mappings for the user or group, and the app
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet(String realm, String groupId, String clientId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetWithHttpInfo(realm, groupId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get client-level role mappings for the user or group, and the app
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetWithHttpInfo(String realm, String groupId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetValidateBeforeCall(realm, groupId, clientId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client-level role mappings for the user or group, and the app (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetAsync(String realm, String groupId, String clientId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetValidateBeforeCall(realm, groupId, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostCall(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostValidateBeforeCall(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost(Async)");
        }

        return adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostCall(realm, groupId, clientId, roleRepresentation, _callback);

    }

    /**
     * Add client-level roles to the user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostWithHttpInfo(realm, groupId, clientId, roleRepresentation);
    }

    /**
     * Add client-level roles to the user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostWithHttpInfo(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostValidateBeforeCall(realm, groupId, clientId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add client-level roles to the user or group role mapping (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostAsync(String realm, String groupId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostValidateBeforeCall(realm, groupId, clientId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetCall(String realm, String userId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetValidateBeforeCall(String realm, String userId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet(Async)");
        }

        return adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetCall(realm, userId, clientId, _callback);

    }

    /**
     * Get available client-level roles that can be mapped to the user or group
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet(String realm, String userId, String clientId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo(realm, userId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get available client-level roles that can be mapped to the user or group
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo(String realm, String userId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetValidateBeforeCall(realm, userId, clientId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available client-level roles that can be mapped to the user or group (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetAsync(String realm, String userId, String clientId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetValidateBeforeCall(realm, userId, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetCall(String realm, String userId, String clientId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetValidateBeforeCall(String realm, String userId, String clientId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet(Async)");
        }

        return adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetCall(realm, userId, clientId, briefRepresentation, _callback);

    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet(String realm, String userId, String clientId, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo(realm, userId, clientId, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo(String realm, String userId, String clientId, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetValidateBeforeCall(realm, userId, clientId, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective client-level role mappings This recurses any composite roles (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetAsync(String realm, String userId, String clientId, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetValidateBeforeCall(realm, userId, clientId, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteCall(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteValidateBeforeCall(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete(Async)");
        }

        return adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteCall(realm, userId, clientId, roleRepresentation, _callback);

    }

    /**
     * Delete client-level roles from user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteWithHttpInfo(realm, userId, clientId, roleRepresentation);
    }

    /**
     * Delete client-level roles from user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteWithHttpInfo(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteValidateBeforeCall(realm, userId, clientId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete client-level roles from user or group role mapping (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteAsync(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteValidateBeforeCall(realm, userId, clientId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetCall(String realm, String userId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetValidateBeforeCall(String realm, String userId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet(Async)");
        }

        return adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetCall(realm, userId, clientId, _callback);

    }

    /**
     * Get client-level role mappings for the user or group, and the app
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet(String realm, String userId, String clientId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetWithHttpInfo(realm, userId, clientId);
        return localVarResp.getData();
    }

    /**
     * Get client-level role mappings for the user or group, and the app
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetWithHttpInfo(String realm, String userId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetValidateBeforeCall(realm, userId, clientId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client-level role mappings for the user or group, and the app (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetAsync(String realm, String userId, String clientId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetValidateBeforeCall(realm, userId, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostCall(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "user-id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostValidateBeforeCall(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost(Async)");
        }

        return adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostCall(realm, userId, clientId, roleRepresentation, _callback);

    }

    /**
     * Add client-level roles to the user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostWithHttpInfo(realm, userId, clientId, roleRepresentation);
    }

    /**
     * Add client-level roles to the user or group role mapping
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostWithHttpInfo(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostValidateBeforeCall(realm, userId, clientId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add client-level roles to the user or group role mapping (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param userId  (required)
     * @param clientId client id (not clientId!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostAsync(String realm, String userId, String clientId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostValidateBeforeCall(realm, userId, clientId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
