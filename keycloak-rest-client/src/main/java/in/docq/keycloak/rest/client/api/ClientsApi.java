/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.AccessToken;
import in.docq.keycloak.rest.client.model.ClientRepresentation;
import in.docq.keycloak.rest.client.model.ClientScopeRepresentation;
import in.docq.keycloak.rest.client.model.CredentialRepresentation;
import in.docq.keycloak.rest.client.model.GlobalRequestResult;
import in.docq.keycloak.rest.client.model.IDToken;
import in.docq.keycloak.rest.client.model.ManagementPermissionReference;
import in.docq.keycloak.rest.client.model.ProtocolMapperEvaluationRepresentation;
import in.docq.keycloak.rest.client.model.RoleRepresentation;
import in.docq.keycloak.rest.client.model.UserRepresentation;
import in.docq.keycloak.rest.client.model.UserSessionRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmClientsClientUuidClientSecretGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/client-secret"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidClientSecretGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidClientSecretGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidClientSecretGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get the client secret
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return CredentialRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CredentialRepresentation adminRealmsRealmClientsClientUuidClientSecretGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<CredentialRepresentation> localVarResp = adminRealmsRealmClientsClientUuidClientSecretGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get the client secret
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;CredentialRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialRepresentation> adminRealmsRealmClientsClientUuidClientSecretGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<CredentialRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the client secret (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretGetAsync(String realm, String clientUuid, final ApiCallback<CredentialRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<CredentialRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidClientSecretPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretPostCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/client-secret"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretPostValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidClientSecretPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidClientSecretPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidClientSecretPostCall(realm, clientUuid, _callback);

    }

    /**
     * Generate a new secret for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return CredentialRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CredentialRepresentation adminRealmsRealmClientsClientUuidClientSecretPost(String realm, String clientUuid) throws ApiException {
        ApiResponse<CredentialRepresentation> localVarResp = adminRealmsRealmClientsClientUuidClientSecretPostWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Generate a new secret for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;CredentialRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialRepresentation> adminRealmsRealmClientsClientUuidClientSecretPostWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretPostValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<CredentialRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a new secret for the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretPostAsync(String realm, String clientUuid, final ApiCallback<CredentialRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretPostValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<CredentialRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidClientSecretRotatedDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidClientSecretRotatedDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidClientSecretRotatedDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteCall(realm, clientUuid, _callback);

    }

    /**
     * Invalidate the rotated secret for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidClientSecretRotatedDelete(String realm, String clientUuid) throws ApiException {
        adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteWithHttpInfo(realm, clientUuid);
    }

    /**
     * Invalidate the rotated secret for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteValidateBeforeCall(realm, clientUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invalidate the rotated secret for the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteAsync(String realm, String clientUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretRotatedDeleteValidateBeforeCall(realm, clientUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidClientSecretRotatedGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretRotatedGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretRotatedGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidClientSecretRotatedGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidClientSecretRotatedGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidClientSecretRotatedGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get the rotated client secret
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return CredentialRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CredentialRepresentation adminRealmsRealmClientsClientUuidClientSecretRotatedGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<CredentialRepresentation> localVarResp = adminRealmsRealmClientsClientUuidClientSecretRotatedGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get the rotated client secret
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;CredentialRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialRepresentation> adminRealmsRealmClientsClientUuidClientSecretRotatedGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretRotatedGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<CredentialRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the rotated client secret (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidClientSecretRotatedGetAsync(String realm, String clientUuid, final ApiCallback<CredentialRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidClientSecretRotatedGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<CredentialRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "clientScopeId" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteValidateBeforeCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteCall(realm, clientUuid, clientScopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete(String realm, String clientUuid, String clientScopeId) throws ApiException {
        adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteWithHttpInfo(realm, clientUuid, clientScopeId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteWithHttpInfo(String realm, String clientUuid, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteValidateBeforeCall(realm, clientUuid, clientScopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteAsync(String realm, String clientUuid, String clientScopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteValidateBeforeCall(realm, clientUuid, clientScopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "clientScopeId" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutValidateBeforeCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutCall(realm, clientUuid, clientScopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut(String realm, String clientUuid, String clientScopeId) throws ApiException {
        adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutWithHttpInfo(realm, clientUuid, clientScopeId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutWithHttpInfo(String realm, String clientUuid, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutValidateBeforeCall(realm, clientUuid, clientScopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutAsync(String realm, String clientUuid, String clientScopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutValidateBeforeCall(realm, clientUuid, clientScopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidDefaultClientScopesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/default-client-scopes"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidDefaultClientScopesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidDefaultClientScopesGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get default client scopes.  Only name and ids are returned.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;ClientScopeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ClientScopeRepresentation> adminRealmsRealmClientsClientUuidDefaultClientScopesGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<ClientScopeRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidDefaultClientScopesGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get default client scopes.  Only name and ids are returned.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;ClientScopeRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClientScopeRepresentation>> adminRealmsRealmClientsClientUuidDefaultClientScopesGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDefaultClientScopesGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<ClientScopeRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default client scopes.  Only name and ids are returned. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDefaultClientScopesGetAsync(String realm, String clientUuid, final ApiCallback<List<ClientScopeRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDefaultClientScopesGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<ClientScopeRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDeleteCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidDeleteValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidDeleteCall(realm, clientUuid, _callback);

    }

    /**
     * Delete the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidDelete(String realm, String clientUuid) throws ApiException {
        adminRealmsRealmClientsClientUuidDeleteWithHttpInfo(realm, clientUuid);
    }

    /**
     * Delete the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidDeleteWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDeleteValidateBeforeCall(realm, clientUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidDeleteAsync(String realm, String clientUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidDeleteValidateBeforeCall(realm, clientUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetCall(String realm, String clientUuid, String scope, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-access-token"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetValidateBeforeCall(String realm, String clientUuid, String scope, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetCall(realm, clientUuid, scope, userId, _callback);

    }

    /**
     * Create JSON with payload of example access token
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @return AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccessToken adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet(String realm, String clientUuid, String scope, String userId) throws ApiException {
        ApiResponse<AccessToken> localVarResp = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetWithHttpInfo(realm, clientUuid, scope, userId);
        return localVarResp.getData();
    }

    /**
     * Create JSON with payload of example access token
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessToken> adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetWithHttpInfo(String realm, String clientUuid, String scope, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetValidateBeforeCall(realm, clientUuid, scope, userId, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create JSON with payload of example access token (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetAsync(String realm, String clientUuid, String scope, String userId, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetValidateBeforeCall(realm, clientUuid, scope, userId, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetCall(String realm, String clientUuid, String scope, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-id-token"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetValidateBeforeCall(String realm, String clientUuid, String scope, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetCall(realm, clientUuid, scope, userId, _callback);

    }

    /**
     * Create JSON with payload of example id token
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @return IDToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IDToken adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet(String realm, String clientUuid, String scope, String userId) throws ApiException {
        ApiResponse<IDToken> localVarResp = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetWithHttpInfo(realm, clientUuid, scope, userId);
        return localVarResp.getData();
    }

    /**
     * Create JSON with payload of example id token
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;IDToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IDToken> adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetWithHttpInfo(String realm, String clientUuid, String scope, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetValidateBeforeCall(realm, clientUuid, scope, userId, null);
        Type localVarReturnType = new TypeToken<IDToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create JSON with payload of example id token (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetAsync(String realm, String clientUuid, String scope, String userId, final ApiCallback<IDToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetValidateBeforeCall(realm, clientUuid, scope, userId, _callback);
        Type localVarReturnType = new TypeToken<IDToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetCall(String realm, String clientUuid, String scope, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-userinfo"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetValidateBeforeCall(String realm, String clientUuid, String scope, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetCall(realm, clientUuid, scope, userId, _callback);

    }

    /**
     * Create JSON with payload of example user info
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet(String realm, String clientUuid, String scope, String userId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetWithHttpInfo(realm, clientUuid, scope, userId);
        return localVarResp.getData();
    }

    /**
     * Create JSON with payload of example user info
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetWithHttpInfo(String realm, String clientUuid, String scope, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetValidateBeforeCall(realm, clientUuid, scope, userId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create JSON with payload of example user info (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetAsync(String realm, String clientUuid, String scope, String userId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetValidateBeforeCall(realm, clientUuid, scope, userId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetCall(String realm, String clientUuid, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/protocol-mappers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetValidateBeforeCall(String realm, String clientUuid, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetCall(realm, clientUuid, scope, _callback);

    }

    /**
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @return List&lt;ProtocolMapperEvaluationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperEvaluationRepresentation> adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet(String realm, String clientUuid, String scope) throws ApiException {
        ApiResponse<List<ProtocolMapperEvaluationRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetWithHttpInfo(realm, clientUuid, scope);
        return localVarResp.getData();
    }

    /**
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @return ApiResponse&lt;List&lt;ProtocolMapperEvaluationRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperEvaluationRepresentation>> adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetWithHttpInfo(String realm, String clientUuid, String scope) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetValidateBeforeCall(realm, clientUuid, scope, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperEvaluationRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client. (asynchronously)
     * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param scope  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetAsync(String realm, String clientUuid, String scope, final ApiCallback<List<ProtocolMapperEvaluationRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetValidateBeforeCall(realm, clientUuid, scope, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperEvaluationRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetCall(String realm, String clientUuid, String roleContainerId, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/granted"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "roleContainerId" + "}", localVarApiClient.escapeString(roleContainerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetValidateBeforeCall(String realm, String clientUuid, String roleContainerId, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(Async)");
        }

        // verify the required parameter 'roleContainerId' is set
        if (roleContainerId == null) {
            throw new ApiException("Missing the required parameter 'roleContainerId' when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetCall(realm, clientUuid, roleContainerId, scope, _callback);

    }

    /**
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(String realm, String clientUuid, String roleContainerId, String scope) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetWithHttpInfo(realm, clientUuid, roleContainerId, scope);
        return localVarResp.getData();
    }

    /**
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetWithHttpInfo(String realm, String clientUuid, String roleContainerId, String scope) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetValidateBeforeCall(realm, clientUuid, roleContainerId, scope, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him. (asynchronously)
     * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetAsync(String realm, String clientUuid, String roleContainerId, String scope, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetValidateBeforeCall(realm, clientUuid, roleContainerId, scope, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetCall(String realm, String clientUuid, String roleContainerId, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "roleContainerId" + "}", localVarApiClient.escapeString(roleContainerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetValidateBeforeCall(String realm, String clientUuid, String roleContainerId, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(Async)");
        }

        // verify the required parameter 'roleContainerId' is set
        if (roleContainerId == null) {
            throw new ApiException("Missing the required parameter 'roleContainerId' when calling adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetCall(realm, clientUuid, roleContainerId, scope, _callback);

    }

    /**
     * Get roles, which this client doesn&#39;t have scope for and can&#39;t have them in the accessToken issued for him.
     * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(String realm, String clientUuid, String roleContainerId, String scope) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetWithHttpInfo(realm, clientUuid, roleContainerId, scope);
        return localVarResp.getData();
    }

    /**
     * Get roles, which this client doesn&#39;t have scope for and can&#39;t have them in the accessToken issued for him.
     * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetWithHttpInfo(String realm, String clientUuid, String roleContainerId, String scope) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetValidateBeforeCall(realm, clientUuid, roleContainerId, scope, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get roles, which this client doesn&#39;t have scope for and can&#39;t have them in the accessToken issued for him. (asynchronously)
     * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleContainerId either realm name OR client UUID (required)
     * @param scope  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetAsync(String realm, String clientUuid, String roleContainerId, String scope, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetValidateBeforeCall(realm, clientUuid, roleContainerId, scope, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get representation of the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ClientRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClientRepresentation adminRealmsRealmClientsClientUuidGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<ClientRepresentation> localVarResp = adminRealmsRealmClientsClientUuidGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get representation of the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;ClientRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientRepresentation> adminRealmsRealmClientsClientUuidGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<ClientRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get representation of the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidGetAsync(String realm, String clientUuid, final ApiCallback<ClientRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<ClientRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetCall(String realm, String clientUuid, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/installation/providers/{providerId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetValidateBeforeCall(String realm, String clientUuid, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetCall(realm, clientUuid, providerId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet(String realm, String clientUuid, String providerId) throws ApiException {
        adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetWithHttpInfo(realm, clientUuid, providerId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetWithHttpInfo(String realm, String clientUuid, String providerId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetValidateBeforeCall(realm, clientUuid, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetAsync(String realm, String clientUuid, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetValidateBeforeCall(realm, clientUuid, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidManagementPermissionsGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidManagementPermissionsGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidManagementPermissionsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidManagementPermissionsGetCall(realm, clientUuid, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmClientsClientUuidManagementPermissionsGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmClientsClientUuidManagementPermissionsGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmClientsClientUuidManagementPermissionsGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidManagementPermissionsGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidManagementPermissionsGetAsync(String realm, String clientUuid, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidManagementPermissionsGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param managementPermissionReference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidManagementPermissionsPutCall(String realm, String clientUuid, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidManagementPermissionsPutValidateBeforeCall(String realm, String clientUuid, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidManagementPermissionsPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidManagementPermissionsPutCall(realm, clientUuid, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param managementPermissionReference  (optional)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmClientsClientUuidManagementPermissionsPut(String realm, String clientUuid, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmClientsClientUuidManagementPermissionsPutWithHttpInfo(realm, clientUuid, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param managementPermissionReference  (optional)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmClientsClientUuidManagementPermissionsPutWithHttpInfo(String realm, String clientUuid, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidManagementPermissionsPutValidateBeforeCall(realm, clientUuid, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param managementPermissionReference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidManagementPermissionsPutAsync(String realm, String clientUuid, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidManagementPermissionsPutValidateBeforeCall(realm, clientUuid, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidNodesNodeDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param node  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidNodesNodeDeleteCall(String realm, String clientUuid, String node, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/nodes/{node}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidNodesNodeDeleteValidateBeforeCall(String realm, String clientUuid, String node, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidNodesNodeDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidNodesNodeDelete(Async)");
        }

        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling adminRealmsRealmClientsClientUuidNodesNodeDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidNodesNodeDeleteCall(realm, clientUuid, node, _callback);

    }

    /**
     * Unregister a cluster node from the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param node  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidNodesNodeDelete(String realm, String clientUuid, String node) throws ApiException {
        adminRealmsRealmClientsClientUuidNodesNodeDeleteWithHttpInfo(realm, clientUuid, node);
    }

    /**
     * Unregister a cluster node from the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param node  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidNodesNodeDeleteWithHttpInfo(String realm, String clientUuid, String node) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidNodesNodeDeleteValidateBeforeCall(realm, clientUuid, node, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister a cluster node from the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param node  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidNodesNodeDeleteAsync(String realm, String clientUuid, String node, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidNodesNodeDeleteValidateBeforeCall(realm, clientUuid, node, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidNodesPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidNodesPostCall(String realm, String clientUuid, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/nodes"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidNodesPostValidateBeforeCall(String realm, String clientUuid, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidNodesPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidNodesPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidNodesPostCall(realm, clientUuid, requestBody, _callback);

    }

    /**
     * Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidNodesPost(String realm, String clientUuid, Map<String, String> requestBody) throws ApiException {
        adminRealmsRealmClientsClientUuidNodesPostWithHttpInfo(realm, clientUuid, requestBody);
    }

    /**
     * Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidNodesPostWithHttpInfo(String realm, String clientUuid, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidNodesPostValidateBeforeCall(realm, clientUuid, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidNodesPostAsync(String realm, String clientUuid, Map<String, String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidNodesPostValidateBeforeCall(realm, clientUuid, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidOfflineSessionCountGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOfflineSessionCountGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/offline-session-count"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidOfflineSessionCountGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidOfflineSessionCountGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidOfflineSessionCountGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidOfflineSessionCountGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get application offline session count Returns a number of offline user sessions associated with this client { \&quot;count\&quot;: number }
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Long> adminRealmsRealmClientsClientUuidOfflineSessionCountGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<Map<String, Long>> localVarResp = adminRealmsRealmClientsClientUuidOfflineSessionCountGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get application offline session count Returns a number of offline user sessions associated with this client { \&quot;count\&quot;: number }
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Long>> adminRealmsRealmClientsClientUuidOfflineSessionCountGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOfflineSessionCountGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get application offline session count Returns a number of offline user sessions associated with this client { \&quot;count\&quot;: number } (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOfflineSessionCountGetAsync(String realm, String clientUuid, final ApiCallback<Map<String, Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOfflineSessionCountGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidOfflineSessionsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOfflineSessionsGetCall(String realm, String clientUuid, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/offline-sessions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidOfflineSessionsGetValidateBeforeCall(String realm, String clientUuid, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidOfflineSessionsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidOfflineSessionsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidOfflineSessionsGetCall(realm, clientUuid, first, max, _callback);

    }

    /**
     * Get offline sessions for client Returns a list of offline user sessions associated with this client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @return List&lt;UserSessionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSessionRepresentation> adminRealmsRealmClientsClientUuidOfflineSessionsGet(String realm, String clientUuid, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserSessionRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidOfflineSessionsGetWithHttpInfo(realm, clientUuid, first, max);
        return localVarResp.getData();
    }

    /**
     * Get offline sessions for client Returns a list of offline user sessions associated with this client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @return ApiResponse&lt;List&lt;UserSessionRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSessionRepresentation>> adminRealmsRealmClientsClientUuidOfflineSessionsGetWithHttpInfo(String realm, String clientUuid, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOfflineSessionsGetValidateBeforeCall(realm, clientUuid, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get offline sessions for client Returns a list of offline user sessions associated with this client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOfflineSessionsGetAsync(String realm, String clientUuid, Integer first, Integer max, final ApiCallback<List<UserSessionRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOfflineSessionsGetValidateBeforeCall(realm, clientUuid, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "clientScopeId" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteValidateBeforeCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteCall(realm, clientUuid, clientScopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete(String realm, String clientUuid, String clientScopeId) throws ApiException {
        adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteWithHttpInfo(realm, clientUuid, clientScopeId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteWithHttpInfo(String realm, String clientUuid, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteValidateBeforeCall(realm, clientUuid, clientScopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteAsync(String realm, String clientUuid, String clientScopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteValidateBeforeCall(realm, clientUuid, clientScopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "clientScopeId" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutValidateBeforeCall(String realm, String clientUuid, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutCall(realm, clientUuid, clientScopeId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut(String realm, String clientUuid, String clientScopeId) throws ApiException {
        adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutWithHttpInfo(realm, clientUuid, clientScopeId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutWithHttpInfo(String realm, String clientUuid, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutValidateBeforeCall(realm, clientUuid, clientScopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutAsync(String realm, String clientUuid, String clientScopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutValidateBeforeCall(realm, clientUuid, clientScopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidOptionalClientScopesGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidOptionalClientScopesGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidOptionalClientScopesGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get optional client scopes.  Only name and ids are returned.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;ClientScopeRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ClientScopeRepresentation> adminRealmsRealmClientsClientUuidOptionalClientScopesGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<ClientScopeRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidOptionalClientScopesGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get optional client scopes.  Only name and ids are returned.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;ClientScopeRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClientScopeRepresentation>> adminRealmsRealmClientsClientUuidOptionalClientScopesGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOptionalClientScopesGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<ClientScopeRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get optional client scopes.  Only name and ids are returned. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidOptionalClientScopesGetAsync(String realm, String clientUuid, final ApiCallback<List<ClientScopeRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidOptionalClientScopesGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<ClientScopeRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidPushRevocationPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidPushRevocationPostCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/push-revocation"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidPushRevocationPostValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidPushRevocationPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidPushRevocationPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidPushRevocationPostCall(realm, clientUuid, _callback);

    }

    /**
     * Push the client&#39;s revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return GlobalRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GlobalRequestResult adminRealmsRealmClientsClientUuidPushRevocationPost(String realm, String clientUuid) throws ApiException {
        ApiResponse<GlobalRequestResult> localVarResp = adminRealmsRealmClientsClientUuidPushRevocationPostWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Push the client&#39;s revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;GlobalRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalRequestResult> adminRealmsRealmClientsClientUuidPushRevocationPostWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidPushRevocationPostValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<GlobalRequestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Push the client&#39;s revocation policy to its admin URL If the client has an admin URL, push revocation policy to it. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidPushRevocationPostAsync(String realm, String clientUuid, final ApiCallback<GlobalRequestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidPushRevocationPostValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<GlobalRequestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidPutCall(String realm, String clientUuid, ClientRepresentation clientRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidPutValidateBeforeCall(String realm, String clientUuid, ClientRepresentation clientRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidPutCall(realm, clientUuid, clientRepresentation, _callback);

    }

    /**
     * Update the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidPut(String realm, String clientUuid, ClientRepresentation clientRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidPutWithHttpInfo(realm, clientUuid, clientRepresentation);
    }

    /**
     * Update the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidPutWithHttpInfo(String realm, String clientUuid, ClientRepresentation clientRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidPutValidateBeforeCall(realm, clientUuid, clientRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param clientRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidPutAsync(String realm, String clientUuid, ClientRepresentation clientRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidPutValidateBeforeCall(realm, clientUuid, clientRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/registration-access-token"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostCall(realm, clientUuid, _callback);

    }

    /**
     * Generate a new registration access token for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ClientRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClientRepresentation adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost(String realm, String clientUuid) throws ApiException {
        ApiResponse<ClientRepresentation> localVarResp = adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Generate a new registration access token for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;ClientRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientRepresentation> adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<ClientRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a new registration access token for the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostAsync(String realm, String clientUuid, final ApiCallback<ClientRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidRegistrationAccessTokenPostValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<ClientRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidServiceAccountUserGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidServiceAccountUserGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/service-account-user"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidServiceAccountUserGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidServiceAccountUserGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidServiceAccountUserGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidServiceAccountUserGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get a user dedicated to the service account
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return UserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserRepresentation adminRealmsRealmClientsClientUuidServiceAccountUserGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<UserRepresentation> localVarResp = adminRealmsRealmClientsClientUuidServiceAccountUserGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get a user dedicated to the service account
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRepresentation> adminRealmsRealmClientsClientUuidServiceAccountUserGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidServiceAccountUserGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user dedicated to the service account (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidServiceAccountUserGetAsync(String realm, String clientUuid, final ApiCallback<UserRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidServiceAccountUserGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidSessionCountGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidSessionCountGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/session-count"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidSessionCountGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidSessionCountGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidSessionCountGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidSessionCountGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get application session count Returns a number of user sessions associated with this client { \&quot;count\&quot;: number }
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Long> adminRealmsRealmClientsClientUuidSessionCountGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<Map<String, Long>> localVarResp = adminRealmsRealmClientsClientUuidSessionCountGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get application session count Returns a number of user sessions associated with this client { \&quot;count\&quot;: number }
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Long>> adminRealmsRealmClientsClientUuidSessionCountGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidSessionCountGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get application session count Returns a number of user sessions associated with this client { \&quot;count\&quot;: number } (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidSessionCountGetAsync(String realm, String clientUuid, final ApiCallback<Map<String, Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidSessionCountGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidTestNodesAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidTestNodesAvailableGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/test-nodes-available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidTestNodesAvailableGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidTestNodesAvailableGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidTestNodesAvailableGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidTestNodesAvailableGetCall(realm, clientUuid, _callback);

    }

    /**
     * Test if registered cluster nodes are available Tests availability by sending &#39;ping&#39; request to all cluster nodes.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return GlobalRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GlobalRequestResult adminRealmsRealmClientsClientUuidTestNodesAvailableGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<GlobalRequestResult> localVarResp = adminRealmsRealmClientsClientUuidTestNodesAvailableGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Test if registered cluster nodes are available Tests availability by sending &#39;ping&#39; request to all cluster nodes.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;GlobalRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalRequestResult> adminRealmsRealmClientsClientUuidTestNodesAvailableGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidTestNodesAvailableGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<GlobalRequestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test if registered cluster nodes are available Tests availability by sending &#39;ping&#39; request to all cluster nodes. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidTestNodesAvailableGetAsync(String realm, String clientUuid, final ApiCallback<GlobalRequestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidTestNodesAvailableGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<GlobalRequestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidUserSessionsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidUserSessionsGetCall(String realm, String clientUuid, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/user-sessions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidUserSessionsGetValidateBeforeCall(String realm, String clientUuid, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidUserSessionsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidUserSessionsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidUserSessionsGetCall(realm, clientUuid, first, max, _callback);

    }

    /**
     * Get user sessions for client Returns a list of user sessions associated with this client 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @return List&lt;UserSessionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSessionRepresentation> adminRealmsRealmClientsClientUuidUserSessionsGet(String realm, String clientUuid, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserSessionRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidUserSessionsGetWithHttpInfo(realm, clientUuid, first, max);
        return localVarResp.getData();
    }

    /**
     * Get user sessions for client Returns a list of user sessions associated with this client 
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @return ApiResponse&lt;List&lt;UserSessionRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSessionRepresentation>> adminRealmsRealmClientsClientUuidUserSessionsGetWithHttpInfo(String realm, String clientUuid, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidUserSessionsGetValidateBeforeCall(realm, clientUuid, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user sessions for client Returns a list of user sessions associated with this client  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param first Paging offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidUserSessionsGetAsync(String realm, String clientUuid, Integer first, Integer max, final ApiCallback<List<UserSessionRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidUserSessionsGetValidateBeforeCall(realm, clientUuid, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserSessionRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsGet
     * @param realm realm name (not id!) (required)
     * @param clientId filter by clientId (optional)
     * @param first the first result (optional)
     * @param max the max results to return (optional)
     * @param q  (optional)
     * @param search whether this is a search query or a getClientById query (optional, default to false)
     * @param viewableOnly filter clients that cannot be viewed in full by admin (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsGetCall(String realm, String clientId, Integer first, Integer max, String q, Boolean search, Boolean viewableOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (viewableOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewableOnly", viewableOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsGetValidateBeforeCall(String realm, String clientId, Integer first, Integer max, String q, Boolean search, Boolean viewableOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsGet(Async)");
        }

        return adminRealmsRealmClientsGetCall(realm, clientId, first, max, q, search, viewableOnly, _callback);

    }

    /**
     * Get clients belonging to the realm.
     * If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
     * @param realm realm name (not id!) (required)
     * @param clientId filter by clientId (optional)
     * @param first the first result (optional)
     * @param max the max results to return (optional)
     * @param q  (optional)
     * @param search whether this is a search query or a getClientById query (optional, default to false)
     * @param viewableOnly filter clients that cannot be viewed in full by admin (optional, default to false)
     * @return List&lt;ClientRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ClientRepresentation> adminRealmsRealmClientsGet(String realm, String clientId, Integer first, Integer max, String q, Boolean search, Boolean viewableOnly) throws ApiException {
        ApiResponse<List<ClientRepresentation>> localVarResp = adminRealmsRealmClientsGetWithHttpInfo(realm, clientId, first, max, q, search, viewableOnly);
        return localVarResp.getData();
    }

    /**
     * Get clients belonging to the realm.
     * If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
     * @param realm realm name (not id!) (required)
     * @param clientId filter by clientId (optional)
     * @param first the first result (optional)
     * @param max the max results to return (optional)
     * @param q  (optional)
     * @param search whether this is a search query or a getClientById query (optional, default to false)
     * @param viewableOnly filter clients that cannot be viewed in full by admin (optional, default to false)
     * @return ApiResponse&lt;List&lt;ClientRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClientRepresentation>> adminRealmsRealmClientsGetWithHttpInfo(String realm, String clientId, Integer first, Integer max, String q, Boolean search, Boolean viewableOnly) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsGetValidateBeforeCall(realm, clientId, first, max, q, search, viewableOnly, null);
        Type localVarReturnType = new TypeToken<List<ClientRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get clients belonging to the realm. (asynchronously)
     * If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
     * @param realm realm name (not id!) (required)
     * @param clientId filter by clientId (optional)
     * @param first the first result (optional)
     * @param max the max results to return (optional)
     * @param q  (optional)
     * @param search whether this is a search query or a getClientById query (optional, default to false)
     * @param viewableOnly filter clients that cannot be viewed in full by admin (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsGetAsync(String realm, String clientId, Integer first, Integer max, String q, Boolean search, Boolean viewableOnly, final ApiCallback<List<ClientRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsGetValidateBeforeCall(realm, clientId, first, max, q, search, viewableOnly, _callback);
        Type localVarReturnType = new TypeToken<List<ClientRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsPost
     * @param realm realm name (not id!) (required)
     * @param clientRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsPostCall(String realm, ClientRepresentation clientRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsPostValidateBeforeCall(String realm, ClientRepresentation clientRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsPost(Async)");
        }

        return adminRealmsRealmClientsPostCall(realm, clientRepresentation, _callback);

    }

    /**
     * Create a new client Client’s client_id must be unique!
     * 
     * @param realm realm name (not id!) (required)
     * @param clientRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsPost(String realm, ClientRepresentation clientRepresentation) throws ApiException {
        adminRealmsRealmClientsPostWithHttpInfo(realm, clientRepresentation);
    }

    /**
     * Create a new client Client’s client_id must be unique!
     * 
     * @param realm realm name (not id!) (required)
     * @param clientRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsPostWithHttpInfo(String realm, ClientRepresentation clientRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsPostValidateBeforeCall(realm, clientRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new client Client’s client_id must be unique! (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsPostAsync(String realm, ClientRepresentation clientRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsPostValidateBeforeCall(realm, clientRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
