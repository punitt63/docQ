/*
 * Health Facility Token API
 * API to obtain access tokens using client credentials flow
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.*;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import in.docq.keycloak.rest.client.model.GetAccessToken200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionStage;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAccessToken
     * @param grantType The grant type for the token request (required)
     * @param clientId The client identifier (required)
     * @param clientSecret The client secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessTokenCall(String grantType, String clientId, String clientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/realms/health-facility/protocol/openid-connect/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessTokenValidateBeforeCall(String grantType, String clientId, String clientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling getAccessToken(Async)");
        }

        return getAccessTokenCall(grantType, clientId, clientSecret, _callback);

    }

    /**
     * Obtain access token
     * Get an access token using client credentials grant type
     * @param grantType The grant type for the token request (required)
     * @param clientId The client identifier (required)
     * @param clientSecret The client secret (required)
     * @return GetAccessToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public GetAccessToken200Response getAccessToken(String grantType, String clientId, String clientSecret) throws ApiException {
        ApiResponse<GetAccessToken200Response> localVarResp = getAccessTokenWithHttpInfo(grantType, clientId, clientSecret);
        return localVarResp.getData();
    }

    /**
     * Obtain access token
     * Get an access token using client credentials grant type
     * @param grantType The grant type for the token request (required)
     * @param clientId The client identifier (required)
     * @param clientSecret The client secret (required)
     * @return ApiResponse&lt;GetAccessToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAccessToken200Response> getAccessTokenWithHttpInfo(String grantType, String clientId, String clientSecret) throws ApiException {
        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(grantType, clientId, clientSecret, null);
        Type localVarReturnType = new TypeToken<GetAccessToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain access token (asynchronously)
     * Get an access token using client credentials grant type
     * @param grantType The grant type for the token request (required)
     * @param clientId The client identifier (required)
     * @param clientSecret The client secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful token response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<GetAccessToken200Response> getAccessTokenAsync(String grantType, String clientId, String clientSecret) {

        try {
            FutureApiCallBack<GetAccessToken200Response> futureAPICallback = FutureApiCallBack.newCallback();
            okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(grantType, clientId, clientSecret, futureAPICallback);
            Type localVarReturnType = new TypeToken<GetAccessToken200Response>() {
            }.getType();
            localVarApiClient.executeAsync(localVarCall, localVarReturnType, futureAPICallback);
            return futureAPICallback.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }
}
