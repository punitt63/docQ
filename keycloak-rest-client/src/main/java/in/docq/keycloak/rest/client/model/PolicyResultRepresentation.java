/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import in.docq.keycloak.rest.client.model.DecisionEffect;
import in.docq.keycloak.rest.client.model.PolicyRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;

import in.docq.keycloak.rest.client.JSON;

/**
 * PolicyResultRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PolicyResultRepresentation {
  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nullable
  private PolicyRepresentation policy;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private DecisionEffect status;

  public static final String SERIALIZED_NAME_ASSOCIATED_POLICIES = "associatedPolicies";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_POLICIES)
  @javax.annotation.Nullable
  private List<PolicyResultRepresentation> associatedPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  @javax.annotation.Nullable
  private Set<String> scopes = new LinkedHashSet<>();

  public PolicyResultRepresentation() {
  }

  public PolicyResultRepresentation policy(@javax.annotation.Nullable PolicyRepresentation policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public PolicyRepresentation getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nullable PolicyRepresentation policy) {
    this.policy = policy;
  }


  public PolicyResultRepresentation status(@javax.annotation.Nullable DecisionEffect status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DecisionEffect getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable DecisionEffect status) {
    this.status = status;
  }


  public PolicyResultRepresentation associatedPolicies(@javax.annotation.Nullable List<PolicyResultRepresentation> associatedPolicies) {
    this.associatedPolicies = associatedPolicies;
    return this;
  }

  public PolicyResultRepresentation addAssociatedPoliciesItem(PolicyResultRepresentation associatedPoliciesItem) {
    if (this.associatedPolicies == null) {
      this.associatedPolicies = new ArrayList<>();
    }
    this.associatedPolicies.add(associatedPoliciesItem);
    return this;
  }

  /**
   * Get associatedPolicies
   * @return associatedPolicies
   */
  @javax.annotation.Nullable
  public List<PolicyResultRepresentation> getAssociatedPolicies() {
    return associatedPolicies;
  }

  public void setAssociatedPolicies(@javax.annotation.Nullable List<PolicyResultRepresentation> associatedPolicies) {
    this.associatedPolicies = associatedPolicies;
  }


  public PolicyResultRepresentation scopes(@javax.annotation.Nullable Set<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public PolicyResultRepresentation addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new LinkedHashSet<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public Set<String> getScopes() {
    return scopes;
  }

  public void setScopes(@javax.annotation.Nullable Set<String> scopes) {
    this.scopes = scopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyResultRepresentation policyResultRepresentation = (PolicyResultRepresentation) o;
    return Objects.equals(this.policy, policyResultRepresentation.policy) &&
        Objects.equals(this.status, policyResultRepresentation.status) &&
        Objects.equals(this.associatedPolicies, policyResultRepresentation.associatedPolicies) &&
        Objects.equals(this.scopes, policyResultRepresentation.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policy, status, associatedPolicies, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyResultRepresentation {\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    associatedPolicies: ").append(toIndentedString(associatedPolicies)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policy");
    openapiFields.add("status");
    openapiFields.add("associatedPolicies");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyResultRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyResultRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyResultRepresentation is not found in the empty JSON string", PolicyResultRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyResultRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyResultRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        PolicyRepresentation.validateJsonElement(jsonObj.get("policy"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DecisionEffect.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("associatedPolicies") != null && !jsonObj.get("associatedPolicies").isJsonNull()) {
        JsonArray jsonArrayassociatedPolicies = jsonObj.getAsJsonArray("associatedPolicies");
        if (jsonArrayassociatedPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associatedPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associatedPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("associatedPolicies").toString()));
          }

          // validate the optional field `associatedPolicies` (array)
          for (int i = 0; i < jsonArrayassociatedPolicies.size(); i++) {
            PolicyResultRepresentation.validateJsonElement(jsonArrayassociatedPolicies.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyResultRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyResultRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyResultRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyResultRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyResultRepresentation>() {
           @Override
           public void write(JsonWriter out, PolicyResultRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyResultRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyResultRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyResultRepresentation
   * @throws IOException if the JSON string is invalid with respect to PolicyResultRepresentation
   */
  public static PolicyResultRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyResultRepresentation.class);
  }

  /**
   * Convert an instance of PolicyResultRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

