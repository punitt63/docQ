/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import in.docq.keycloak.rest.client.model.UPAttributePermissions;
import in.docq.keycloak.rest.client.model.UPAttributeRequired;
import in.docq.keycloak.rest.client.model.UPAttributeSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * UPAttribute
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class UPAttribute {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_VALIDATIONS = "validations";
  @SerializedName(SERIALIZED_NAME_VALIDATIONS)
  @javax.annotation.Nullable
  private Map<String, Map<String, Object>> validations = new HashMap<>();

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  @javax.annotation.Nullable
  private Map<String, Object> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  @javax.annotation.Nullable
  private UPAttributeRequired required;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  @javax.annotation.Nullable
  private UPAttributePermissions permissions;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  @javax.annotation.Nullable
  private UPAttributeSelector selector;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  @javax.annotation.Nullable
  private String group;

  public static final String SERIALIZED_NAME_MULTIVALUED = "multivalued";
  @SerializedName(SERIALIZED_NAME_MULTIVALUED)
  @javax.annotation.Nullable
  private Boolean multivalued;

  public UPAttribute() {
  }

  public UPAttribute name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UPAttribute displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public UPAttribute validations(@javax.annotation.Nullable Map<String, Map<String, Object>> validations) {
    this.validations = validations;
    return this;
  }

  public UPAttribute putValidationsItem(String key, Map<String, Object> validationsItem) {
    if (this.validations == null) {
      this.validations = new HashMap<>();
    }
    this.validations.put(key, validationsItem);
    return this;
  }

  /**
   * Get validations
   * @return validations
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Object>> getValidations() {
    return validations;
  }

  public void setValidations(@javax.annotation.Nullable Map<String, Map<String, Object>> validations) {
    this.validations = validations;
  }


  public UPAttribute annotations(@javax.annotation.Nullable Map<String, Object> annotations) {
    this.annotations = annotations;
    return this;
  }

  public UPAttribute putAnnotationsItem(String key, Object annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(@javax.annotation.Nullable Map<String, Object> annotations) {
    this.annotations = annotations;
  }


  public UPAttribute required(@javax.annotation.Nullable UPAttributeRequired required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public UPAttributeRequired getRequired() {
    return required;
  }

  public void setRequired(@javax.annotation.Nullable UPAttributeRequired required) {
    this.required = required;
  }


  public UPAttribute permissions(@javax.annotation.Nullable UPAttributePermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public UPAttributePermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(@javax.annotation.Nullable UPAttributePermissions permissions) {
    this.permissions = permissions;
  }


  public UPAttribute selector(@javax.annotation.Nullable UPAttributeSelector selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Get selector
   * @return selector
   */
  @javax.annotation.Nullable
  public UPAttributeSelector getSelector() {
    return selector;
  }

  public void setSelector(@javax.annotation.Nullable UPAttributeSelector selector) {
    this.selector = selector;
  }


  public UPAttribute group(@javax.annotation.Nullable String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(@javax.annotation.Nullable String group) {
    this.group = group;
  }


  public UPAttribute multivalued(@javax.annotation.Nullable Boolean multivalued) {
    this.multivalued = multivalued;
    return this;
  }

  /**
   * Get multivalued
   * @return multivalued
   */
  @javax.annotation.Nullable
  public Boolean getMultivalued() {
    return multivalued;
  }

  public void setMultivalued(@javax.annotation.Nullable Boolean multivalued) {
    this.multivalued = multivalued;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UPAttribute upAttribute = (UPAttribute) o;
    return Objects.equals(this.name, upAttribute.name) &&
        Objects.equals(this.displayName, upAttribute.displayName) &&
        Objects.equals(this.validations, upAttribute.validations) &&
        Objects.equals(this.annotations, upAttribute.annotations) &&
        Objects.equals(this.required, upAttribute.required) &&
        Objects.equals(this.permissions, upAttribute.permissions) &&
        Objects.equals(this.selector, upAttribute.selector) &&
        Objects.equals(this.group, upAttribute.group) &&
        Objects.equals(this.multivalued, upAttribute.multivalued);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, validations, annotations, required, permissions, selector, group, multivalued);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UPAttribute {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    validations: ").append(toIndentedString(validations)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    multivalued: ").append(toIndentedString(multivalued)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("validations");
    openapiFields.add("annotations");
    openapiFields.add("required");
    openapiFields.add("permissions");
    openapiFields.add("selector");
    openapiFields.add("group");
    openapiFields.add("multivalued");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UPAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UPAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UPAttribute is not found in the empty JSON string", UPAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UPAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UPAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `required`
      if (jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull()) {
        UPAttributeRequired.validateJsonElement(jsonObj.get("required"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        UPAttributePermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      // validate the optional field `selector`
      if (jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) {
        UPAttributeSelector.validateJsonElement(jsonObj.get("selector"));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UPAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UPAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UPAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UPAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<UPAttribute>() {
           @Override
           public void write(JsonWriter out, UPAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UPAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UPAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UPAttribute
   * @throws IOException if the JSON string is invalid with respect to UPAttribute
   */
  public static UPAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UPAttribute.class);
  }

  /**
   * Convert an instance of UPAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

