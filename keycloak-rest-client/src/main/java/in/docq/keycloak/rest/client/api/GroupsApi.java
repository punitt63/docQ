/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.GroupRepresentation;
import in.docq.keycloak.rest.client.model.ManagementPermissionReference;
import in.docq.keycloak.rest.client.model.UserRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmGroupsCountGet
     * @param realm realm name (not id!) (required)
     * @param search  (optional)
     * @param top  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsCountGetCall(String realm, String search, Boolean top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/count"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsCountGetValidateBeforeCall(String realm, String search, Boolean top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsCountGet(Async)");
        }

        return adminRealmsRealmGroupsCountGetCall(realm, search, top, _callback);

    }

    /**
     * Returns the groups counts.
     * 
     * @param realm realm name (not id!) (required)
     * @param search  (optional)
     * @param top  (optional, default to false)
     * @return Map&lt;String, Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Long> adminRealmsRealmGroupsCountGet(String realm, String search, Boolean top) throws ApiException {
        ApiResponse<Map<String, Long>> localVarResp = adminRealmsRealmGroupsCountGetWithHttpInfo(realm, search, top);
        return localVarResp.getData();
    }

    /**
     * Returns the groups counts.
     * 
     * @param realm realm name (not id!) (required)
     * @param search  (optional)
     * @param top  (optional, default to false)
     * @return ApiResponse&lt;Map&lt;String, Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Long>> adminRealmsRealmGroupsCountGetWithHttpInfo(String realm, String search, Boolean top) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsCountGetValidateBeforeCall(realm, search, top, null);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the groups counts. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param search  (optional)
     * @param top  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsCountGetAsync(String realm, String search, Boolean top, final ApiCallback<Map<String, Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsCountGetValidateBeforeCall(realm, search, top, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGet
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param exact  (optional, default to false)
     * @param first  (optional)
     * @param max  (optional)
     * @param populateHierarchy  (optional, default to true)
     * @param q  (optional)
     * @param search  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGetCall(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, Boolean populateHierarchy, String q, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (populateHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("populateHierarchy", populateHierarchy));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGetValidateBeforeCall(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, Boolean populateHierarchy, String q, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGet(Async)");
        }

        return adminRealmsRealmGroupsGetCall(realm, briefRepresentation, exact, first, max, populateHierarchy, q, search, _callback);

    }

    /**
     * Get group hierarchy.  Only &#x60;name&#x60; and &#x60;id&#x60; are returned.  &#x60;subGroups&#x60; are only returned when using the &#x60;search&#x60; or &#x60;q&#x60; parameter. If none of these parameters is provided, the top-level groups are returned without &#x60;subGroups&#x60; being filled.
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param exact  (optional, default to false)
     * @param first  (optional)
     * @param max  (optional)
     * @param populateHierarchy  (optional, default to true)
     * @param q  (optional)
     * @param search  (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> adminRealmsRealmGroupsGet(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, Boolean populateHierarchy, String q, String search) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = adminRealmsRealmGroupsGetWithHttpInfo(realm, briefRepresentation, exact, first, max, populateHierarchy, q, search);
        return localVarResp.getData();
    }

    /**
     * Get group hierarchy.  Only &#x60;name&#x60; and &#x60;id&#x60; are returned.  &#x60;subGroups&#x60; are only returned when using the &#x60;search&#x60; or &#x60;q&#x60; parameter. If none of these parameters is provided, the top-level groups are returned without &#x60;subGroups&#x60; being filled.
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param exact  (optional, default to false)
     * @param first  (optional)
     * @param max  (optional)
     * @param populateHierarchy  (optional, default to true)
     * @param q  (optional)
     * @param search  (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> adminRealmsRealmGroupsGetWithHttpInfo(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, Boolean populateHierarchy, String q, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGetValidateBeforeCall(realm, briefRepresentation, exact, first, max, populateHierarchy, q, search, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group hierarchy.  Only &#x60;name&#x60; and &#x60;id&#x60; are returned.  &#x60;subGroups&#x60; are only returned when using the &#x60;search&#x60; or &#x60;q&#x60; parameter. If none of these parameters is provided, the top-level groups are returned without &#x60;subGroups&#x60; being filled. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation  (optional, default to true)
     * @param exact  (optional, default to false)
     * @param first  (optional)
     * @param max  (optional)
     * @param populateHierarchy  (optional, default to true)
     * @param q  (optional)
     * @param search  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGetAsync(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, Boolean populateHierarchy, String q, String search, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGetValidateBeforeCall(realm, briefRepresentation, exact, first, max, populateHierarchy, q, search, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdChildrenGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Boolean which defines whether brief groups representations are returned or not (default: false) (optional, default to false)
     * @param exact Boolean which defines whether the params \&quot;search\&quot; must match exactly or not (optional)
     * @param first The position of the first result to be returned (pagination offset). (optional)
     * @param max The maximum number of results that are to be returned. Defaults to 10 (optional)
     * @param search A String representing either an exact group name or a partial name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdChildrenGetCall(String realm, String groupId, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/children"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdChildrenGetValidateBeforeCall(String realm, String groupId, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdChildrenGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdChildrenGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdChildrenGetCall(realm, groupId, briefRepresentation, exact, first, max, search, _callback);

    }

    /**
     * Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Boolean which defines whether brief groups representations are returned or not (default: false) (optional, default to false)
     * @param exact Boolean which defines whether the params \&quot;search\&quot; must match exactly or not (optional)
     * @param first The position of the first result to be returned (pagination offset). (optional)
     * @param max The maximum number of results that are to be returned. Defaults to 10 (optional)
     * @param search A String representing either an exact group name or a partial name (optional)
     * @return List&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRepresentation> adminRealmsRealmGroupsGroupIdChildrenGet(String realm, String groupId, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String search) throws ApiException {
        ApiResponse<List<GroupRepresentation>> localVarResp = adminRealmsRealmGroupsGroupIdChildrenGetWithHttpInfo(realm, groupId, briefRepresentation, exact, first, max, search);
        return localVarResp.getData();
    }

    /**
     * Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Boolean which defines whether brief groups representations are returned or not (default: false) (optional, default to false)
     * @param exact Boolean which defines whether the params \&quot;search\&quot; must match exactly or not (optional)
     * @param first The position of the first result to be returned (pagination offset). (optional)
     * @param max The maximum number of results that are to be returned. Defaults to 10 (optional)
     * @param search A String representing either an exact group name or a partial name (optional)
     * @return ApiResponse&lt;List&lt;GroupRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRepresentation>> adminRealmsRealmGroupsGroupIdChildrenGetWithHttpInfo(String realm, String groupId, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdChildrenGetValidateBeforeCall(realm, groupId, briefRepresentation, exact, first, max, search, null);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a paginated list of subgroups that have a parent group corresponding to the group on the URL (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Boolean which defines whether brief groups representations are returned or not (default: false) (optional, default to false)
     * @param exact Boolean which defines whether the params \&quot;search\&quot; must match exactly or not (optional)
     * @param first The position of the first result to be returned (pagination offset). (optional)
     * @param max The maximum number of results that are to be returned. Defaults to 10 (optional)
     * @param search A String representing either an exact group name or a partial name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdChildrenGetAsync(String realm, String groupId, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String search, final ApiCallback<List<GroupRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdChildrenGetValidateBeforeCall(realm, groupId, briefRepresentation, exact, first, max, search, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdChildrenPost
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdChildrenPostCall(String realm, String groupId, GroupRepresentation groupRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/children"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdChildrenPostValidateBeforeCall(String realm, String groupId, GroupRepresentation groupRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdChildrenPost(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdChildrenPost(Async)");
        }

        return adminRealmsRealmGroupsGroupIdChildrenPostCall(realm, groupId, groupRepresentation, _callback);

    }

    /**
     * Set or create child.
     * This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmGroupsGroupIdChildrenPost(String realm, String groupId, GroupRepresentation groupRepresentation) throws ApiException {
        adminRealmsRealmGroupsGroupIdChildrenPostWithHttpInfo(realm, groupId, groupRepresentation);
    }

    /**
     * Set or create child.
     * This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmGroupsGroupIdChildrenPostWithHttpInfo(String realm, String groupId, GroupRepresentation groupRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdChildrenPostValidateBeforeCall(realm, groupId, groupRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set or create child. (asynchronously)
     * This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdChildrenPostAsync(String realm, String groupId, GroupRepresentation groupRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdChildrenPostValidateBeforeCall(realm, groupId, groupRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdDelete
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdDeleteCall(String realm, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdDeleteValidateBeforeCall(String realm, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdDelete(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdDelete(Async)");
        }

        return adminRealmsRealmGroupsGroupIdDeleteCall(realm, groupId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmGroupsGroupIdDelete(String realm, String groupId) throws ApiException {
        adminRealmsRealmGroupsGroupIdDeleteWithHttpInfo(realm, groupId);
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmGroupsGroupIdDeleteWithHttpInfo(String realm, String groupId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdDeleteValidateBeforeCall(realm, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdDeleteAsync(String realm, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdDeleteValidateBeforeCall(realm, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdGetCall(String realm, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdGetValidateBeforeCall(String realm, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdGetCall(realm, groupId, _callback);

    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @return GroupRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GroupRepresentation adminRealmsRealmGroupsGroupIdGet(String realm, String groupId) throws ApiException {
        ApiResponse<GroupRepresentation> localVarResp = adminRealmsRealmGroupsGroupIdGetWithHttpInfo(realm, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;GroupRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupRepresentation> adminRealmsRealmGroupsGroupIdGetWithHttpInfo(String realm, String groupId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdGetValidateBeforeCall(realm, groupId, null);
        Type localVarReturnType = new TypeToken<GroupRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdGetAsync(String realm, String groupId, final ApiCallback<GroupRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdGetValidateBeforeCall(realm, groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdManagementPermissionsGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdManagementPermissionsGetCall(String realm, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdManagementPermissionsGetValidateBeforeCall(String realm, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdManagementPermissionsGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdManagementPermissionsGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdManagementPermissionsGetCall(realm, groupId, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmGroupsGroupIdManagementPermissionsGet(String realm, String groupId) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmGroupsGroupIdManagementPermissionsGetWithHttpInfo(realm, groupId);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmGroupsGroupIdManagementPermissionsGetWithHttpInfo(String realm, String groupId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdManagementPermissionsGetValidateBeforeCall(realm, groupId, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdManagementPermissionsGetAsync(String realm, String groupId, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdManagementPermissionsGetValidateBeforeCall(realm, groupId, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdManagementPermissionsPut
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdManagementPermissionsPutCall(String realm, String groupId, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managementPermissionReference;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/management/permissions"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdManagementPermissionsPutValidateBeforeCall(String realm, String groupId, ManagementPermissionReference managementPermissionReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdManagementPermissionsPut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdManagementPermissionsPut(Async)");
        }

        return adminRealmsRealmGroupsGroupIdManagementPermissionsPutCall(realm, groupId, managementPermissionReference, _callback);

    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param managementPermissionReference  (optional)
     * @return ManagementPermissionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementPermissionReference adminRealmsRealmGroupsGroupIdManagementPermissionsPut(String realm, String groupId, ManagementPermissionReference managementPermissionReference) throws ApiException {
        ApiResponse<ManagementPermissionReference> localVarResp = adminRealmsRealmGroupsGroupIdManagementPermissionsPutWithHttpInfo(realm, groupId, managementPermissionReference);
        return localVarResp.getData();
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param managementPermissionReference  (optional)
     * @return ApiResponse&lt;ManagementPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementPermissionReference> adminRealmsRealmGroupsGroupIdManagementPermissionsPutWithHttpInfo(String realm, String groupId, ManagementPermissionReference managementPermissionReference) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdManagementPermissionsPutValidateBeforeCall(realm, groupId, managementPermissionReference, null);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param managementPermissionReference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdManagementPermissionsPutAsync(String realm, String groupId, ManagementPermissionReference managementPermissionReference, final ApiCallback<ManagementPermissionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdManagementPermissionsPutValidateBeforeCall(realm, groupId, managementPermissionReference, _callback);
        Type localVarReturnType = new TypeToken<ManagementPermissionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdMembersGet
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdMembersGetCall(String realm, String groupId, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}/members"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdMembersGetValidateBeforeCall(String realm, String groupId, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdMembersGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdMembersGet(Async)");
        }

        return adminRealmsRealmGroupsGroupIdMembersGetCall(realm, groupId, briefRepresentation, first, max, _callback);

    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @return List&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<UserRepresentation> adminRealmsRealmGroupsGroupIdMembersGet(String realm, String groupId, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        ApiResponse<List<UserRepresentation>> localVarResp = adminRealmsRealmGroupsGroupIdMembersGetWithHttpInfo(realm, groupId, briefRepresentation, first, max);
        return localVarResp.getData();
    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @return ApiResponse&lt;List&lt;UserRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserRepresentation>> adminRealmsRealmGroupsGroupIdMembersGetWithHttpInfo(String realm, String groupId, Boolean briefRepresentation, Integer first, Integer max) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdMembersGetValidateBeforeCall(realm, groupId, briefRepresentation, first, max, null);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users Returns a stream of users, filtered according to query parameters (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param briefRepresentation Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.) (optional)
     * @param first Pagination offset (optional)
     * @param max Maximum results size (defaults to 100) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdMembersGetAsync(String realm, String groupId, Boolean briefRepresentation, Integer first, Integer max, final ApiCallback<List<UserRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdMembersGetValidateBeforeCall(realm, groupId, briefRepresentation, first, max, _callback);
        Type localVarReturnType = new TypeToken<List<UserRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsGroupIdPut
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdPutCall(String realm, String groupId, GroupRepresentation groupRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups/{group-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsGroupIdPutValidateBeforeCall(String realm, String groupId, GroupRepresentation groupRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsGroupIdPut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling adminRealmsRealmGroupsGroupIdPut(Async)");
        }

        return adminRealmsRealmGroupsGroupIdPutCall(realm, groupId, groupRepresentation, _callback);

    }

    /**
     * Update group, ignores subgroups.
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmGroupsGroupIdPut(String realm, String groupId, GroupRepresentation groupRepresentation) throws ApiException {
        adminRealmsRealmGroupsGroupIdPutWithHttpInfo(realm, groupId, groupRepresentation);
    }

    /**
     * Update group, ignores subgroups.
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmGroupsGroupIdPutWithHttpInfo(String realm, String groupId, GroupRepresentation groupRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdPutValidateBeforeCall(realm, groupId, groupRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update group, ignores subgroups. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param groupId  (required)
     * @param groupRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsGroupIdPutAsync(String realm, String groupId, GroupRepresentation groupRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsGroupIdPutValidateBeforeCall(realm, groupId, groupRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmGroupsPost
     * @param realm realm name (not id!) (required)
     * @param groupRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsPostCall(String realm, GroupRepresentation groupRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/groups"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmGroupsPostValidateBeforeCall(String realm, GroupRepresentation groupRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmGroupsPost(Async)");
        }

        return adminRealmsRealmGroupsPostCall(realm, groupRepresentation, _callback);

    }

    /**
     * create or add a top level realm groupSet or create child.
     * This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
     * @param realm realm name (not id!) (required)
     * @param groupRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmGroupsPost(String realm, GroupRepresentation groupRepresentation) throws ApiException {
        adminRealmsRealmGroupsPostWithHttpInfo(realm, groupRepresentation);
    }

    /**
     * create or add a top level realm groupSet or create child.
     * This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
     * @param realm realm name (not id!) (required)
     * @param groupRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmGroupsPostWithHttpInfo(String realm, GroupRepresentation groupRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmGroupsPostValidateBeforeCall(realm, groupRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create or add a top level realm groupSet or create child. (asynchronously)
     * This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
     * @param realm realm name (not id!) (required)
     * @param groupRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmGroupsPostAsync(String realm, GroupRepresentation groupRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmGroupsPostValidateBeforeCall(realm, groupRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
