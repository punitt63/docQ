/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;

import in.docq.keycloak.rest.client.JSON;

/**
 * ScopeMappingRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ScopeMappingRepresentation {
  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private String self;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  @javax.annotation.Nullable
  private String client;

  public static final String SERIALIZED_NAME_CLIENT_TEMPLATE = "clientTemplate";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLIENT_TEMPLATE)
  @javax.annotation.Nullable
  private String clientTemplate;

  public static final String SERIALIZED_NAME_CLIENT_SCOPE = "clientScope";
  @SerializedName(SERIALIZED_NAME_CLIENT_SCOPE)
  @javax.annotation.Nullable
  private String clientScope;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  @javax.annotation.Nullable
  private Set<String> roles = new LinkedHashSet<>();

  public ScopeMappingRepresentation() {
  }

  public ScopeMappingRepresentation self(@javax.annotation.Nullable String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(@javax.annotation.Nullable String self) {
    this.self = self;
  }


  public ScopeMappingRepresentation client(@javax.annotation.Nullable String client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(@javax.annotation.Nullable String client) {
    this.client = client;
  }


  @Deprecated
  public ScopeMappingRepresentation clientTemplate(@javax.annotation.Nullable String clientTemplate) {
    this.clientTemplate = clientTemplate;
    return this;
  }

  /**
   * Get clientTemplate
   * @return clientTemplate
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getClientTemplate() {
    return clientTemplate;
  }

  @Deprecated
  public void setClientTemplate(@javax.annotation.Nullable String clientTemplate) {
    this.clientTemplate = clientTemplate;
  }


  public ScopeMappingRepresentation clientScope(@javax.annotation.Nullable String clientScope) {
    this.clientScope = clientScope;
    return this;
  }

  /**
   * Get clientScope
   * @return clientScope
   */
  @javax.annotation.Nullable
  public String getClientScope() {
    return clientScope;
  }

  public void setClientScope(@javax.annotation.Nullable String clientScope) {
    this.clientScope = clientScope;
  }


  public ScopeMappingRepresentation roles(@javax.annotation.Nullable Set<String> roles) {
    this.roles = roles;
    return this;
  }

  public ScopeMappingRepresentation addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new LinkedHashSet<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public Set<String> getRoles() {
    return roles;
  }

  public void setRoles(@javax.annotation.Nullable Set<String> roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScopeMappingRepresentation scopeMappingRepresentation = (ScopeMappingRepresentation) o;
    return Objects.equals(this.self, scopeMappingRepresentation.self) &&
        Objects.equals(this.client, scopeMappingRepresentation.client) &&
        Objects.equals(this.clientTemplate, scopeMappingRepresentation.clientTemplate) &&
        Objects.equals(this.clientScope, scopeMappingRepresentation.clientScope) &&
        Objects.equals(this.roles, scopeMappingRepresentation.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, client, clientTemplate, clientScope, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScopeMappingRepresentation {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    clientTemplate: ").append(toIndentedString(clientTemplate)).append("\n");
    sb.append("    clientScope: ").append(toIndentedString(clientScope)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("self");
    openapiFields.add("client");
    openapiFields.add("clientTemplate");
    openapiFields.add("clientScope");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScopeMappingRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScopeMappingRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScopeMappingRepresentation is not found in the empty JSON string", ScopeMappingRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScopeMappingRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScopeMappingRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      if ((jsonObj.get("clientTemplate") != null && !jsonObj.get("clientTemplate").isJsonNull()) && !jsonObj.get("clientTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientTemplate").toString()));
      }
      if ((jsonObj.get("clientScope") != null && !jsonObj.get("clientScope").isJsonNull()) && !jsonObj.get("clientScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientScope").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScopeMappingRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScopeMappingRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScopeMappingRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScopeMappingRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ScopeMappingRepresentation>() {
           @Override
           public void write(JsonWriter out, ScopeMappingRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScopeMappingRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScopeMappingRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScopeMappingRepresentation
   * @throws IOException if the JSON string is invalid with respect to ScopeMappingRepresentation
   */
  public static ScopeMappingRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScopeMappingRepresentation.class);
  }

  /**
   * Convert an instance of ScopeMappingRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

