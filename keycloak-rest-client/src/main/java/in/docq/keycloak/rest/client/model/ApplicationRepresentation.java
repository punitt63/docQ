/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import in.docq.keycloak.rest.client.model.ClaimRepresentation;
import in.docq.keycloak.rest.client.model.ProtocolMapperRepresentation;
import in.docq.keycloak.rest.client.model.ResourceServerRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * ApplicationRepresentation
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ApplicationRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_ROOT_URL = "rootUrl";
  @SerializedName(SERIALIZED_NAME_ROOT_URL)
  @javax.annotation.Nullable
  private String rootUrl;

  public static final String SERIALIZED_NAME_ADMIN_URL = "adminUrl";
  @SerializedName(SERIALIZED_NAME_ADMIN_URL)
  @javax.annotation.Nullable
  private String adminUrl;

  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  @javax.annotation.Nullable
  private String baseUrl;

  public static final String SERIALIZED_NAME_SURROGATE_AUTH_REQUIRED = "surrogateAuthRequired";
  @SerializedName(SERIALIZED_NAME_SURROGATE_AUTH_REQUIRED)
  @javax.annotation.Nullable
  private Boolean surrogateAuthRequired;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ALWAYS_DISPLAY_IN_CONSOLE = "alwaysDisplayInConsole";
  @SerializedName(SERIALIZED_NAME_ALWAYS_DISPLAY_IN_CONSOLE)
  @javax.annotation.Nullable
  private Boolean alwaysDisplayInConsole;

  public static final String SERIALIZED_NAME_CLIENT_AUTHENTICATOR_TYPE = "clientAuthenticatorType";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTHENTICATOR_TYPE)
  @javax.annotation.Nullable
  private String clientAuthenticatorType;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  @javax.annotation.Nullable
  private String secret;

  public static final String SERIALIZED_NAME_REGISTRATION_ACCESS_TOKEN = "registrationAccessToken";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ACCESS_TOKEN)
  @javax.annotation.Nullable
  private String registrationAccessToken;

  public static final String SERIALIZED_NAME_DEFAULT_ROLES = "defaultRoles";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEFAULT_ROLES)
  @javax.annotation.Nullable
  private List<String> defaultRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  @javax.annotation.Nullable
  private List<String> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_ORIGINS = "webOrigins";
  @SerializedName(SERIALIZED_NAME_WEB_ORIGINS)
  @javax.annotation.Nullable
  private List<String> webOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOT_BEFORE = "notBefore";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  @javax.annotation.Nullable
  private Integer notBefore;

  public static final String SERIALIZED_NAME_BEARER_ONLY = "bearerOnly";
  @SerializedName(SERIALIZED_NAME_BEARER_ONLY)
  @javax.annotation.Nullable
  private Boolean bearerOnly;

  public static final String SERIALIZED_NAME_CONSENT_REQUIRED = "consentRequired";
  @SerializedName(SERIALIZED_NAME_CONSENT_REQUIRED)
  @javax.annotation.Nullable
  private Boolean consentRequired;

  public static final String SERIALIZED_NAME_STANDARD_FLOW_ENABLED = "standardFlowEnabled";
  @SerializedName(SERIALIZED_NAME_STANDARD_FLOW_ENABLED)
  @javax.annotation.Nullable
  private Boolean standardFlowEnabled;

  public static final String SERIALIZED_NAME_IMPLICIT_FLOW_ENABLED = "implicitFlowEnabled";
  @SerializedName(SERIALIZED_NAME_IMPLICIT_FLOW_ENABLED)
  @javax.annotation.Nullable
  private Boolean implicitFlowEnabled;

  public static final String SERIALIZED_NAME_DIRECT_ACCESS_GRANTS_ENABLED = "directAccessGrantsEnabled";
  @SerializedName(SERIALIZED_NAME_DIRECT_ACCESS_GRANTS_ENABLED)
  @javax.annotation.Nullable
  private Boolean directAccessGrantsEnabled;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNTS_ENABLED = "serviceAccountsEnabled";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNTS_ENABLED)
  @javax.annotation.Nullable
  private Boolean serviceAccountsEnabled;

  public static final String SERIALIZED_NAME_AUTHORIZATION_SERVICES_ENABLED = "authorizationServicesEnabled";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SERVICES_ENABLED)
  @javax.annotation.Nullable
  private Boolean authorizationServicesEnabled;

  public static final String SERIALIZED_NAME_DIRECT_GRANTS_ONLY = "directGrantsOnly";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DIRECT_GRANTS_ONLY)
  @javax.annotation.Nullable
  private Boolean directGrantsOnly;

  public static final String SERIALIZED_NAME_PUBLIC_CLIENT = "publicClient";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CLIENT)
  @javax.annotation.Nullable
  private Boolean publicClient;

  public static final String SERIALIZED_NAME_FRONTCHANNEL_LOGOUT = "frontchannelLogout";
  @SerializedName(SERIALIZED_NAME_FRONTCHANNEL_LOGOUT)
  @javax.annotation.Nullable
  private Boolean frontchannelLogout;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private String protocol;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @javax.annotation.Nullable
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW_BINDING_OVERRIDES = "authenticationFlowBindingOverrides";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW_BINDING_OVERRIDES)
  @javax.annotation.Nullable
  private Map<String, String> authenticationFlowBindingOverrides = new HashMap<>();

  public static final String SERIALIZED_NAME_FULL_SCOPE_ALLOWED = "fullScopeAllowed";
  @SerializedName(SERIALIZED_NAME_FULL_SCOPE_ALLOWED)
  @javax.annotation.Nullable
  private Boolean fullScopeAllowed;

  public static final String SERIALIZED_NAME_NODE_RE_REGISTRATION_TIMEOUT = "nodeReRegistrationTimeout";
  @SerializedName(SERIALIZED_NAME_NODE_RE_REGISTRATION_TIMEOUT)
  @javax.annotation.Nullable
  private Integer nodeReRegistrationTimeout;

  public static final String SERIALIZED_NAME_REGISTERED_NODES = "registeredNodes";
  @SerializedName(SERIALIZED_NAME_REGISTERED_NODES)
  @javax.annotation.Nullable
  private Map<String, Integer> registeredNodes = new HashMap<>();

  public static final String SERIALIZED_NAME_PROTOCOL_MAPPERS = "protocolMappers";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_MAPPERS)
  @javax.annotation.Nullable
  private List<ProtocolMapperRepresentation> protocolMappers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_TEMPLATE = "clientTemplate";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLIENT_TEMPLATE)
  @javax.annotation.Nullable
  private String clientTemplate;

  public static final String SERIALIZED_NAME_USE_TEMPLATE_CONFIG = "useTemplateConfig";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USE_TEMPLATE_CONFIG)
  @javax.annotation.Nullable
  private Boolean useTemplateConfig;

  public static final String SERIALIZED_NAME_USE_TEMPLATE_SCOPE = "useTemplateScope";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USE_TEMPLATE_SCOPE)
  @javax.annotation.Nullable
  private Boolean useTemplateScope;

  public static final String SERIALIZED_NAME_USE_TEMPLATE_MAPPERS = "useTemplateMappers";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USE_TEMPLATE_MAPPERS)
  @javax.annotation.Nullable
  private Boolean useTemplateMappers;

  public static final String SERIALIZED_NAME_DEFAULT_CLIENT_SCOPES = "defaultClientScopes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CLIENT_SCOPES)
  @javax.annotation.Nullable
  private List<String> defaultClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPTIONAL_CLIENT_SCOPES = "optionalClientScopes";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_CLIENT_SCOPES)
  @javax.annotation.Nullable
  private List<String> optionalClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHORIZATION_SETTINGS = "authorizationSettings";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SETTINGS)
  @javax.annotation.Nullable
  private ResourceServerRepresentation authorizationSettings;

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  @javax.annotation.Nullable
  private Map<String, Boolean> access = new HashMap<>();

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  @javax.annotation.Nullable
  private String origin;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CLAIMS = "claims";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLAIMS)
  @javax.annotation.Nullable
  private ClaimRepresentation claims;

  public ApplicationRepresentation() {
  }

  public ApplicationRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ApplicationRepresentation clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public ApplicationRepresentation description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ApplicationRepresentation type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ApplicationRepresentation rootUrl(@javax.annotation.Nullable String rootUrl) {
    this.rootUrl = rootUrl;
    return this;
  }

  /**
   * Get rootUrl
   * @return rootUrl
   */
  @javax.annotation.Nullable
  public String getRootUrl() {
    return rootUrl;
  }

  public void setRootUrl(@javax.annotation.Nullable String rootUrl) {
    this.rootUrl = rootUrl;
  }


  public ApplicationRepresentation adminUrl(@javax.annotation.Nullable String adminUrl) {
    this.adminUrl = adminUrl;
    return this;
  }

  /**
   * Get adminUrl
   * @return adminUrl
   */
  @javax.annotation.Nullable
  public String getAdminUrl() {
    return adminUrl;
  }

  public void setAdminUrl(@javax.annotation.Nullable String adminUrl) {
    this.adminUrl = adminUrl;
  }


  public ApplicationRepresentation baseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Get baseUrl
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public ApplicationRepresentation surrogateAuthRequired(@javax.annotation.Nullable Boolean surrogateAuthRequired) {
    this.surrogateAuthRequired = surrogateAuthRequired;
    return this;
  }

  /**
   * Get surrogateAuthRequired
   * @return surrogateAuthRequired
   */
  @javax.annotation.Nullable
  public Boolean getSurrogateAuthRequired() {
    return surrogateAuthRequired;
  }

  public void setSurrogateAuthRequired(@javax.annotation.Nullable Boolean surrogateAuthRequired) {
    this.surrogateAuthRequired = surrogateAuthRequired;
  }


  public ApplicationRepresentation enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public ApplicationRepresentation alwaysDisplayInConsole(@javax.annotation.Nullable Boolean alwaysDisplayInConsole) {
    this.alwaysDisplayInConsole = alwaysDisplayInConsole;
    return this;
  }

  /**
   * Get alwaysDisplayInConsole
   * @return alwaysDisplayInConsole
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysDisplayInConsole() {
    return alwaysDisplayInConsole;
  }

  public void setAlwaysDisplayInConsole(@javax.annotation.Nullable Boolean alwaysDisplayInConsole) {
    this.alwaysDisplayInConsole = alwaysDisplayInConsole;
  }


  public ApplicationRepresentation clientAuthenticatorType(@javax.annotation.Nullable String clientAuthenticatorType) {
    this.clientAuthenticatorType = clientAuthenticatorType;
    return this;
  }

  /**
   * Get clientAuthenticatorType
   * @return clientAuthenticatorType
   */
  @javax.annotation.Nullable
  public String getClientAuthenticatorType() {
    return clientAuthenticatorType;
  }

  public void setClientAuthenticatorType(@javax.annotation.Nullable String clientAuthenticatorType) {
    this.clientAuthenticatorType = clientAuthenticatorType;
  }


  public ApplicationRepresentation secret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
  }


  public ApplicationRepresentation registrationAccessToken(@javax.annotation.Nullable String registrationAccessToken) {
    this.registrationAccessToken = registrationAccessToken;
    return this;
  }

  /**
   * Get registrationAccessToken
   * @return registrationAccessToken
   */
  @javax.annotation.Nullable
  public String getRegistrationAccessToken() {
    return registrationAccessToken;
  }

  public void setRegistrationAccessToken(@javax.annotation.Nullable String registrationAccessToken) {
    this.registrationAccessToken = registrationAccessToken;
  }


  @Deprecated
  public ApplicationRepresentation defaultRoles(@javax.annotation.Nullable List<String> defaultRoles) {
    this.defaultRoles = defaultRoles;
    return this;
  }

  public ApplicationRepresentation addDefaultRolesItem(String defaultRolesItem) {
    if (this.defaultRoles == null) {
      this.defaultRoles = new ArrayList<>();
    }
    this.defaultRoles.add(defaultRolesItem);
    return this;
  }

  /**
   * Get defaultRoles
   * @return defaultRoles
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getDefaultRoles() {
    return defaultRoles;
  }

  @Deprecated
  public void setDefaultRoles(@javax.annotation.Nullable List<String> defaultRoles) {
    this.defaultRoles = defaultRoles;
  }


  public ApplicationRepresentation redirectUris(@javax.annotation.Nullable List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public ApplicationRepresentation addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * Get redirectUris
   * @return redirectUris
   */
  @javax.annotation.Nullable
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(@javax.annotation.Nullable List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public ApplicationRepresentation webOrigins(@javax.annotation.Nullable List<String> webOrigins) {
    this.webOrigins = webOrigins;
    return this;
  }

  public ApplicationRepresentation addWebOriginsItem(String webOriginsItem) {
    if (this.webOrigins == null) {
      this.webOrigins = new ArrayList<>();
    }
    this.webOrigins.add(webOriginsItem);
    return this;
  }

  /**
   * Get webOrigins
   * @return webOrigins
   */
  @javax.annotation.Nullable
  public List<String> getWebOrigins() {
    return webOrigins;
  }

  public void setWebOrigins(@javax.annotation.Nullable List<String> webOrigins) {
    this.webOrigins = webOrigins;
  }


  public ApplicationRepresentation notBefore(@javax.annotation.Nullable Integer notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * Get notBefore
   * @return notBefore
   */
  @javax.annotation.Nullable
  public Integer getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(@javax.annotation.Nullable Integer notBefore) {
    this.notBefore = notBefore;
  }


  public ApplicationRepresentation bearerOnly(@javax.annotation.Nullable Boolean bearerOnly) {
    this.bearerOnly = bearerOnly;
    return this;
  }

  /**
   * Get bearerOnly
   * @return bearerOnly
   */
  @javax.annotation.Nullable
  public Boolean getBearerOnly() {
    return bearerOnly;
  }

  public void setBearerOnly(@javax.annotation.Nullable Boolean bearerOnly) {
    this.bearerOnly = bearerOnly;
  }


  public ApplicationRepresentation consentRequired(@javax.annotation.Nullable Boolean consentRequired) {
    this.consentRequired = consentRequired;
    return this;
  }

  /**
   * Get consentRequired
   * @return consentRequired
   */
  @javax.annotation.Nullable
  public Boolean getConsentRequired() {
    return consentRequired;
  }

  public void setConsentRequired(@javax.annotation.Nullable Boolean consentRequired) {
    this.consentRequired = consentRequired;
  }


  public ApplicationRepresentation standardFlowEnabled(@javax.annotation.Nullable Boolean standardFlowEnabled) {
    this.standardFlowEnabled = standardFlowEnabled;
    return this;
  }

  /**
   * Get standardFlowEnabled
   * @return standardFlowEnabled
   */
  @javax.annotation.Nullable
  public Boolean getStandardFlowEnabled() {
    return standardFlowEnabled;
  }

  public void setStandardFlowEnabled(@javax.annotation.Nullable Boolean standardFlowEnabled) {
    this.standardFlowEnabled = standardFlowEnabled;
  }


  public ApplicationRepresentation implicitFlowEnabled(@javax.annotation.Nullable Boolean implicitFlowEnabled) {
    this.implicitFlowEnabled = implicitFlowEnabled;
    return this;
  }

  /**
   * Get implicitFlowEnabled
   * @return implicitFlowEnabled
   */
  @javax.annotation.Nullable
  public Boolean getImplicitFlowEnabled() {
    return implicitFlowEnabled;
  }

  public void setImplicitFlowEnabled(@javax.annotation.Nullable Boolean implicitFlowEnabled) {
    this.implicitFlowEnabled = implicitFlowEnabled;
  }


  public ApplicationRepresentation directAccessGrantsEnabled(@javax.annotation.Nullable Boolean directAccessGrantsEnabled) {
    this.directAccessGrantsEnabled = directAccessGrantsEnabled;
    return this;
  }

  /**
   * Get directAccessGrantsEnabled
   * @return directAccessGrantsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDirectAccessGrantsEnabled() {
    return directAccessGrantsEnabled;
  }

  public void setDirectAccessGrantsEnabled(@javax.annotation.Nullable Boolean directAccessGrantsEnabled) {
    this.directAccessGrantsEnabled = directAccessGrantsEnabled;
  }


  public ApplicationRepresentation serviceAccountsEnabled(@javax.annotation.Nullable Boolean serviceAccountsEnabled) {
    this.serviceAccountsEnabled = serviceAccountsEnabled;
    return this;
  }

  /**
   * Get serviceAccountsEnabled
   * @return serviceAccountsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getServiceAccountsEnabled() {
    return serviceAccountsEnabled;
  }

  public void setServiceAccountsEnabled(@javax.annotation.Nullable Boolean serviceAccountsEnabled) {
    this.serviceAccountsEnabled = serviceAccountsEnabled;
  }


  public ApplicationRepresentation authorizationServicesEnabled(@javax.annotation.Nullable Boolean authorizationServicesEnabled) {
    this.authorizationServicesEnabled = authorizationServicesEnabled;
    return this;
  }

  /**
   * Get authorizationServicesEnabled
   * @return authorizationServicesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAuthorizationServicesEnabled() {
    return authorizationServicesEnabled;
  }

  public void setAuthorizationServicesEnabled(@javax.annotation.Nullable Boolean authorizationServicesEnabled) {
    this.authorizationServicesEnabled = authorizationServicesEnabled;
  }


  @Deprecated
  public ApplicationRepresentation directGrantsOnly(@javax.annotation.Nullable Boolean directGrantsOnly) {
    this.directGrantsOnly = directGrantsOnly;
    return this;
  }

  /**
   * Get directGrantsOnly
   * @return directGrantsOnly
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getDirectGrantsOnly() {
    return directGrantsOnly;
  }

  @Deprecated
  public void setDirectGrantsOnly(@javax.annotation.Nullable Boolean directGrantsOnly) {
    this.directGrantsOnly = directGrantsOnly;
  }


  public ApplicationRepresentation publicClient(@javax.annotation.Nullable Boolean publicClient) {
    this.publicClient = publicClient;
    return this;
  }

  /**
   * Get publicClient
   * @return publicClient
   */
  @javax.annotation.Nullable
  public Boolean getPublicClient() {
    return publicClient;
  }

  public void setPublicClient(@javax.annotation.Nullable Boolean publicClient) {
    this.publicClient = publicClient;
  }


  public ApplicationRepresentation frontchannelLogout(@javax.annotation.Nullable Boolean frontchannelLogout) {
    this.frontchannelLogout = frontchannelLogout;
    return this;
  }

  /**
   * Get frontchannelLogout
   * @return frontchannelLogout
   */
  @javax.annotation.Nullable
  public Boolean getFrontchannelLogout() {
    return frontchannelLogout;
  }

  public void setFrontchannelLogout(@javax.annotation.Nullable Boolean frontchannelLogout) {
    this.frontchannelLogout = frontchannelLogout;
  }


  public ApplicationRepresentation protocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
  }


  public ApplicationRepresentation attributes(@javax.annotation.Nullable Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ApplicationRepresentation putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(@javax.annotation.Nullable Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public ApplicationRepresentation authenticationFlowBindingOverrides(@javax.annotation.Nullable Map<String, String> authenticationFlowBindingOverrides) {
    this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
    return this;
  }

  public ApplicationRepresentation putAuthenticationFlowBindingOverridesItem(String key, String authenticationFlowBindingOverridesItem) {
    if (this.authenticationFlowBindingOverrides == null) {
      this.authenticationFlowBindingOverrides = new HashMap<>();
    }
    this.authenticationFlowBindingOverrides.put(key, authenticationFlowBindingOverridesItem);
    return this;
  }

  /**
   * Get authenticationFlowBindingOverrides
   * @return authenticationFlowBindingOverrides
   */
  @javax.annotation.Nullable
  public Map<String, String> getAuthenticationFlowBindingOverrides() {
    return authenticationFlowBindingOverrides;
  }

  public void setAuthenticationFlowBindingOverrides(@javax.annotation.Nullable Map<String, String> authenticationFlowBindingOverrides) {
    this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
  }


  public ApplicationRepresentation fullScopeAllowed(@javax.annotation.Nullable Boolean fullScopeAllowed) {
    this.fullScopeAllowed = fullScopeAllowed;
    return this;
  }

  /**
   * Get fullScopeAllowed
   * @return fullScopeAllowed
   */
  @javax.annotation.Nullable
  public Boolean getFullScopeAllowed() {
    return fullScopeAllowed;
  }

  public void setFullScopeAllowed(@javax.annotation.Nullable Boolean fullScopeAllowed) {
    this.fullScopeAllowed = fullScopeAllowed;
  }


  public ApplicationRepresentation nodeReRegistrationTimeout(@javax.annotation.Nullable Integer nodeReRegistrationTimeout) {
    this.nodeReRegistrationTimeout = nodeReRegistrationTimeout;
    return this;
  }

  /**
   * Get nodeReRegistrationTimeout
   * @return nodeReRegistrationTimeout
   */
  @javax.annotation.Nullable
  public Integer getNodeReRegistrationTimeout() {
    return nodeReRegistrationTimeout;
  }

  public void setNodeReRegistrationTimeout(@javax.annotation.Nullable Integer nodeReRegistrationTimeout) {
    this.nodeReRegistrationTimeout = nodeReRegistrationTimeout;
  }


  public ApplicationRepresentation registeredNodes(@javax.annotation.Nullable Map<String, Integer> registeredNodes) {
    this.registeredNodes = registeredNodes;
    return this;
  }

  public ApplicationRepresentation putRegisteredNodesItem(String key, Integer registeredNodesItem) {
    if (this.registeredNodes == null) {
      this.registeredNodes = new HashMap<>();
    }
    this.registeredNodes.put(key, registeredNodesItem);
    return this;
  }

  /**
   * Get registeredNodes
   * @return registeredNodes
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getRegisteredNodes() {
    return registeredNodes;
  }

  public void setRegisteredNodes(@javax.annotation.Nullable Map<String, Integer> registeredNodes) {
    this.registeredNodes = registeredNodes;
  }


  public ApplicationRepresentation protocolMappers(@javax.annotation.Nullable List<ProtocolMapperRepresentation> protocolMappers) {
    this.protocolMappers = protocolMappers;
    return this;
  }

  public ApplicationRepresentation addProtocolMappersItem(ProtocolMapperRepresentation protocolMappersItem) {
    if (this.protocolMappers == null) {
      this.protocolMappers = new ArrayList<>();
    }
    this.protocolMappers.add(protocolMappersItem);
    return this;
  }

  /**
   * Get protocolMappers
   * @return protocolMappers
   */
  @javax.annotation.Nullable
  public List<ProtocolMapperRepresentation> getProtocolMappers() {
    return protocolMappers;
  }

  public void setProtocolMappers(@javax.annotation.Nullable List<ProtocolMapperRepresentation> protocolMappers) {
    this.protocolMappers = protocolMappers;
  }


  @Deprecated
  public ApplicationRepresentation clientTemplate(@javax.annotation.Nullable String clientTemplate) {
    this.clientTemplate = clientTemplate;
    return this;
  }

  /**
   * Get clientTemplate
   * @return clientTemplate
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getClientTemplate() {
    return clientTemplate;
  }

  @Deprecated
  public void setClientTemplate(@javax.annotation.Nullable String clientTemplate) {
    this.clientTemplate = clientTemplate;
  }


  @Deprecated
  public ApplicationRepresentation useTemplateConfig(@javax.annotation.Nullable Boolean useTemplateConfig) {
    this.useTemplateConfig = useTemplateConfig;
    return this;
  }

  /**
   * Get useTemplateConfig
   * @return useTemplateConfig
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getUseTemplateConfig() {
    return useTemplateConfig;
  }

  @Deprecated
  public void setUseTemplateConfig(@javax.annotation.Nullable Boolean useTemplateConfig) {
    this.useTemplateConfig = useTemplateConfig;
  }


  @Deprecated
  public ApplicationRepresentation useTemplateScope(@javax.annotation.Nullable Boolean useTemplateScope) {
    this.useTemplateScope = useTemplateScope;
    return this;
  }

  /**
   * Get useTemplateScope
   * @return useTemplateScope
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getUseTemplateScope() {
    return useTemplateScope;
  }

  @Deprecated
  public void setUseTemplateScope(@javax.annotation.Nullable Boolean useTemplateScope) {
    this.useTemplateScope = useTemplateScope;
  }


  @Deprecated
  public ApplicationRepresentation useTemplateMappers(@javax.annotation.Nullable Boolean useTemplateMappers) {
    this.useTemplateMappers = useTemplateMappers;
    return this;
  }

  /**
   * Get useTemplateMappers
   * @return useTemplateMappers
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getUseTemplateMappers() {
    return useTemplateMappers;
  }

  @Deprecated
  public void setUseTemplateMappers(@javax.annotation.Nullable Boolean useTemplateMappers) {
    this.useTemplateMappers = useTemplateMappers;
  }


  public ApplicationRepresentation defaultClientScopes(@javax.annotation.Nullable List<String> defaultClientScopes) {
    this.defaultClientScopes = defaultClientScopes;
    return this;
  }

  public ApplicationRepresentation addDefaultClientScopesItem(String defaultClientScopesItem) {
    if (this.defaultClientScopes == null) {
      this.defaultClientScopes = new ArrayList<>();
    }
    this.defaultClientScopes.add(defaultClientScopesItem);
    return this;
  }

  /**
   * Get defaultClientScopes
   * @return defaultClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getDefaultClientScopes() {
    return defaultClientScopes;
  }

  public void setDefaultClientScopes(@javax.annotation.Nullable List<String> defaultClientScopes) {
    this.defaultClientScopes = defaultClientScopes;
  }


  public ApplicationRepresentation optionalClientScopes(@javax.annotation.Nullable List<String> optionalClientScopes) {
    this.optionalClientScopes = optionalClientScopes;
    return this;
  }

  public ApplicationRepresentation addOptionalClientScopesItem(String optionalClientScopesItem) {
    if (this.optionalClientScopes == null) {
      this.optionalClientScopes = new ArrayList<>();
    }
    this.optionalClientScopes.add(optionalClientScopesItem);
    return this;
  }

  /**
   * Get optionalClientScopes
   * @return optionalClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getOptionalClientScopes() {
    return optionalClientScopes;
  }

  public void setOptionalClientScopes(@javax.annotation.Nullable List<String> optionalClientScopes) {
    this.optionalClientScopes = optionalClientScopes;
  }


  public ApplicationRepresentation authorizationSettings(@javax.annotation.Nullable ResourceServerRepresentation authorizationSettings) {
    this.authorizationSettings = authorizationSettings;
    return this;
  }

  /**
   * Get authorizationSettings
   * @return authorizationSettings
   */
  @javax.annotation.Nullable
  public ResourceServerRepresentation getAuthorizationSettings() {
    return authorizationSettings;
  }

  public void setAuthorizationSettings(@javax.annotation.Nullable ResourceServerRepresentation authorizationSettings) {
    this.authorizationSettings = authorizationSettings;
  }


  public ApplicationRepresentation access(@javax.annotation.Nullable Map<String, Boolean> access) {
    this.access = access;
    return this;
  }

  public ApplicationRepresentation putAccessItem(String key, Boolean accessItem) {
    if (this.access == null) {
      this.access = new HashMap<>();
    }
    this.access.put(key, accessItem);
    return this;
  }

  /**
   * Get access
   * @return access
   */
  @javax.annotation.Nullable
  public Map<String, Boolean> getAccess() {
    return access;
  }

  public void setAccess(@javax.annotation.Nullable Map<String, Boolean> access) {
    this.access = access;
  }


  public ApplicationRepresentation origin(@javax.annotation.Nullable String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(@javax.annotation.Nullable String origin) {
    this.origin = origin;
  }


  public ApplicationRepresentation name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  @Deprecated
  public ApplicationRepresentation claims(@javax.annotation.Nullable ClaimRepresentation claims) {
    this.claims = claims;
    return this;
  }

  /**
   * Get claims
   * @return claims
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public ClaimRepresentation getClaims() {
    return claims;
  }

  @Deprecated
  public void setClaims(@javax.annotation.Nullable ClaimRepresentation claims) {
    this.claims = claims;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationRepresentation applicationRepresentation = (ApplicationRepresentation) o;
    return Objects.equals(this.id, applicationRepresentation.id) &&
        Objects.equals(this.clientId, applicationRepresentation.clientId) &&
        Objects.equals(this.description, applicationRepresentation.description) &&
        Objects.equals(this.type, applicationRepresentation.type) &&
        Objects.equals(this.rootUrl, applicationRepresentation.rootUrl) &&
        Objects.equals(this.adminUrl, applicationRepresentation.adminUrl) &&
        Objects.equals(this.baseUrl, applicationRepresentation.baseUrl) &&
        Objects.equals(this.surrogateAuthRequired, applicationRepresentation.surrogateAuthRequired) &&
        Objects.equals(this.enabled, applicationRepresentation.enabled) &&
        Objects.equals(this.alwaysDisplayInConsole, applicationRepresentation.alwaysDisplayInConsole) &&
        Objects.equals(this.clientAuthenticatorType, applicationRepresentation.clientAuthenticatorType) &&
        Objects.equals(this.secret, applicationRepresentation.secret) &&
        Objects.equals(this.registrationAccessToken, applicationRepresentation.registrationAccessToken) &&
        Objects.equals(this.defaultRoles, applicationRepresentation.defaultRoles) &&
        Objects.equals(this.redirectUris, applicationRepresentation.redirectUris) &&
        Objects.equals(this.webOrigins, applicationRepresentation.webOrigins) &&
        Objects.equals(this.notBefore, applicationRepresentation.notBefore) &&
        Objects.equals(this.bearerOnly, applicationRepresentation.bearerOnly) &&
        Objects.equals(this.consentRequired, applicationRepresentation.consentRequired) &&
        Objects.equals(this.standardFlowEnabled, applicationRepresentation.standardFlowEnabled) &&
        Objects.equals(this.implicitFlowEnabled, applicationRepresentation.implicitFlowEnabled) &&
        Objects.equals(this.directAccessGrantsEnabled, applicationRepresentation.directAccessGrantsEnabled) &&
        Objects.equals(this.serviceAccountsEnabled, applicationRepresentation.serviceAccountsEnabled) &&
        Objects.equals(this.authorizationServicesEnabled, applicationRepresentation.authorizationServicesEnabled) &&
        Objects.equals(this.directGrantsOnly, applicationRepresentation.directGrantsOnly) &&
        Objects.equals(this.publicClient, applicationRepresentation.publicClient) &&
        Objects.equals(this.frontchannelLogout, applicationRepresentation.frontchannelLogout) &&
        Objects.equals(this.protocol, applicationRepresentation.protocol) &&
        Objects.equals(this.attributes, applicationRepresentation.attributes) &&
        Objects.equals(this.authenticationFlowBindingOverrides, applicationRepresentation.authenticationFlowBindingOverrides) &&
        Objects.equals(this.fullScopeAllowed, applicationRepresentation.fullScopeAllowed) &&
        Objects.equals(this.nodeReRegistrationTimeout, applicationRepresentation.nodeReRegistrationTimeout) &&
        Objects.equals(this.registeredNodes, applicationRepresentation.registeredNodes) &&
        Objects.equals(this.protocolMappers, applicationRepresentation.protocolMappers) &&
        Objects.equals(this.clientTemplate, applicationRepresentation.clientTemplate) &&
        Objects.equals(this.useTemplateConfig, applicationRepresentation.useTemplateConfig) &&
        Objects.equals(this.useTemplateScope, applicationRepresentation.useTemplateScope) &&
        Objects.equals(this.useTemplateMappers, applicationRepresentation.useTemplateMappers) &&
        Objects.equals(this.defaultClientScopes, applicationRepresentation.defaultClientScopes) &&
        Objects.equals(this.optionalClientScopes, applicationRepresentation.optionalClientScopes) &&
        Objects.equals(this.authorizationSettings, applicationRepresentation.authorizationSettings) &&
        Objects.equals(this.access, applicationRepresentation.access) &&
        Objects.equals(this.origin, applicationRepresentation.origin) &&
        Objects.equals(this.name, applicationRepresentation.name) &&
        Objects.equals(this.claims, applicationRepresentation.claims);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, clientId, description, type, rootUrl, adminUrl, baseUrl, surrogateAuthRequired, enabled, alwaysDisplayInConsole, clientAuthenticatorType, secret, registrationAccessToken, defaultRoles, redirectUris, webOrigins, notBefore, bearerOnly, consentRequired, standardFlowEnabled, implicitFlowEnabled, directAccessGrantsEnabled, serviceAccountsEnabled, authorizationServicesEnabled, directGrantsOnly, publicClient, frontchannelLogout, protocol, attributes, authenticationFlowBindingOverrides, fullScopeAllowed, nodeReRegistrationTimeout, registeredNodes, protocolMappers, clientTemplate, useTemplateConfig, useTemplateScope, useTemplateMappers, defaultClientScopes, optionalClientScopes, authorizationSettings, access, origin, name, claims);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    rootUrl: ").append(toIndentedString(rootUrl)).append("\n");
    sb.append("    adminUrl: ").append(toIndentedString(adminUrl)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    surrogateAuthRequired: ").append(toIndentedString(surrogateAuthRequired)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    alwaysDisplayInConsole: ").append(toIndentedString(alwaysDisplayInConsole)).append("\n");
    sb.append("    clientAuthenticatorType: ").append(toIndentedString(clientAuthenticatorType)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    registrationAccessToken: ").append(toIndentedString(registrationAccessToken)).append("\n");
    sb.append("    defaultRoles: ").append(toIndentedString(defaultRoles)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    webOrigins: ").append(toIndentedString(webOrigins)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    bearerOnly: ").append(toIndentedString(bearerOnly)).append("\n");
    sb.append("    consentRequired: ").append(toIndentedString(consentRequired)).append("\n");
    sb.append("    standardFlowEnabled: ").append(toIndentedString(standardFlowEnabled)).append("\n");
    sb.append("    implicitFlowEnabled: ").append(toIndentedString(implicitFlowEnabled)).append("\n");
    sb.append("    directAccessGrantsEnabled: ").append(toIndentedString(directAccessGrantsEnabled)).append("\n");
    sb.append("    serviceAccountsEnabled: ").append(toIndentedString(serviceAccountsEnabled)).append("\n");
    sb.append("    authorizationServicesEnabled: ").append(toIndentedString(authorizationServicesEnabled)).append("\n");
    sb.append("    directGrantsOnly: ").append(toIndentedString(directGrantsOnly)).append("\n");
    sb.append("    publicClient: ").append(toIndentedString(publicClient)).append("\n");
    sb.append("    frontchannelLogout: ").append(toIndentedString(frontchannelLogout)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    authenticationFlowBindingOverrides: ").append(toIndentedString(authenticationFlowBindingOverrides)).append("\n");
    sb.append("    fullScopeAllowed: ").append(toIndentedString(fullScopeAllowed)).append("\n");
    sb.append("    nodeReRegistrationTimeout: ").append(toIndentedString(nodeReRegistrationTimeout)).append("\n");
    sb.append("    registeredNodes: ").append(toIndentedString(registeredNodes)).append("\n");
    sb.append("    protocolMappers: ").append(toIndentedString(protocolMappers)).append("\n");
    sb.append("    clientTemplate: ").append(toIndentedString(clientTemplate)).append("\n");
    sb.append("    useTemplateConfig: ").append(toIndentedString(useTemplateConfig)).append("\n");
    sb.append("    useTemplateScope: ").append(toIndentedString(useTemplateScope)).append("\n");
    sb.append("    useTemplateMappers: ").append(toIndentedString(useTemplateMappers)).append("\n");
    sb.append("    defaultClientScopes: ").append(toIndentedString(defaultClientScopes)).append("\n");
    sb.append("    optionalClientScopes: ").append(toIndentedString(optionalClientScopes)).append("\n");
    sb.append("    authorizationSettings: ").append(toIndentedString(authorizationSettings)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("clientId");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("rootUrl");
    openapiFields.add("adminUrl");
    openapiFields.add("baseUrl");
    openapiFields.add("surrogateAuthRequired");
    openapiFields.add("enabled");
    openapiFields.add("alwaysDisplayInConsole");
    openapiFields.add("clientAuthenticatorType");
    openapiFields.add("secret");
    openapiFields.add("registrationAccessToken");
    openapiFields.add("defaultRoles");
    openapiFields.add("redirectUris");
    openapiFields.add("webOrigins");
    openapiFields.add("notBefore");
    openapiFields.add("bearerOnly");
    openapiFields.add("consentRequired");
    openapiFields.add("standardFlowEnabled");
    openapiFields.add("implicitFlowEnabled");
    openapiFields.add("directAccessGrantsEnabled");
    openapiFields.add("serviceAccountsEnabled");
    openapiFields.add("authorizationServicesEnabled");
    openapiFields.add("directGrantsOnly");
    openapiFields.add("publicClient");
    openapiFields.add("frontchannelLogout");
    openapiFields.add("protocol");
    openapiFields.add("attributes");
    openapiFields.add("authenticationFlowBindingOverrides");
    openapiFields.add("fullScopeAllowed");
    openapiFields.add("nodeReRegistrationTimeout");
    openapiFields.add("registeredNodes");
    openapiFields.add("protocolMappers");
    openapiFields.add("clientTemplate");
    openapiFields.add("useTemplateConfig");
    openapiFields.add("useTemplateScope");
    openapiFields.add("useTemplateMappers");
    openapiFields.add("defaultClientScopes");
    openapiFields.add("optionalClientScopes");
    openapiFields.add("authorizationSettings");
    openapiFields.add("access");
    openapiFields.add("origin");
    openapiFields.add("name");
    openapiFields.add("claims");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationRepresentation is not found in the empty JSON string", ApplicationRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("rootUrl") != null && !jsonObj.get("rootUrl").isJsonNull()) && !jsonObj.get("rootUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootUrl").toString()));
      }
      if ((jsonObj.get("adminUrl") != null && !jsonObj.get("adminUrl").isJsonNull()) && !jsonObj.get("adminUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminUrl").toString()));
      }
      if ((jsonObj.get("baseUrl") != null && !jsonObj.get("baseUrl").isJsonNull()) && !jsonObj.get("baseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
      }
      if ((jsonObj.get("clientAuthenticatorType") != null && !jsonObj.get("clientAuthenticatorType").isJsonNull()) && !jsonObj.get("clientAuthenticatorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAuthenticatorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAuthenticatorType").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("registrationAccessToken") != null && !jsonObj.get("registrationAccessToken").isJsonNull()) && !jsonObj.get("registrationAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationAccessToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultRoles") != null && !jsonObj.get("defaultRoles").isJsonNull() && !jsonObj.get("defaultRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRoles` to be an array in the JSON string but got `%s`", jsonObj.get("defaultRoles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectUris") != null && !jsonObj.get("redirectUris").isJsonNull() && !jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webOrigins") != null && !jsonObj.get("webOrigins").isJsonNull() && !jsonObj.get("webOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("webOrigins").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if (jsonObj.get("protocolMappers") != null && !jsonObj.get("protocolMappers").isJsonNull()) {
        JsonArray jsonArrayprotocolMappers = jsonObj.getAsJsonArray("protocolMappers");
        if (jsonArrayprotocolMappers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("protocolMappers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `protocolMappers` to be an array in the JSON string but got `%s`", jsonObj.get("protocolMappers").toString()));
          }

          // validate the optional field `protocolMappers` (array)
          for (int i = 0; i < jsonArrayprotocolMappers.size(); i++) {
            ProtocolMapperRepresentation.validateJsonElement(jsonArrayprotocolMappers.get(i));
          };
        }
      }
      if ((jsonObj.get("clientTemplate") != null && !jsonObj.get("clientTemplate").isJsonNull()) && !jsonObj.get("clientTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientTemplate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultClientScopes") != null && !jsonObj.get("defaultClientScopes").isJsonNull() && !jsonObj.get("defaultClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("defaultClientScopes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("optionalClientScopes") != null && !jsonObj.get("optionalClientScopes").isJsonNull() && !jsonObj.get("optionalClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("optionalClientScopes").toString()));
      }
      // validate the optional field `authorizationSettings`
      if (jsonObj.get("authorizationSettings") != null && !jsonObj.get("authorizationSettings").isJsonNull()) {
        ResourceServerRepresentation.validateJsonElement(jsonObj.get("authorizationSettings"));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `claims`
      if (jsonObj.get("claims") != null && !jsonObj.get("claims").isJsonNull()) {
        ClaimRepresentation.validateJsonElement(jsonObj.get("claims"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationRepresentation>() {
           @Override
           public void write(JsonWriter out, ApplicationRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationRepresentation
   * @throws IOException if the JSON string is invalid with respect to ApplicationRepresentation
   */
  public static ApplicationRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationRepresentation.class);
  }

  /**
   * Convert an instance of ApplicationRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

