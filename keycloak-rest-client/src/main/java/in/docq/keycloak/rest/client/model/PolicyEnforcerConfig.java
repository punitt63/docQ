/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import in.docq.keycloak.rest.client.model.EnforcementMode;
import in.docq.keycloak.rest.client.model.PathCacheConfig;
import in.docq.keycloak.rest.client.model.PathConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * PolicyEnforcerConfig
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PolicyEnforcerConfig {
  public static final String SERIALIZED_NAME_ENFORCEMENT_MODE = "enforcement-mode";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_MODE)
  @javax.annotation.Nullable
  private EnforcementMode enforcementMode;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  @javax.annotation.Nullable
  private List<PathConfig> paths = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATH_CACHE = "path-cache";
  @SerializedName(SERIALIZED_NAME_PATH_CACHE)
  @javax.annotation.Nullable
  private PathCacheConfig pathCache;

  public static final String SERIALIZED_NAME_LAZY_LOAD_PATHS = "lazy-load-paths";
  @SerializedName(SERIALIZED_NAME_LAZY_LOAD_PATHS)
  @javax.annotation.Nullable
  private Boolean lazyLoadPaths;

  public static final String SERIALIZED_NAME_ON_DENY_REDIRECT_TO = "on-deny-redirect-to";
  @SerializedName(SERIALIZED_NAME_ON_DENY_REDIRECT_TO)
  @javax.annotation.Nullable
  private String onDenyRedirectTo;

  public static final String SERIALIZED_NAME_USER_MANAGED_ACCESS = "user-managed-access";
  @SerializedName(SERIALIZED_NAME_USER_MANAGED_ACCESS)
  @javax.annotation.Nullable
  private Object userManagedAccess;

  public static final String SERIALIZED_NAME_CLAIM_INFORMATION_POINT = "claim-information-point";
  @SerializedName(SERIALIZED_NAME_CLAIM_INFORMATION_POINT)
  @javax.annotation.Nullable
  private Map<String, Map<String, Object>> claimInformationPoint = new HashMap<>();

  public static final String SERIALIZED_NAME_HTTP_METHOD_AS_SCOPE = "http-method-as-scope";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD_AS_SCOPE)
  @javax.annotation.Nullable
  private Boolean httpMethodAsScope;

  public static final String SERIALIZED_NAME_REALM = "realm";
  @SerializedName(SERIALIZED_NAME_REALM)
  @javax.annotation.Nullable
  private String realm;

  public static final String SERIALIZED_NAME_AUTH_SERVER_URL = "auth-server-url";
  @SerializedName(SERIALIZED_NAME_AUTH_SERVER_URL)
  @javax.annotation.Nullable
  private String authServerUrl;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  @javax.annotation.Nullable
  private Map<String, Object> credentials = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  @javax.annotation.Nullable
  private String resource;

  public PolicyEnforcerConfig() {
  }

  public PolicyEnforcerConfig enforcementMode(@javax.annotation.Nullable EnforcementMode enforcementMode) {
    this.enforcementMode = enforcementMode;
    return this;
  }

  /**
   * Get enforcementMode
   * @return enforcementMode
   */
  @javax.annotation.Nullable
  public EnforcementMode getEnforcementMode() {
    return enforcementMode;
  }

  public void setEnforcementMode(@javax.annotation.Nullable EnforcementMode enforcementMode) {
    this.enforcementMode = enforcementMode;
  }


  public PolicyEnforcerConfig paths(@javax.annotation.Nullable List<PathConfig> paths) {
    this.paths = paths;
    return this;
  }

  public PolicyEnforcerConfig addPathsItem(PathConfig pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * Get paths
   * @return paths
   */
  @javax.annotation.Nullable
  public List<PathConfig> getPaths() {
    return paths;
  }

  public void setPaths(@javax.annotation.Nullable List<PathConfig> paths) {
    this.paths = paths;
  }


  public PolicyEnforcerConfig pathCache(@javax.annotation.Nullable PathCacheConfig pathCache) {
    this.pathCache = pathCache;
    return this;
  }

  /**
   * Get pathCache
   * @return pathCache
   */
  @javax.annotation.Nullable
  public PathCacheConfig getPathCache() {
    return pathCache;
  }

  public void setPathCache(@javax.annotation.Nullable PathCacheConfig pathCache) {
    this.pathCache = pathCache;
  }


  public PolicyEnforcerConfig lazyLoadPaths(@javax.annotation.Nullable Boolean lazyLoadPaths) {
    this.lazyLoadPaths = lazyLoadPaths;
    return this;
  }

  /**
   * Get lazyLoadPaths
   * @return lazyLoadPaths
   */
  @javax.annotation.Nullable
  public Boolean getLazyLoadPaths() {
    return lazyLoadPaths;
  }

  public void setLazyLoadPaths(@javax.annotation.Nullable Boolean lazyLoadPaths) {
    this.lazyLoadPaths = lazyLoadPaths;
  }


  public PolicyEnforcerConfig onDenyRedirectTo(@javax.annotation.Nullable String onDenyRedirectTo) {
    this.onDenyRedirectTo = onDenyRedirectTo;
    return this;
  }

  /**
   * Get onDenyRedirectTo
   * @return onDenyRedirectTo
   */
  @javax.annotation.Nullable
  public String getOnDenyRedirectTo() {
    return onDenyRedirectTo;
  }

  public void setOnDenyRedirectTo(@javax.annotation.Nullable String onDenyRedirectTo) {
    this.onDenyRedirectTo = onDenyRedirectTo;
  }


  public PolicyEnforcerConfig userManagedAccess(@javax.annotation.Nullable Object userManagedAccess) {
    this.userManagedAccess = userManagedAccess;
    return this;
  }

  /**
   * Get userManagedAccess
   * @return userManagedAccess
   */
  @javax.annotation.Nullable
  public Object getUserManagedAccess() {
    return userManagedAccess;
  }

  public void setUserManagedAccess(@javax.annotation.Nullable Object userManagedAccess) {
    this.userManagedAccess = userManagedAccess;
  }


  public PolicyEnforcerConfig claimInformationPoint(@javax.annotation.Nullable Map<String, Map<String, Object>> claimInformationPoint) {
    this.claimInformationPoint = claimInformationPoint;
    return this;
  }

  public PolicyEnforcerConfig putClaimInformationPointItem(String key, Map<String, Object> claimInformationPointItem) {
    if (this.claimInformationPoint == null) {
      this.claimInformationPoint = new HashMap<>();
    }
    this.claimInformationPoint.put(key, claimInformationPointItem);
    return this;
  }

  /**
   * Get claimInformationPoint
   * @return claimInformationPoint
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Object>> getClaimInformationPoint() {
    return claimInformationPoint;
  }

  public void setClaimInformationPoint(@javax.annotation.Nullable Map<String, Map<String, Object>> claimInformationPoint) {
    this.claimInformationPoint = claimInformationPoint;
  }


  public PolicyEnforcerConfig httpMethodAsScope(@javax.annotation.Nullable Boolean httpMethodAsScope) {
    this.httpMethodAsScope = httpMethodAsScope;
    return this;
  }

  /**
   * Get httpMethodAsScope
   * @return httpMethodAsScope
   */
  @javax.annotation.Nullable
  public Boolean getHttpMethodAsScope() {
    return httpMethodAsScope;
  }

  public void setHttpMethodAsScope(@javax.annotation.Nullable Boolean httpMethodAsScope) {
    this.httpMethodAsScope = httpMethodAsScope;
  }


  public PolicyEnforcerConfig realm(@javax.annotation.Nullable String realm) {
    this.realm = realm;
    return this;
  }

  /**
   * Get realm
   * @return realm
   */
  @javax.annotation.Nullable
  public String getRealm() {
    return realm;
  }

  public void setRealm(@javax.annotation.Nullable String realm) {
    this.realm = realm;
  }


  public PolicyEnforcerConfig authServerUrl(@javax.annotation.Nullable String authServerUrl) {
    this.authServerUrl = authServerUrl;
    return this;
  }

  /**
   * Get authServerUrl
   * @return authServerUrl
   */
  @javax.annotation.Nullable
  public String getAuthServerUrl() {
    return authServerUrl;
  }

  public void setAuthServerUrl(@javax.annotation.Nullable String authServerUrl) {
    this.authServerUrl = authServerUrl;
  }


  public PolicyEnforcerConfig credentials(@javax.annotation.Nullable Map<String, Object> credentials) {
    this.credentials = credentials;
    return this;
  }

  public PolicyEnforcerConfig putCredentialsItem(String key, Object credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new HashMap<>();
    }
    this.credentials.put(key, credentialsItem);
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCredentials() {
    return credentials;
  }

  public void setCredentials(@javax.annotation.Nullable Map<String, Object> credentials) {
    this.credentials = credentials;
  }


  public PolicyEnforcerConfig resource(@javax.annotation.Nullable String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(@javax.annotation.Nullable String resource) {
    this.resource = resource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyEnforcerConfig policyEnforcerConfig = (PolicyEnforcerConfig) o;
    return Objects.equals(this.enforcementMode, policyEnforcerConfig.enforcementMode) &&
        Objects.equals(this.paths, policyEnforcerConfig.paths) &&
        Objects.equals(this.pathCache, policyEnforcerConfig.pathCache) &&
        Objects.equals(this.lazyLoadPaths, policyEnforcerConfig.lazyLoadPaths) &&
        Objects.equals(this.onDenyRedirectTo, policyEnforcerConfig.onDenyRedirectTo) &&
        Objects.equals(this.userManagedAccess, policyEnforcerConfig.userManagedAccess) &&
        Objects.equals(this.claimInformationPoint, policyEnforcerConfig.claimInformationPoint) &&
        Objects.equals(this.httpMethodAsScope, policyEnforcerConfig.httpMethodAsScope) &&
        Objects.equals(this.realm, policyEnforcerConfig.realm) &&
        Objects.equals(this.authServerUrl, policyEnforcerConfig.authServerUrl) &&
        Objects.equals(this.credentials, policyEnforcerConfig.credentials) &&
        Objects.equals(this.resource, policyEnforcerConfig.resource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enforcementMode, paths, pathCache, lazyLoadPaths, onDenyRedirectTo, userManagedAccess, claimInformationPoint, httpMethodAsScope, realm, authServerUrl, credentials, resource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyEnforcerConfig {\n");
    sb.append("    enforcementMode: ").append(toIndentedString(enforcementMode)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    pathCache: ").append(toIndentedString(pathCache)).append("\n");
    sb.append("    lazyLoadPaths: ").append(toIndentedString(lazyLoadPaths)).append("\n");
    sb.append("    onDenyRedirectTo: ").append(toIndentedString(onDenyRedirectTo)).append("\n");
    sb.append("    userManagedAccess: ").append(toIndentedString(userManagedAccess)).append("\n");
    sb.append("    claimInformationPoint: ").append(toIndentedString(claimInformationPoint)).append("\n");
    sb.append("    httpMethodAsScope: ").append(toIndentedString(httpMethodAsScope)).append("\n");
    sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
    sb.append("    authServerUrl: ").append(toIndentedString(authServerUrl)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enforcement-mode");
    openapiFields.add("paths");
    openapiFields.add("path-cache");
    openapiFields.add("lazy-load-paths");
    openapiFields.add("on-deny-redirect-to");
    openapiFields.add("user-managed-access");
    openapiFields.add("claim-information-point");
    openapiFields.add("http-method-as-scope");
    openapiFields.add("realm");
    openapiFields.add("auth-server-url");
    openapiFields.add("credentials");
    openapiFields.add("resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyEnforcerConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyEnforcerConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyEnforcerConfig is not found in the empty JSON string", PolicyEnforcerConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyEnforcerConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyEnforcerConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `enforcement-mode`
      if (jsonObj.get("enforcement-mode") != null && !jsonObj.get("enforcement-mode").isJsonNull()) {
        EnforcementMode.validateJsonElement(jsonObj.get("enforcement-mode"));
      }
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull()) {
        JsonArray jsonArraypaths = jsonObj.getAsJsonArray("paths");
        if (jsonArraypaths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
          }

          // validate the optional field `paths` (array)
          for (int i = 0; i < jsonArraypaths.size(); i++) {
            PathConfig.validateJsonElement(jsonArraypaths.get(i));
          };
        }
      }
      // validate the optional field `path-cache`
      if (jsonObj.get("path-cache") != null && !jsonObj.get("path-cache").isJsonNull()) {
        PathCacheConfig.validateJsonElement(jsonObj.get("path-cache"));
      }
      if ((jsonObj.get("on-deny-redirect-to") != null && !jsonObj.get("on-deny-redirect-to").isJsonNull()) && !jsonObj.get("on-deny-redirect-to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `on-deny-redirect-to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("on-deny-redirect-to").toString()));
      }
      if ((jsonObj.get("realm") != null && !jsonObj.get("realm").isJsonNull()) && !jsonObj.get("realm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realm").toString()));
      }
      if ((jsonObj.get("auth-server-url") != null && !jsonObj.get("auth-server-url").isJsonNull()) && !jsonObj.get("auth-server-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-server-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-server-url").toString()));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyEnforcerConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyEnforcerConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyEnforcerConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyEnforcerConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyEnforcerConfig>() {
           @Override
           public void write(JsonWriter out, PolicyEnforcerConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyEnforcerConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyEnforcerConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyEnforcerConfig
   * @throws IOException if the JSON string is invalid with respect to PolicyEnforcerConfig
   */
  public static PolicyEnforcerConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyEnforcerConfig.class);
  }

  /**
   * Convert an instance of PolicyEnforcerConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

