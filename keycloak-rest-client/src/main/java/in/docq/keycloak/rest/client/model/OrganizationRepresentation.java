/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import in.docq.keycloak.rest.client.model.IdentityProviderRepresentation;
import in.docq.keycloak.rest.client.model.MemberRepresentation;
import in.docq.keycloak.rest.client.model.OrganizationDomainRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;

import in.docq.keycloak.rest.client.JSON;

/**
 * OrganizationRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class OrganizationRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  @javax.annotation.Nullable
  private String alias;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  @javax.annotation.Nullable
  private String redirectUrl;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @javax.annotation.Nullable
  private Map<String, List<String>> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  @javax.annotation.Nullable
  private Set<OrganizationDomainRepresentation> domains = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  @javax.annotation.Nullable
  private List<MemberRepresentation> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDERS = "identityProviders";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDERS)
  @javax.annotation.Nullable
  private List<IdentityProviderRepresentation> identityProviders = new ArrayList<>();

  public OrganizationRepresentation() {
  }

  public OrganizationRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public OrganizationRepresentation name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public OrganizationRepresentation alias(@javax.annotation.Nullable String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(@javax.annotation.Nullable String alias) {
    this.alias = alias;
  }


  public OrganizationRepresentation enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public OrganizationRepresentation description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public OrganizationRepresentation redirectUrl(@javax.annotation.Nullable String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(@javax.annotation.Nullable String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public OrganizationRepresentation attributes(@javax.annotation.Nullable Map<String, List<String>> attributes) {
    this.attributes = attributes;
    return this;
  }

  public OrganizationRepresentation putAttributesItem(String key, List<String> attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getAttributes() {
    return attributes;
  }

  public void setAttributes(@javax.annotation.Nullable Map<String, List<String>> attributes) {
    this.attributes = attributes;
  }


  public OrganizationRepresentation domains(@javax.annotation.Nullable Set<OrganizationDomainRepresentation> domains) {
    this.domains = domains;
    return this;
  }

  public OrganizationRepresentation addDomainsItem(OrganizationDomainRepresentation domainsItem) {
    if (this.domains == null) {
      this.domains = new LinkedHashSet<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

  /**
   * Get domains
   * @return domains
   */
  @javax.annotation.Nullable
  public Set<OrganizationDomainRepresentation> getDomains() {
    return domains;
  }

  public void setDomains(@javax.annotation.Nullable Set<OrganizationDomainRepresentation> domains) {
    this.domains = domains;
  }


  public OrganizationRepresentation members(@javax.annotation.Nullable List<MemberRepresentation> members) {
    this.members = members;
    return this;
  }

  public OrganizationRepresentation addMembersItem(MemberRepresentation membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nullable
  public List<MemberRepresentation> getMembers() {
    return members;
  }

  public void setMembers(@javax.annotation.Nullable List<MemberRepresentation> members) {
    this.members = members;
  }


  public OrganizationRepresentation identityProviders(@javax.annotation.Nullable List<IdentityProviderRepresentation> identityProviders) {
    this.identityProviders = identityProviders;
    return this;
  }

  public OrganizationRepresentation addIdentityProvidersItem(IdentityProviderRepresentation identityProvidersItem) {
    if (this.identityProviders == null) {
      this.identityProviders = new ArrayList<>();
    }
    this.identityProviders.add(identityProvidersItem);
    return this;
  }

  /**
   * Get identityProviders
   * @return identityProviders
   */
  @javax.annotation.Nullable
  public List<IdentityProviderRepresentation> getIdentityProviders() {
    return identityProviders;
  }

  public void setIdentityProviders(@javax.annotation.Nullable List<IdentityProviderRepresentation> identityProviders) {
    this.identityProviders = identityProviders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationRepresentation organizationRepresentation = (OrganizationRepresentation) o;
    return Objects.equals(this.id, organizationRepresentation.id) &&
        Objects.equals(this.name, organizationRepresentation.name) &&
        Objects.equals(this.alias, organizationRepresentation.alias) &&
        Objects.equals(this.enabled, organizationRepresentation.enabled) &&
        Objects.equals(this.description, organizationRepresentation.description) &&
        Objects.equals(this.redirectUrl, organizationRepresentation.redirectUrl) &&
        Objects.equals(this.attributes, organizationRepresentation.attributes) &&
        Objects.equals(this.domains, organizationRepresentation.domains) &&
        Objects.equals(this.members, organizationRepresentation.members) &&
        Objects.equals(this.identityProviders, organizationRepresentation.identityProviders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, alias, enabled, description, redirectUrl, attributes, domains, members, identityProviders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    identityProviders: ").append(toIndentedString(identityProviders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("alias");
    openapiFields.add("enabled");
    openapiFields.add("description");
    openapiFields.add("redirectUrl");
    openapiFields.add("attributes");
    openapiFields.add("domains");
    openapiFields.add("members");
    openapiFields.add("identityProviders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationRepresentation is not found in the empty JSON string", OrganizationRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull()) {
        JsonArray jsonArraydomains = jsonObj.getAsJsonArray("domains");
        if (jsonArraydomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("domains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
          }

          // validate the optional field `domains` (array)
          for (int i = 0; i < jsonArraydomains.size(); i++) {
            OrganizationDomainRepresentation.validateJsonElement(jsonArraydomains.get(i));
          };
        }
      }
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            MemberRepresentation.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
      if (jsonObj.get("identityProviders") != null && !jsonObj.get("identityProviders").isJsonNull()) {
        JsonArray jsonArrayidentityProviders = jsonObj.getAsJsonArray("identityProviders");
        if (jsonArrayidentityProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityProviders` to be an array in the JSON string but got `%s`", jsonObj.get("identityProviders").toString()));
          }

          // validate the optional field `identityProviders` (array)
          for (int i = 0; i < jsonArrayidentityProviders.size(); i++) {
            IdentityProviderRepresentation.validateJsonElement(jsonArrayidentityProviders.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationRepresentation>() {
           @Override
           public void write(JsonWriter out, OrganizationRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationRepresentation
   * @throws IOException if the JSON string is invalid with respect to OrganizationRepresentation
   */
  public static OrganizationRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationRepresentation.class);
  }

  /**
   * Convert an instance of OrganizationRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

