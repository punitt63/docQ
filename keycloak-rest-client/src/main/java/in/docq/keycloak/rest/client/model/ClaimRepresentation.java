/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * ClaimRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ClaimRepresentation {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private Boolean name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private Boolean username;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private Boolean profile;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  @javax.annotation.Nullable
  private Boolean picture;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  @javax.annotation.Nullable
  private Boolean website;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private Boolean email;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  @javax.annotation.Nullable
  private Boolean gender;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  @javax.annotation.Nullable
  private Boolean locale;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private Boolean address;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private Boolean phone;

  public ClaimRepresentation() {
  }

  public ClaimRepresentation name(@javax.annotation.Nullable Boolean name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public Boolean getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable Boolean name) {
    this.name = name;
  }


  public ClaimRepresentation username(@javax.annotation.Nullable Boolean username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public Boolean getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable Boolean username) {
    this.username = username;
  }


  public ClaimRepresentation profile(@javax.annotation.Nullable Boolean profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public Boolean getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable Boolean profile) {
    this.profile = profile;
  }


  public ClaimRepresentation picture(@javax.annotation.Nullable Boolean picture) {
    this.picture = picture;
    return this;
  }

  /**
   * Get picture
   * @return picture
   */
  @javax.annotation.Nullable
  public Boolean getPicture() {
    return picture;
  }

  public void setPicture(@javax.annotation.Nullable Boolean picture) {
    this.picture = picture;
  }


  public ClaimRepresentation website(@javax.annotation.Nullable Boolean website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public Boolean getWebsite() {
    return website;
  }

  public void setWebsite(@javax.annotation.Nullable Boolean website) {
    this.website = website;
  }


  public ClaimRepresentation email(@javax.annotation.Nullable Boolean email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public Boolean getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable Boolean email) {
    this.email = email;
  }


  public ClaimRepresentation gender(@javax.annotation.Nullable Boolean gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public Boolean getGender() {
    return gender;
  }

  public void setGender(@javax.annotation.Nullable Boolean gender) {
    this.gender = gender;
  }


  public ClaimRepresentation locale(@javax.annotation.Nullable Boolean locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public Boolean getLocale() {
    return locale;
  }

  public void setLocale(@javax.annotation.Nullable Boolean locale) {
    this.locale = locale;
  }


  public ClaimRepresentation address(@javax.annotation.Nullable Boolean address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Boolean getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable Boolean address) {
    this.address = address;
  }


  public ClaimRepresentation phone(@javax.annotation.Nullable Boolean phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public Boolean getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable Boolean phone) {
    this.phone = phone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimRepresentation claimRepresentation = (ClaimRepresentation) o;
    return Objects.equals(this.name, claimRepresentation.name) &&
        Objects.equals(this.username, claimRepresentation.username) &&
        Objects.equals(this.profile, claimRepresentation.profile) &&
        Objects.equals(this.picture, claimRepresentation.picture) &&
        Objects.equals(this.website, claimRepresentation.website) &&
        Objects.equals(this.email, claimRepresentation.email) &&
        Objects.equals(this.gender, claimRepresentation.gender) &&
        Objects.equals(this.locale, claimRepresentation.locale) &&
        Objects.equals(this.address, claimRepresentation.address) &&
        Objects.equals(this.phone, claimRepresentation.phone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, username, profile, picture, website, email, gender, locale, address, phone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimRepresentation {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("username");
    openapiFields.add("profile");
    openapiFields.add("picture");
    openapiFields.add("website");
    openapiFields.add("email");
    openapiFields.add("gender");
    openapiFields.add("locale");
    openapiFields.add("address");
    openapiFields.add("phone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClaimRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClaimRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClaimRepresentation is not found in the empty JSON string", ClaimRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClaimRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClaimRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClaimRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClaimRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClaimRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClaimRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ClaimRepresentation>() {
           @Override
           public void write(JsonWriter out, ClaimRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClaimRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClaimRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClaimRepresentation
   * @throws IOException if the JSON string is invalid with respect to ClaimRepresentation
   */
  public static ClaimRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClaimRepresentation.class);
  }

  /**
   * Convert an instance of ClaimRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

