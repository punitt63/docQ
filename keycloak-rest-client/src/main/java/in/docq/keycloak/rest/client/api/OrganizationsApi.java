/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.IdentityProviderRepresentation;
import in.docq.keycloak.rest.client.model.MemberRepresentation;
import in.docq.keycloak.rest.client.model.OrganizationRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmOrganizationsGet
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation if true, return the full representation. Otherwise, only the basic fields are returned. (optional, default to false)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned - defaults to 10 (optional)
     * @param q A query to search for custom attributes, in the format &#39;key1:value2 key2:value2&#39; (optional)
     * @param search A String representing either an organization name or domain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsGetCall(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String q, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsGetValidateBeforeCall(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String q, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsGet(Async)");
        }

        return adminRealmsRealmOrganizationsGetCall(realm, briefRepresentation, exact, first, max, q, search, _callback);

    }

    /**
     * Returns a paginated list of organizations filtered according to the specified parameters
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation if true, return the full representation. Otherwise, only the basic fields are returned. (optional, default to false)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned - defaults to 10 (optional)
     * @param q A query to search for custom attributes, in the format &#39;key1:value2 key2:value2&#39; (optional)
     * @param search A String representing either an organization name or domain (optional)
     * @return List&lt;OrganizationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizationRepresentation> adminRealmsRealmOrganizationsGet(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String q, String search) throws ApiException {
        ApiResponse<List<OrganizationRepresentation>> localVarResp = adminRealmsRealmOrganizationsGetWithHttpInfo(realm, briefRepresentation, exact, first, max, q, search);
        return localVarResp.getData();
    }

    /**
     * Returns a paginated list of organizations filtered according to the specified parameters
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation if true, return the full representation. Otherwise, only the basic fields are returned. (optional, default to false)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned - defaults to 10 (optional)
     * @param q A query to search for custom attributes, in the format &#39;key1:value2 key2:value2&#39; (optional)
     * @param search A String representing either an organization name or domain (optional)
     * @return ApiResponse&lt;List&lt;OrganizationRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizationRepresentation>> adminRealmsRealmOrganizationsGetWithHttpInfo(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String q, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsGetValidateBeforeCall(realm, briefRepresentation, exact, first, max, q, search, null);
        Type localVarReturnType = new TypeToken<List<OrganizationRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a paginated list of organizations filtered according to the specified parameters (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param briefRepresentation if true, return the full representation. Otherwise, only the basic fields are returned. (optional, default to false)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned - defaults to 10 (optional)
     * @param q A query to search for custom attributes, in the format &#39;key1:value2 key2:value2&#39; (optional)
     * @param search A String representing either an organization name or domain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsGetAsync(String realm, Boolean briefRepresentation, Boolean exact, Integer first, Integer max, String q, String search, final ApiCallback<List<OrganizationRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsGetValidateBeforeCall(realm, briefRepresentation, exact, first, max, q, search, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet
     * @param realm realm name (not id!) (required)
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetCall(String realm, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/members/{member-id}/organizations"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "member-id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetValidateBeforeCall(String realm, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet(Async)");
        }

        return adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetCall(realm, memberId, _callback);

    }

    /**
     * Returns the organizations associated with the user that has the specified id
     * 
     * @param realm realm name (not id!) (required)
     * @param memberId  (required)
     * @return List&lt;OrganizationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizationRepresentation> adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet(String realm, String memberId) throws ApiException {
        ApiResponse<List<OrganizationRepresentation>> localVarResp = adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetWithHttpInfo(realm, memberId);
        return localVarResp.getData();
    }

    /**
     * Returns the organizations associated with the user that has the specified id
     * 
     * @param realm realm name (not id!) (required)
     * @param memberId  (required)
     * @return ApiResponse&lt;List&lt;OrganizationRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizationRepresentation>> adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetWithHttpInfo(String realm, String memberId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetValidateBeforeCall(realm, memberId, null);
        Type localVarReturnType = new TypeToken<List<OrganizationRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the organizations associated with the user that has the specified id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetAsync(String realm, String memberId, final ApiCallback<List<OrganizationRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetValidateBeforeCall(realm, memberId, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdDelete
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdDeleteCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdDeleteValidateBeforeCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdDelete(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdDelete(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdDeleteCall(realm, orgId, _callback);

    }

    /**
     * Deletes the organization
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdDelete(String realm, String orgId) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdDeleteWithHttpInfo(realm, orgId);
    }

    /**
     * Deletes the organization
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdDeleteWithHttpInfo(String realm, String orgId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdDeleteValidateBeforeCall(realm, orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the organization (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdDeleteAsync(String realm, String orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdDeleteValidateBeforeCall(realm, orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdGetCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdGetValidateBeforeCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdGetCall(realm, orgId, _callback);

    }

    /**
     * Returns the organization representation
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return OrganizationRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationRepresentation adminRealmsRealmOrganizationsOrgIdGet(String realm, String orgId) throws ApiException {
        ApiResponse<OrganizationRepresentation> localVarResp = adminRealmsRealmOrganizationsOrgIdGetWithHttpInfo(realm, orgId);
        return localVarResp.getData();
    }

    /**
     * Returns the organization representation
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return ApiResponse&lt;OrganizationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationRepresentation> adminRealmsRealmOrganizationsOrgIdGetWithHttpInfo(String realm, String orgId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdGetValidateBeforeCall(realm, orgId, null);
        Type localVarReturnType = new TypeToken<OrganizationRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the organization representation (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdGetAsync(String realm, String orgId, final ApiCallback<OrganizationRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdGetValidateBeforeCall(realm, orgId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteCall(String realm, String orgId, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/identity-providers/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteValidateBeforeCall(String realm, String orgId, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteCall(realm, orgId, alias, _callback);

    }

    /**
     * Removes the identity provider with the specified alias from the organization
     * Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete(String realm, String orgId, String alias) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteWithHttpInfo(realm, orgId, alias);
    }

    /**
     * Removes the identity provider with the specified alias from the organization
     * Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteWithHttpInfo(String realm, String orgId, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteValidateBeforeCall(realm, orgId, alias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the identity provider with the specified alias from the organization (asynchronously)
     * Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteAsync(String realm, String orgId, String alias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteValidateBeforeCall(realm, orgId, alias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetCall(String realm, String orgId, String alias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/identity-providers/{alias}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "alias" + "}", localVarApiClient.escapeString(alias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetValidateBeforeCall(String realm, String orgId, String alias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet(Async)");
        }

        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetCall(realm, orgId, alias, _callback);

    }

    /**
     * Returns the identity provider associated with the organization that has the specified alias
     * Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @return IdentityProviderRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IdentityProviderRepresentation adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet(String realm, String orgId, String alias) throws ApiException {
        ApiResponse<IdentityProviderRepresentation> localVarResp = adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetWithHttpInfo(realm, orgId, alias);
        return localVarResp.getData();
    }

    /**
     * Returns the identity provider associated with the organization that has the specified alias
     * Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @return ApiResponse&lt;IdentityProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentityProviderRepresentation> adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetWithHttpInfo(String realm, String orgId, String alias) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetValidateBeforeCall(realm, orgId, alias, null);
        Type localVarReturnType = new TypeToken<IdentityProviderRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the identity provider associated with the organization that has the specified alias (asynchronously)
     * Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param alias  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetAsync(String realm, String orgId, String alias, final ApiCallback<IdentityProviderRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetValidateBeforeCall(realm, orgId, alias, _callback);
        Type localVarReturnType = new TypeToken<IdentityProviderRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdIdentityProvidersGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/identity-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetValidateBeforeCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetCall(realm, orgId, _callback);

    }

    /**
     * Returns all identity providers associated with the organization
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return List&lt;IdentityProviderRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentityProviderRepresentation> adminRealmsRealmOrganizationsOrgIdIdentityProvidersGet(String realm, String orgId) throws ApiException {
        ApiResponse<List<IdentityProviderRepresentation>> localVarResp = adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetWithHttpInfo(realm, orgId);
        return localVarResp.getData();
    }

    /**
     * Returns all identity providers associated with the organization
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return ApiResponse&lt;List&lt;IdentityProviderRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentityProviderRepresentation>> adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetWithHttpInfo(String realm, String orgId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetValidateBeforeCall(realm, orgId, null);
        Type localVarReturnType = new TypeToken<List<IdentityProviderRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all identity providers associated with the organization (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetAsync(String realm, String orgId, final ApiCallback<List<IdentityProviderRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersGetValidateBeforeCall(realm, orgId, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProviderRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdIdentityProvidersPost
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostCall(String realm, String orgId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/identity-providers"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostValidateBeforeCall(String realm, String orgId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersPost(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdIdentityProvidersPost(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostCall(realm, orgId, body, _callback);

    }

    /**
     * Adds the identity provider with the specified id to the organization
     * Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdIdentityProvidersPost(String realm, String orgId, String body) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostWithHttpInfo(realm, orgId, body);
    }

    /**
     * Adds the identity provider with the specified id to the organization
     * Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostWithHttpInfo(String realm, String orgId, String body) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostValidateBeforeCall(realm, orgId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds the identity provider with the specified id to the organization (asynchronously)
     * Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostAsync(String realm, String orgId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdIdentityProvidersPostValidateBeforeCall(realm, orgId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersCountGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersCountGetCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members/count"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersCountGetValidateBeforeCall(String realm, String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersCountGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersCountGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersCountGetCall(realm, orgId, _callback);

    }

    /**
     * Returns number of members in the organization.
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long adminRealmsRealmOrganizationsOrgIdMembersCountGet(String realm, String orgId) throws ApiException {
        ApiResponse<Long> localVarResp = adminRealmsRealmOrganizationsOrgIdMembersCountGetWithHttpInfo(realm, orgId);
        return localVarResp.getData();
    }

    /**
     * Returns number of members in the organization.
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> adminRealmsRealmOrganizationsOrgIdMembersCountGetWithHttpInfo(String realm, String orgId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersCountGetValidateBeforeCall(realm, orgId, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns number of members in the organization. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersCountGetAsync(String realm, String orgId, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersCountGetValidateBeforeCall(realm, orgId, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned. Defaults to 10 (optional)
     * @param membershipType The membership type (optional)
     * @param search A String representing either a member&#39;s username, e-mail, first name, or last name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersGetCall(String realm, String orgId, Boolean exact, Integer first, Integer max, String membershipType, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (membershipType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membershipType", membershipType));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersGetValidateBeforeCall(String realm, String orgId, Boolean exact, Integer first, Integer max, String membershipType, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersGetCall(realm, orgId, exact, first, max, membershipType, search, _callback);

    }

    /**
     * Returns a paginated list of organization members filtered according to the specified parameters
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned. Defaults to 10 (optional)
     * @param membershipType The membership type (optional)
     * @param search A String representing either a member&#39;s username, e-mail, first name, or last name. (optional)
     * @return List&lt;MemberRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<MemberRepresentation> adminRealmsRealmOrganizationsOrgIdMembersGet(String realm, String orgId, Boolean exact, Integer first, Integer max, String membershipType, String search) throws ApiException {
        ApiResponse<List<MemberRepresentation>> localVarResp = adminRealmsRealmOrganizationsOrgIdMembersGetWithHttpInfo(realm, orgId, exact, first, max, membershipType, search);
        return localVarResp.getData();
    }

    /**
     * Returns a paginated list of organization members filtered according to the specified parameters
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned. Defaults to 10 (optional)
     * @param membershipType The membership type (optional)
     * @param search A String representing either a member&#39;s username, e-mail, first name, or last name. (optional)
     * @return ApiResponse&lt;List&lt;MemberRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MemberRepresentation>> adminRealmsRealmOrganizationsOrgIdMembersGetWithHttpInfo(String realm, String orgId, Boolean exact, Integer first, Integer max, String membershipType, String search) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersGetValidateBeforeCall(realm, orgId, exact, first, max, membershipType, search, null);
        Type localVarReturnType = new TypeToken<List<MemberRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a paginated list of organization members filtered according to the specified parameters (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param exact Boolean which defines whether the param &#39;search&#39; must match exactly or not (optional)
     * @param first The position of the first result to be processed (pagination offset) (optional)
     * @param max The maximum number of results to be returned. Defaults to 10 (optional)
     * @param membershipType The membership type (optional)
     * @param search A String representing either a member&#39;s username, e-mail, first name, or last name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersGetAsync(String realm, String orgId, Boolean exact, Integer first, Integer max, String membershipType, String search, final ApiCallback<List<MemberRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersGetValidateBeforeCall(realm, orgId, exact, first, max, membershipType, search, _callback);
        Type localVarReturnType = new TypeToken<List<MemberRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param id  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostCall(String realm, String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members/invite-existing-user"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostValidateBeforeCall(String realm, String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostCall(realm, orgId, id, _callback);

    }

    /**
     * Invites an existing user to the organization, using the specified user id
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param id  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost(String realm, String orgId, String id) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostWithHttpInfo(realm, orgId, id);
    }

    /**
     * Invites an existing user to the organization, using the specified user id
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param id  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostWithHttpInfo(String realm, String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostValidateBeforeCall(realm, orgId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invites an existing user to the organization, using the specified user id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param id  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostAsync(String realm, String orgId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostValidateBeforeCall(realm, orgId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersInviteUserPost
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostCall(String realm, String orgId, String email, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members/invite-user"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (firstName != null) {
            localVarFormParams.put("firstName", firstName);
        }

        if (lastName != null) {
            localVarFormParams.put("lastName", lastName);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostValidateBeforeCall(String realm, String orgId, String email, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersInviteUserPost(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersInviteUserPost(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostCall(realm, orgId, email, firstName, lastName, _callback);

    }

    /**
     * Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
     * If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdMembersInviteUserPost(String realm, String orgId, String email, String firstName, String lastName) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostWithHttpInfo(realm, orgId, email, firstName, lastName);
    }

    /**
     * Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
     * If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostWithHttpInfo(String realm, String orgId, String email, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostValidateBeforeCall(realm, orgId, email, firstName, lastName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invites an existing user or sends a registration link to a new user, based on the provided e-mail address. (asynchronously)
     * If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param email  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostAsync(String realm, String orgId, String email, String firstName, String lastName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersInviteUserPostValidateBeforeCall(realm, orgId, email, firstName, lastName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteCall(String realm, String orgId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members/{member-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "member-id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteValidateBeforeCall(String realm, String orgId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteCall(realm, orgId, memberId, _callback);

    }

    /**
     * Removes the user with the specified id from the organization
     * Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete(String realm, String orgId, String memberId) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteWithHttpInfo(realm, orgId, memberId);
    }

    /**
     * Removes the user with the specified id from the organization
     * Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteWithHttpInfo(String realm, String orgId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteValidateBeforeCall(realm, orgId, memberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the user with the specified id from the organization (asynchronously)
     * Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteAsync(String realm, String orgId, String memberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteValidateBeforeCall(realm, orgId, memberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersMemberIdGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetCall(String realm, String orgId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members/{member-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "member-id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetValidateBeforeCall(String realm, String orgId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdGet(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetCall(realm, orgId, memberId, _callback);

    }

    /**
     * Returns the member of the organization with the specified id
     * Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @return MemberRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MemberRepresentation adminRealmsRealmOrganizationsOrgIdMembersMemberIdGet(String realm, String orgId, String memberId) throws ApiException {
        ApiResponse<MemberRepresentation> localVarResp = adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetWithHttpInfo(realm, orgId, memberId);
        return localVarResp.getData();
    }

    /**
     * Returns the member of the organization with the specified id
     * Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @return ApiResponse&lt;MemberRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MemberRepresentation> adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetWithHttpInfo(String realm, String orgId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetValidateBeforeCall(realm, orgId, memberId, null);
        Type localVarReturnType = new TypeToken<MemberRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the member of the organization with the specified id (asynchronously)
     * Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetAsync(String realm, String orgId, String memberId, final ApiCallback<MemberRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersMemberIdGetValidateBeforeCall(realm, orgId, memberId, _callback);
        Type localVarReturnType = new TypeToken<MemberRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetCall(String realm, String orgId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members/{member-id}/organizations"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "member-id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetValidateBeforeCall(String realm, String orgId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetCall(realm, orgId, memberId, _callback);

    }

    /**
     * Returns the organizations associated with the user that has the specified id
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @return List&lt;OrganizationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizationRepresentation> adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet(String realm, String orgId, String memberId) throws ApiException {
        ApiResponse<List<OrganizationRepresentation>> localVarResp = adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetWithHttpInfo(realm, orgId, memberId);
        return localVarResp.getData();
    }

    /**
     * Returns the organizations associated with the user that has the specified id
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @return ApiResponse&lt;List&lt;OrganizationRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizationRepresentation>> adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetWithHttpInfo(String realm, String orgId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetValidateBeforeCall(realm, orgId, memberId, null);
        Type localVarReturnType = new TypeToken<List<OrganizationRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the organizations associated with the user that has the specified id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetAsync(String realm, String orgId, String memberId, final ApiCallback<List<OrganizationRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetValidateBeforeCall(realm, orgId, memberId, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdMembersPost
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersPostCall(String realm, String orgId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}/members"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersPostValidateBeforeCall(String realm, String orgId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdMembersPost(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdMembersPost(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdMembersPostCall(realm, orgId, body, _callback);

    }

    /**
     * Adds the user with the specified id as a member of the organization
     * Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdMembersPost(String realm, String orgId, String body) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdMembersPostWithHttpInfo(realm, orgId, body);
    }

    /**
     * Adds the user with the specified id as a member of the organization
     * Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdMembersPostWithHttpInfo(String realm, String orgId, String body) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersPostValidateBeforeCall(realm, orgId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds the user with the specified id as a member of the organization (asynchronously)
     * Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdMembersPostAsync(String realm, String orgId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdMembersPostValidateBeforeCall(realm, orgId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsOrgIdPut
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param organizationRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdPutCall(String realm, String orgId, OrganizationRepresentation organizationRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations/{org-id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "org-id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsOrgIdPutValidateBeforeCall(String realm, String orgId, OrganizationRepresentation organizationRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsOrgIdPut(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adminRealmsRealmOrganizationsOrgIdPut(Async)");
        }

        return adminRealmsRealmOrganizationsOrgIdPutCall(realm, orgId, organizationRepresentation, _callback);

    }

    /**
     * Updates the organization
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param organizationRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsOrgIdPut(String realm, String orgId, OrganizationRepresentation organizationRepresentation) throws ApiException {
        adminRealmsRealmOrganizationsOrgIdPutWithHttpInfo(realm, orgId, organizationRepresentation);
    }

    /**
     * Updates the organization
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param organizationRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsOrgIdPutWithHttpInfo(String realm, String orgId, OrganizationRepresentation organizationRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdPutValidateBeforeCall(realm, orgId, organizationRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the organization (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param orgId  (required)
     * @param organizationRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsOrgIdPutAsync(String realm, String orgId, OrganizationRepresentation organizationRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsOrgIdPutValidateBeforeCall(realm, orgId, organizationRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmOrganizationsPost
     * @param realm realm name (not id!) (required)
     * @param organizationRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsPostCall(String realm, OrganizationRepresentation organizationRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/organizations"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmOrganizationsPostValidateBeforeCall(String realm, OrganizationRepresentation organizationRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmOrganizationsPost(Async)");
        }

        return adminRealmsRealmOrganizationsPostCall(realm, organizationRepresentation, _callback);

    }

    /**
     * Creates a new organization
     * 
     * @param realm realm name (not id!) (required)
     * @param organizationRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmOrganizationsPost(String realm, OrganizationRepresentation organizationRepresentation) throws ApiException {
        adminRealmsRealmOrganizationsPostWithHttpInfo(realm, organizationRepresentation);
    }

    /**
     * Creates a new organization
     * 
     * @param realm realm name (not id!) (required)
     * @param organizationRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmOrganizationsPostWithHttpInfo(String realm, OrganizationRepresentation organizationRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsPostValidateBeforeCall(realm, organizationRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new organization (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param organizationRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmOrganizationsPostAsync(String realm, OrganizationRepresentation organizationRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmOrganizationsPostValidateBeforeCall(realm, organizationRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
