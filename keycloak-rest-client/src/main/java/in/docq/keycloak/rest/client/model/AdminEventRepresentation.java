/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import in.docq.keycloak.rest.client.model.AuthDetailsRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * AdminEventRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AdminEventRepresentation {
  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private Long time;

  public static final String SERIALIZED_NAME_REALM_ID = "realmId";
  @SerializedName(SERIALIZED_NAME_REALM_ID)
  @javax.annotation.Nullable
  private String realmId;

  public static final String SERIALIZED_NAME_AUTH_DETAILS = "authDetails";
  @SerializedName(SERIALIZED_NAME_AUTH_DETAILS)
  @javax.annotation.Nullable
  private AuthDetailsRepresentation authDetails;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  @javax.annotation.Nullable
  private String operationType;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  @javax.annotation.Nullable
  private String resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_PATH = "resourcePath";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PATH)
  @javax.annotation.Nullable
  private String resourcePath;

  public static final String SERIALIZED_NAME_REPRESENTATION = "representation";
  @SerializedName(SERIALIZED_NAME_REPRESENTATION)
  @javax.annotation.Nullable
  private String representation;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  @javax.annotation.Nullable
  private Map<String, String> details = new HashMap<>();

  public AdminEventRepresentation() {
  }

  public AdminEventRepresentation time(@javax.annotation.Nullable Long time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public Long getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable Long time) {
    this.time = time;
  }


  public AdminEventRepresentation realmId(@javax.annotation.Nullable String realmId) {
    this.realmId = realmId;
    return this;
  }

  /**
   * Get realmId
   * @return realmId
   */
  @javax.annotation.Nullable
  public String getRealmId() {
    return realmId;
  }

  public void setRealmId(@javax.annotation.Nullable String realmId) {
    this.realmId = realmId;
  }


  public AdminEventRepresentation authDetails(@javax.annotation.Nullable AuthDetailsRepresentation authDetails) {
    this.authDetails = authDetails;
    return this;
  }

  /**
   * Get authDetails
   * @return authDetails
   */
  @javax.annotation.Nullable
  public AuthDetailsRepresentation getAuthDetails() {
    return authDetails;
  }

  public void setAuthDetails(@javax.annotation.Nullable AuthDetailsRepresentation authDetails) {
    this.authDetails = authDetails;
  }


  public AdminEventRepresentation operationType(@javax.annotation.Nullable String operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Get operationType
   * @return operationType
   */
  @javax.annotation.Nullable
  public String getOperationType() {
    return operationType;
  }

  public void setOperationType(@javax.annotation.Nullable String operationType) {
    this.operationType = operationType;
  }


  public AdminEventRepresentation resourceType(@javax.annotation.Nullable String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(@javax.annotation.Nullable String resourceType) {
    this.resourceType = resourceType;
  }


  public AdminEventRepresentation resourcePath(@javax.annotation.Nullable String resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }

  /**
   * Get resourcePath
   * @return resourcePath
   */
  @javax.annotation.Nullable
  public String getResourcePath() {
    return resourcePath;
  }

  public void setResourcePath(@javax.annotation.Nullable String resourcePath) {
    this.resourcePath = resourcePath;
  }


  public AdminEventRepresentation representation(@javax.annotation.Nullable String representation) {
    this.representation = representation;
    return this;
  }

  /**
   * Get representation
   * @return representation
   */
  @javax.annotation.Nullable
  public String getRepresentation() {
    return representation;
  }

  public void setRepresentation(@javax.annotation.Nullable String representation) {
    this.representation = representation;
  }


  public AdminEventRepresentation error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }


  public AdminEventRepresentation details(@javax.annotation.Nullable Map<String, String> details) {
    this.details = details;
    return this;
  }

  public AdminEventRepresentation putDetailsItem(String key, String detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public Map<String, String> getDetails() {
    return details;
  }

  public void setDetails(@javax.annotation.Nullable Map<String, String> details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminEventRepresentation adminEventRepresentation = (AdminEventRepresentation) o;
    return Objects.equals(this.time, adminEventRepresentation.time) &&
        Objects.equals(this.realmId, adminEventRepresentation.realmId) &&
        Objects.equals(this.authDetails, adminEventRepresentation.authDetails) &&
        Objects.equals(this.operationType, adminEventRepresentation.operationType) &&
        Objects.equals(this.resourceType, adminEventRepresentation.resourceType) &&
        Objects.equals(this.resourcePath, adminEventRepresentation.resourcePath) &&
        Objects.equals(this.representation, adminEventRepresentation.representation) &&
        Objects.equals(this.error, adminEventRepresentation.error) &&
        Objects.equals(this.details, adminEventRepresentation.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, realmId, authDetails, operationType, resourceType, resourcePath, representation, error, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminEventRepresentation {\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    realmId: ").append(toIndentedString(realmId)).append("\n");
    sb.append("    authDetails: ").append(toIndentedString(authDetails)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourcePath: ").append(toIndentedString(resourcePath)).append("\n");
    sb.append("    representation: ").append(toIndentedString(representation)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("time");
    openapiFields.add("realmId");
    openapiFields.add("authDetails");
    openapiFields.add("operationType");
    openapiFields.add("resourceType");
    openapiFields.add("resourcePath");
    openapiFields.add("representation");
    openapiFields.add("error");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminEventRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminEventRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminEventRepresentation is not found in the empty JSON string", AdminEventRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminEventRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminEventRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("realmId") != null && !jsonObj.get("realmId").isJsonNull()) && !jsonObj.get("realmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realmId").toString()));
      }
      // validate the optional field `authDetails`
      if (jsonObj.get("authDetails") != null && !jsonObj.get("authDetails").isJsonNull()) {
        AuthDetailsRepresentation.validateJsonElement(jsonObj.get("authDetails"));
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("resourcePath") != null && !jsonObj.get("resourcePath").isJsonNull()) && !jsonObj.get("resourcePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePath").toString()));
      }
      if ((jsonObj.get("representation") != null && !jsonObj.get("representation").isJsonNull()) && !jsonObj.get("representation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `representation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("representation").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminEventRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminEventRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminEventRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminEventRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminEventRepresentation>() {
           @Override
           public void write(JsonWriter out, AdminEventRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminEventRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminEventRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminEventRepresentation
   * @throws IOException if the JSON string is invalid with respect to AdminEventRepresentation
   */
  public static AdminEventRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminEventRepresentation.class);
  }

  /**
   * Convert an instance of AdminEventRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

