/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import in.docq.keycloak.rest.client.model.EnforcementMode;
import in.docq.keycloak.rest.client.model.MethodConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * PathConfig
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PathConfig {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  @javax.annotation.Nullable
  private List<MethodConfig> methods = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  @javax.annotation.Nullable
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_ENFORCEMENT_MODE = "enforcement-mode";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_MODE)
  @javax.annotation.Nullable
  private EnforcementMode enforcementMode;

  public static final String SERIALIZED_NAME_CLAIM_INFORMATION_POINT = "claim-information-point";
  @SerializedName(SERIALIZED_NAME_CLAIM_INFORMATION_POINT)
  @javax.annotation.Nullable
  private Map<String, Map<String, Object>> claimInformationPoint = new HashMap<>();

  public static final String SERIALIZED_NAME_INVALIDATED = "invalidated";
  @SerializedName(SERIALIZED_NAME_INVALIDATED)
  @javax.annotation.Nullable
  private Boolean invalidated;

  public static final String SERIALIZED_NAME_STATIC_PATH = "staticPath";
  @SerializedName(SERIALIZED_NAME_STATIC_PATH)
  @javax.annotation.Nullable
  private Boolean staticPath;

  public static final String SERIALIZED_NAME_STATIC = "static";
  @SerializedName(SERIALIZED_NAME_STATIC)
  @javax.annotation.Nullable
  private Boolean _static;

  public PathConfig() {
  }

  public PathConfig name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public PathConfig type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public PathConfig path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public PathConfig methods(@javax.annotation.Nullable List<MethodConfig> methods) {
    this.methods = methods;
    return this;
  }

  public PathConfig addMethodsItem(MethodConfig methodsItem) {
    if (this.methods == null) {
      this.methods = new ArrayList<>();
    }
    this.methods.add(methodsItem);
    return this;
  }

  /**
   * Get methods
   * @return methods
   */
  @javax.annotation.Nullable
  public List<MethodConfig> getMethods() {
    return methods;
  }

  public void setMethods(@javax.annotation.Nullable List<MethodConfig> methods) {
    this.methods = methods;
  }


  public PathConfig scopes(@javax.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public PathConfig addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(@javax.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
  }


  public PathConfig id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PathConfig enforcementMode(@javax.annotation.Nullable EnforcementMode enforcementMode) {
    this.enforcementMode = enforcementMode;
    return this;
  }

  /**
   * Get enforcementMode
   * @return enforcementMode
   */
  @javax.annotation.Nullable
  public EnforcementMode getEnforcementMode() {
    return enforcementMode;
  }

  public void setEnforcementMode(@javax.annotation.Nullable EnforcementMode enforcementMode) {
    this.enforcementMode = enforcementMode;
  }


  public PathConfig claimInformationPoint(@javax.annotation.Nullable Map<String, Map<String, Object>> claimInformationPoint) {
    this.claimInformationPoint = claimInformationPoint;
    return this;
  }

  public PathConfig putClaimInformationPointItem(String key, Map<String, Object> claimInformationPointItem) {
    if (this.claimInformationPoint == null) {
      this.claimInformationPoint = new HashMap<>();
    }
    this.claimInformationPoint.put(key, claimInformationPointItem);
    return this;
  }

  /**
   * Get claimInformationPoint
   * @return claimInformationPoint
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Object>> getClaimInformationPoint() {
    return claimInformationPoint;
  }

  public void setClaimInformationPoint(@javax.annotation.Nullable Map<String, Map<String, Object>> claimInformationPoint) {
    this.claimInformationPoint = claimInformationPoint;
  }


  public PathConfig invalidated(@javax.annotation.Nullable Boolean invalidated) {
    this.invalidated = invalidated;
    return this;
  }

  /**
   * Get invalidated
   * @return invalidated
   */
  @javax.annotation.Nullable
  public Boolean getInvalidated() {
    return invalidated;
  }

  public void setInvalidated(@javax.annotation.Nullable Boolean invalidated) {
    this.invalidated = invalidated;
  }


  public PathConfig staticPath(@javax.annotation.Nullable Boolean staticPath) {
    this.staticPath = staticPath;
    return this;
  }

  /**
   * Get staticPath
   * @return staticPath
   */
  @javax.annotation.Nullable
  public Boolean getStaticPath() {
    return staticPath;
  }

  public void setStaticPath(@javax.annotation.Nullable Boolean staticPath) {
    this.staticPath = staticPath;
  }


  public PathConfig _static(@javax.annotation.Nullable Boolean _static) {
    this._static = _static;
    return this;
  }

  /**
   * Get _static
   * @return _static
   */
  @javax.annotation.Nullable
  public Boolean getStatic() {
    return _static;
  }

  public void setStatic(@javax.annotation.Nullable Boolean _static) {
    this._static = _static;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathConfig pathConfig = (PathConfig) o;
    return Objects.equals(this.name, pathConfig.name) &&
        Objects.equals(this.type, pathConfig.type) &&
        Objects.equals(this.path, pathConfig.path) &&
        Objects.equals(this.methods, pathConfig.methods) &&
        Objects.equals(this.scopes, pathConfig.scopes) &&
        Objects.equals(this.id, pathConfig.id) &&
        Objects.equals(this.enforcementMode, pathConfig.enforcementMode) &&
        Objects.equals(this.claimInformationPoint, pathConfig.claimInformationPoint) &&
        Objects.equals(this.invalidated, pathConfig.invalidated) &&
        Objects.equals(this.staticPath, pathConfig.staticPath) &&
        Objects.equals(this._static, pathConfig._static);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, path, methods, scopes, id, enforcementMode, claimInformationPoint, invalidated, staticPath, _static);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathConfig {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enforcementMode: ").append(toIndentedString(enforcementMode)).append("\n");
    sb.append("    claimInformationPoint: ").append(toIndentedString(claimInformationPoint)).append("\n");
    sb.append("    invalidated: ").append(toIndentedString(invalidated)).append("\n");
    sb.append("    staticPath: ").append(toIndentedString(staticPath)).append("\n");
    sb.append("    _static: ").append(toIndentedString(_static)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("path");
    openapiFields.add("methods");
    openapiFields.add("scopes");
    openapiFields.add("id");
    openapiFields.add("enforcement-mode");
    openapiFields.add("claim-information-point");
    openapiFields.add("invalidated");
    openapiFields.add("staticPath");
    openapiFields.add("static");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PathConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PathConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PathConfig is not found in the empty JSON string", PathConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PathConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PathConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (jsonObj.get("methods") != null && !jsonObj.get("methods").isJsonNull()) {
        JsonArray jsonArraymethods = jsonObj.getAsJsonArray("methods");
        if (jsonArraymethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("methods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `methods` to be an array in the JSON string but got `%s`", jsonObj.get("methods").toString()));
          }

          // validate the optional field `methods` (array)
          for (int i = 0; i < jsonArraymethods.size(); i++) {
            MethodConfig.validateJsonElement(jsonArraymethods.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `enforcement-mode`
      if (jsonObj.get("enforcement-mode") != null && !jsonObj.get("enforcement-mode").isJsonNull()) {
        EnforcementMode.validateJsonElement(jsonObj.get("enforcement-mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PathConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PathConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PathConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PathConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PathConfig>() {
           @Override
           public void write(JsonWriter out, PathConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PathConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PathConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PathConfig
   * @throws IOException if the JSON string is invalid with respect to PathConfig
   */
  public static PathConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PathConfig.class);
  }

  /**
   * Convert an instance of PathConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

