/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.ProtocolMapperRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtocolMappersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProtocolMappersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtocolMappersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostCall(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/add-models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostValidateBeforeCall(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostCall(realm, clientScopeId, protocolMapperRepresentation, _callback);

    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo(realm, clientScopeId, protocolMapperRepresentation);
    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create multiple mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostAsync(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetAsync(String realm, String clientScopeId, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteValidateBeforeCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteCall(realm, clientScopeId, id, _callback);

    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete(String realm, String clientScopeId, String id) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo(realm, clientScopeId, id);
    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo(String realm, String clientScopeId, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteValidateBeforeCall(realm, clientScopeId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteAsync(String realm, String clientScopeId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteValidateBeforeCall(realm, clientScopeId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetValidateBeforeCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetCall(realm, clientScopeId, id, _callback);

    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @return ProtocolMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtocolMapperRepresentation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet(String realm, String clientScopeId, String id) throws ApiException {
        ApiResponse<ProtocolMapperRepresentation> localVarResp = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo(realm, clientScopeId, id);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtocolMapperRepresentation> adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo(String realm, String clientScopeId, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetValidateBeforeCall(realm, clientScopeId, id, null);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetAsync(String realm, String clientScopeId, String id, final ApiCallback<ProtocolMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetValidateBeforeCall(realm, clientScopeId, id, _callback);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutCall(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutValidateBeforeCall(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutCall(realm, clientScopeId, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo(realm, clientScopeId, id, protocolMapperRepresentation);
    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutValidateBeforeCall(realm, clientScopeId, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutAsync(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutValidateBeforeCall(realm, clientScopeId, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostCall(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostValidateBeforeCall(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostCall(realm, clientScopeId, protocolMapperRepresentation, _callback);

    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostWithHttpInfo(realm, clientScopeId, protocolMapperRepresentation);
    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostWithHttpInfo(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostAsync(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetCall(String realm, String clientScopeId, String protocol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/protocol/{protocol}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "protocol" + "}", localVarApiClient.escapeString(protocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetValidateBeforeCall(String realm, String clientScopeId, String protocol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetCall(realm, clientScopeId, protocol, _callback);

    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet(String realm, String clientScopeId, String protocol) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo(realm, clientScopeId, protocol);
        return localVarResp.getData();
    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo(String realm, String clientScopeId, String protocol) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, clientScopeId, protocol, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers by name for a specific protocol (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetAsync(String realm, String clientScopeId, String protocol, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, clientScopeId, protocol, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostCall(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/add-models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostValidateBeforeCall(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostCall(realm, clientScopeId, protocolMapperRepresentation, _callback);

    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo(realm, clientScopeId, protocolMapperRepresentation);
    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create multiple mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostAsync(String realm, String clientScopeId, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetAsync(String realm, String clientScopeId, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteValidateBeforeCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteCall(realm, clientScopeId, id, _callback);

    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete(String realm, String clientScopeId, String id) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo(realm, clientScopeId, id);
    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo(String realm, String clientScopeId, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteValidateBeforeCall(realm, clientScopeId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteAsync(String realm, String clientScopeId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteValidateBeforeCall(realm, clientScopeId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetValidateBeforeCall(String realm, String clientScopeId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetCall(realm, clientScopeId, id, _callback);

    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @return ProtocolMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtocolMapperRepresentation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet(String realm, String clientScopeId, String id) throws ApiException {
        ApiResponse<ProtocolMapperRepresentation> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo(realm, clientScopeId, id);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtocolMapperRepresentation> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo(String realm, String clientScopeId, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetValidateBeforeCall(realm, clientScopeId, id, null);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetAsync(String realm, String clientScopeId, String id, final ApiCallback<ProtocolMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetValidateBeforeCall(realm, clientScopeId, id, _callback);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutCall(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutValidateBeforeCall(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutCall(realm, clientScopeId, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo(realm, clientScopeId, id, protocolMapperRepresentation);
    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutValidateBeforeCall(realm, clientScopeId, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutAsync(String realm, String clientScopeId, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutValidateBeforeCall(realm, clientScopeId, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostCall(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostValidateBeforeCall(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostCall(realm, clientScopeId, protocolMapperRepresentation, _callback);

    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostWithHttpInfo(realm, clientScopeId, protocolMapperRepresentation);
    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostWithHttpInfo(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostAsync(String realm, String clientScopeId, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostValidateBeforeCall(realm, clientScopeId, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetCall(String realm, String clientScopeId, String protocol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/protocol/{protocol}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "protocol" + "}", localVarApiClient.escapeString(protocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetValidateBeforeCall(String realm, String clientScopeId, String protocol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetCall(realm, clientScopeId, protocol, _callback);

    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet(String realm, String clientScopeId, String protocol) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo(realm, clientScopeId, protocol);
        return localVarResp.getData();
    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo(String realm, String clientScopeId, String protocol) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, clientScopeId, protocol, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers by name for a specific protocol (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param protocol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetAsync(String realm, String clientScopeId, String protocol, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, clientScopeId, protocol, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostCall(String realm, String clientUuid, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/add-models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostValidateBeforeCall(String realm, String clientUuid, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostCall(realm, clientUuid, protocolMapperRepresentation, _callback);

    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost(String realm, String clientUuid, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostWithHttpInfo(realm, clientUuid, protocolMapperRepresentation);
    }

    /**
     * Create multiple mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostWithHttpInfo(String realm, String clientUuid, List<ProtocolMapperRepresentation> protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostValidateBeforeCall(realm, clientUuid, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create multiple mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostAsync(String realm, String clientUuid, List<ProtocolMapperRepresentation> protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostValidateBeforeCall(realm, clientUuid, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersModelsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersModelsGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> adminRealmsRealmClientsClientUuidProtocolMappersModelsGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidProtocolMappersModelsGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get mappers
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> adminRealmsRealmClientsClientUuidProtocolMappersModelsGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsGetAsync(String realm, String clientUuid, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteCall(String realm, String clientUuid, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteValidateBeforeCall(String realm, String clientUuid, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteCall(realm, clientUuid, id, _callback);

    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete(String realm, String clientUuid, String id) throws ApiException {
        adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteWithHttpInfo(realm, clientUuid, id);
    }

    /**
     * Delete the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteWithHttpInfo(String realm, String clientUuid, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteValidateBeforeCall(realm, clientUuid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteAsync(String realm, String clientUuid, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteValidateBeforeCall(realm, clientUuid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetCall(String realm, String clientUuid, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetValidateBeforeCall(String realm, String clientUuid, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetCall(realm, clientUuid, id, _callback);

    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @return ProtocolMapperRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtocolMapperRepresentation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet(String realm, String clientUuid, String id) throws ApiException {
        ApiResponse<ProtocolMapperRepresentation> localVarResp = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetWithHttpInfo(realm, clientUuid, id);
        return localVarResp.getData();
    }

    /**
     * Get mapper by id
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @return ApiResponse&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtocolMapperRepresentation> adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetWithHttpInfo(String realm, String clientUuid, String id) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetValidateBeforeCall(realm, clientUuid, id, null);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapper by id (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetAsync(String realm, String clientUuid, String id, final ApiCallback<ProtocolMapperRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetValidateBeforeCall(realm, clientUuid, id, _callback);
        Type localVarReturnType = new TypeToken<ProtocolMapperRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutCall(String realm, String clientUuid, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutValidateBeforeCall(String realm, String clientUuid, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutCall(realm, clientUuid, id, protocolMapperRepresentation, _callback);

    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut(String realm, String clientUuid, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutWithHttpInfo(realm, clientUuid, id, protocolMapperRepresentation);
    }

    /**
     * Update the mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutWithHttpInfo(String realm, String clientUuid, String id, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutValidateBeforeCall(realm, clientUuid, id, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param id Mapper id (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutAsync(String realm, String clientUuid, String id, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutValidateBeforeCall(realm, clientUuid, id, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersModelsPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsPostCall(String realm, String clientUuid, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = protocolMapperRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsPostValidateBeforeCall(String realm, String clientUuid, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersModelsPostCall(realm, clientUuid, protocolMapperRepresentation, _callback);

    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidProtocolMappersModelsPost(String realm, String clientUuid, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidProtocolMappersModelsPostWithHttpInfo(realm, clientUuid, protocolMapperRepresentation);
    }

    /**
     * Create a mapper
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidProtocolMappersModelsPostWithHttpInfo(String realm, String clientUuid, ProtocolMapperRepresentation protocolMapperRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsPostValidateBeforeCall(realm, clientUuid, protocolMapperRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a mapper (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocolMapperRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersModelsPostAsync(String realm, String clientUuid, ProtocolMapperRepresentation protocolMapperRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersModelsPostValidateBeforeCall(realm, clientUuid, protocolMapperRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocol  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetCall(String realm, String clientUuid, String protocol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/protocol/{protocol}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "protocol" + "}", localVarApiClient.escapeString(protocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetValidateBeforeCall(String realm, String clientUuid, String protocol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet(Async)");
        }

        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetCall(realm, clientUuid, protocol, _callback);

    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocol  (required)
     * @return List&lt;ProtocolMapperRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProtocolMapperRepresentation> adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet(String realm, String clientUuid, String protocol) throws ApiException {
        ApiResponse<List<ProtocolMapperRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetWithHttpInfo(realm, clientUuid, protocol);
        return localVarResp.getData();
    }

    /**
     * Get mappers by name for a specific protocol
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocol  (required)
     * @return ApiResponse&lt;List&lt;ProtocolMapperRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProtocolMapperRepresentation>> adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetWithHttpInfo(String realm, String clientUuid, String protocol) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, clientUuid, protocol, null);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mappers by name for a specific protocol (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param protocol  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetAsync(String realm, String clientUuid, String protocol, final ApiCallback<List<ProtocolMapperRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetValidateBeforeCall(realm, clientUuid, protocol, _callback);
        Type localVarReturnType = new TypeToken<List<ProtocolMapperRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
