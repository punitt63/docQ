/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;

import in.docq.keycloak.rest.client.JSON;

/**
 * Composites
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class Composites {
  public static final String SERIALIZED_NAME_REALM = "realm";
  @SerializedName(SERIALIZED_NAME_REALM)
  @javax.annotation.Nullable
  private Set<String> realm = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  @javax.annotation.Nullable
  private Map<String, List<String>> client = new HashMap<>();

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  @javax.annotation.Nullable
  private Map<String, List<String>> application = new HashMap<>();

  public Composites() {
  }

  public Composites realm(@javax.annotation.Nullable Set<String> realm) {
    this.realm = realm;
    return this;
  }

  public Composites addRealmItem(String realmItem) {
    if (this.realm == null) {
      this.realm = new LinkedHashSet<>();
    }
    this.realm.add(realmItem);
    return this;
  }

  /**
   * Get realm
   * @return realm
   */
  @javax.annotation.Nullable
  public Set<String> getRealm() {
    return realm;
  }

  public void setRealm(@javax.annotation.Nullable Set<String> realm) {
    this.realm = realm;
  }


  public Composites client(@javax.annotation.Nullable Map<String, List<String>> client) {
    this.client = client;
    return this;
  }

  public Composites putClientItem(String key, List<String> clientItem) {
    if (this.client == null) {
      this.client = new HashMap<>();
    }
    this.client.put(key, clientItem);
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getClient() {
    return client;
  }

  public void setClient(@javax.annotation.Nullable Map<String, List<String>> client) {
    this.client = client;
  }


  @Deprecated
  public Composites application(@javax.annotation.Nullable Map<String, List<String>> application) {
    this.application = application;
    return this;
  }

  public Composites putApplicationItem(String key, List<String> applicationItem) {
    if (this.application == null) {
      this.application = new HashMap<>();
    }
    this.application.put(key, applicationItem);
    return this;
  }

  /**
   * Get application
   * @return application
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Map<String, List<String>> getApplication() {
    return application;
  }

  @Deprecated
  public void setApplication(@javax.annotation.Nullable Map<String, List<String>> application) {
    this.application = application;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Composites composites = (Composites) o;
    return Objects.equals(this.realm, composites.realm) &&
        Objects.equals(this.client, composites.client) &&
        Objects.equals(this.application, composites.application);
  }

  @Override
  public int hashCode() {
    return Objects.hash(realm, client, application);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Composites {\n");
    sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("realm");
    openapiFields.add("client");
    openapiFields.add("application");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Composites
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Composites.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Composites is not found in the empty JSON string", Composites.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Composites.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Composites` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("realm") != null && !jsonObj.get("realm").isJsonNull() && !jsonObj.get("realm").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `realm` to be an array in the JSON string but got `%s`", jsonObj.get("realm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Composites.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Composites' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Composites> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Composites.class));

       return (TypeAdapter<T>) new TypeAdapter<Composites>() {
           @Override
           public void write(JsonWriter out, Composites value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Composites read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Composites given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Composites
   * @throws IOException if the JSON string is invalid with respect to Composites
   */
  public static Composites fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Composites.class);
  }

  /**
   * Convert an instance of Composites to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

