/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * ProtocolMapperRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ProtocolMapperRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private String protocol;

  public static final String SERIALIZED_NAME_PROTOCOL_MAPPER = "protocolMapper";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_MAPPER)
  @javax.annotation.Nullable
  private String protocolMapper;

  public static final String SERIALIZED_NAME_CONSENT_REQUIRED = "consentRequired";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONSENT_REQUIRED)
  @javax.annotation.Nullable
  private Boolean consentRequired;

  public static final String SERIALIZED_NAME_CONSENT_TEXT = "consentText";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONSENT_TEXT)
  @javax.annotation.Nullable
  private String consentText;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  @javax.annotation.Nullable
  private Map<String, String> config = new HashMap<>();

  public ProtocolMapperRepresentation() {
  }

  public ProtocolMapperRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ProtocolMapperRepresentation name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ProtocolMapperRepresentation protocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
  }


  public ProtocolMapperRepresentation protocolMapper(@javax.annotation.Nullable String protocolMapper) {
    this.protocolMapper = protocolMapper;
    return this;
  }

  /**
   * Get protocolMapper
   * @return protocolMapper
   */
  @javax.annotation.Nullable
  public String getProtocolMapper() {
    return protocolMapper;
  }

  public void setProtocolMapper(@javax.annotation.Nullable String protocolMapper) {
    this.protocolMapper = protocolMapper;
  }


  @Deprecated
  public ProtocolMapperRepresentation consentRequired(@javax.annotation.Nullable Boolean consentRequired) {
    this.consentRequired = consentRequired;
    return this;
  }

  /**
   * Get consentRequired
   * @return consentRequired
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getConsentRequired() {
    return consentRequired;
  }

  @Deprecated
  public void setConsentRequired(@javax.annotation.Nullable Boolean consentRequired) {
    this.consentRequired = consentRequired;
  }


  @Deprecated
  public ProtocolMapperRepresentation consentText(@javax.annotation.Nullable String consentText) {
    this.consentText = consentText;
    return this;
  }

  /**
   * Get consentText
   * @return consentText
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getConsentText() {
    return consentText;
  }

  @Deprecated
  public void setConsentText(@javax.annotation.Nullable String consentText) {
    this.consentText = consentText;
  }


  public ProtocolMapperRepresentation config(@javax.annotation.Nullable Map<String, String> config) {
    this.config = config;
    return this;
  }

  public ProtocolMapperRepresentation putConfigItem(String key, String configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public Map<String, String> getConfig() {
    return config;
  }

  public void setConfig(@javax.annotation.Nullable Map<String, String> config) {
    this.config = config;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtocolMapperRepresentation protocolMapperRepresentation = (ProtocolMapperRepresentation) o;
    return Objects.equals(this.id, protocolMapperRepresentation.id) &&
        Objects.equals(this.name, protocolMapperRepresentation.name) &&
        Objects.equals(this.protocol, protocolMapperRepresentation.protocol) &&
        Objects.equals(this.protocolMapper, protocolMapperRepresentation.protocolMapper) &&
        Objects.equals(this.consentRequired, protocolMapperRepresentation.consentRequired) &&
        Objects.equals(this.consentText, protocolMapperRepresentation.consentText) &&
        Objects.equals(this.config, protocolMapperRepresentation.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, protocol, protocolMapper, consentRequired, consentText, config);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtocolMapperRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    protocolMapper: ").append(toIndentedString(protocolMapper)).append("\n");
    sb.append("    consentRequired: ").append(toIndentedString(consentRequired)).append("\n");
    sb.append("    consentText: ").append(toIndentedString(consentText)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("protocol");
    openapiFields.add("protocolMapper");
    openapiFields.add("consentRequired");
    openapiFields.add("consentText");
    openapiFields.add("config");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtocolMapperRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtocolMapperRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtocolMapperRepresentation is not found in the empty JSON string", ProtocolMapperRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtocolMapperRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtocolMapperRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("protocolMapper") != null && !jsonObj.get("protocolMapper").isJsonNull()) && !jsonObj.get("protocolMapper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolMapper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolMapper").toString()));
      }
      if ((jsonObj.get("consentText") != null && !jsonObj.get("consentText").isJsonNull()) && !jsonObj.get("consentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtocolMapperRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtocolMapperRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtocolMapperRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtocolMapperRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtocolMapperRepresentation>() {
           @Override
           public void write(JsonWriter out, ProtocolMapperRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtocolMapperRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtocolMapperRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtocolMapperRepresentation
   * @throws IOException if the JSON string is invalid with respect to ProtocolMapperRepresentation
   */
  public static ProtocolMapperRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtocolMapperRepresentation.class);
  }

  /**
   * Convert an instance of ProtocolMapperRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

