/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * RealmEventsConfigRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class RealmEventsConfigRepresentation {
  public static final String SERIALIZED_NAME_EVENTS_ENABLED = "eventsEnabled";
  @SerializedName(SERIALIZED_NAME_EVENTS_ENABLED)
  @javax.annotation.Nullable
  private Boolean eventsEnabled;

  public static final String SERIALIZED_NAME_EVENTS_EXPIRATION = "eventsExpiration";
  @SerializedName(SERIALIZED_NAME_EVENTS_EXPIRATION)
  @javax.annotation.Nullable
  private Long eventsExpiration;

  public static final String SERIALIZED_NAME_EVENTS_LISTENERS = "eventsListeners";
  @SerializedName(SERIALIZED_NAME_EVENTS_LISTENERS)
  @javax.annotation.Nullable
  private List<String> eventsListeners = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED_EVENT_TYPES = "enabledEventTypes";
  @SerializedName(SERIALIZED_NAME_ENABLED_EVENT_TYPES)
  @javax.annotation.Nullable
  private List<String> enabledEventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADMIN_EVENTS_ENABLED = "adminEventsEnabled";
  @SerializedName(SERIALIZED_NAME_ADMIN_EVENTS_ENABLED)
  @javax.annotation.Nullable
  private Boolean adminEventsEnabled;

  public static final String SERIALIZED_NAME_ADMIN_EVENTS_DETAILS_ENABLED = "adminEventsDetailsEnabled";
  @SerializedName(SERIALIZED_NAME_ADMIN_EVENTS_DETAILS_ENABLED)
  @javax.annotation.Nullable
  private Boolean adminEventsDetailsEnabled;

  public RealmEventsConfigRepresentation() {
  }

  public RealmEventsConfigRepresentation eventsEnabled(@javax.annotation.Nullable Boolean eventsEnabled) {
    this.eventsEnabled = eventsEnabled;
    return this;
  }

  /**
   * Get eventsEnabled
   * @return eventsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEventsEnabled() {
    return eventsEnabled;
  }

  public void setEventsEnabled(@javax.annotation.Nullable Boolean eventsEnabled) {
    this.eventsEnabled = eventsEnabled;
  }


  public RealmEventsConfigRepresentation eventsExpiration(@javax.annotation.Nullable Long eventsExpiration) {
    this.eventsExpiration = eventsExpiration;
    return this;
  }

  /**
   * Get eventsExpiration
   * @return eventsExpiration
   */
  @javax.annotation.Nullable
  public Long getEventsExpiration() {
    return eventsExpiration;
  }

  public void setEventsExpiration(@javax.annotation.Nullable Long eventsExpiration) {
    this.eventsExpiration = eventsExpiration;
  }


  public RealmEventsConfigRepresentation eventsListeners(@javax.annotation.Nullable List<String> eventsListeners) {
    this.eventsListeners = eventsListeners;
    return this;
  }

  public RealmEventsConfigRepresentation addEventsListenersItem(String eventsListenersItem) {
    if (this.eventsListeners == null) {
      this.eventsListeners = new ArrayList<>();
    }
    this.eventsListeners.add(eventsListenersItem);
    return this;
  }

  /**
   * Get eventsListeners
   * @return eventsListeners
   */
  @javax.annotation.Nullable
  public List<String> getEventsListeners() {
    return eventsListeners;
  }

  public void setEventsListeners(@javax.annotation.Nullable List<String> eventsListeners) {
    this.eventsListeners = eventsListeners;
  }


  public RealmEventsConfigRepresentation enabledEventTypes(@javax.annotation.Nullable List<String> enabledEventTypes) {
    this.enabledEventTypes = enabledEventTypes;
    return this;
  }

  public RealmEventsConfigRepresentation addEnabledEventTypesItem(String enabledEventTypesItem) {
    if (this.enabledEventTypes == null) {
      this.enabledEventTypes = new ArrayList<>();
    }
    this.enabledEventTypes.add(enabledEventTypesItem);
    return this;
  }

  /**
   * Get enabledEventTypes
   * @return enabledEventTypes
   */
  @javax.annotation.Nullable
  public List<String> getEnabledEventTypes() {
    return enabledEventTypes;
  }

  public void setEnabledEventTypes(@javax.annotation.Nullable List<String> enabledEventTypes) {
    this.enabledEventTypes = enabledEventTypes;
  }


  public RealmEventsConfigRepresentation adminEventsEnabled(@javax.annotation.Nullable Boolean adminEventsEnabled) {
    this.adminEventsEnabled = adminEventsEnabled;
    return this;
  }

  /**
   * Get adminEventsEnabled
   * @return adminEventsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdminEventsEnabled() {
    return adminEventsEnabled;
  }

  public void setAdminEventsEnabled(@javax.annotation.Nullable Boolean adminEventsEnabled) {
    this.adminEventsEnabled = adminEventsEnabled;
  }


  public RealmEventsConfigRepresentation adminEventsDetailsEnabled(@javax.annotation.Nullable Boolean adminEventsDetailsEnabled) {
    this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
    return this;
  }

  /**
   * Get adminEventsDetailsEnabled
   * @return adminEventsDetailsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdminEventsDetailsEnabled() {
    return adminEventsDetailsEnabled;
  }

  public void setAdminEventsDetailsEnabled(@javax.annotation.Nullable Boolean adminEventsDetailsEnabled) {
    this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealmEventsConfigRepresentation realmEventsConfigRepresentation = (RealmEventsConfigRepresentation) o;
    return Objects.equals(this.eventsEnabled, realmEventsConfigRepresentation.eventsEnabled) &&
        Objects.equals(this.eventsExpiration, realmEventsConfigRepresentation.eventsExpiration) &&
        Objects.equals(this.eventsListeners, realmEventsConfigRepresentation.eventsListeners) &&
        Objects.equals(this.enabledEventTypes, realmEventsConfigRepresentation.enabledEventTypes) &&
        Objects.equals(this.adminEventsEnabled, realmEventsConfigRepresentation.adminEventsEnabled) &&
        Objects.equals(this.adminEventsDetailsEnabled, realmEventsConfigRepresentation.adminEventsDetailsEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventsEnabled, eventsExpiration, eventsListeners, enabledEventTypes, adminEventsEnabled, adminEventsDetailsEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealmEventsConfigRepresentation {\n");
    sb.append("    eventsEnabled: ").append(toIndentedString(eventsEnabled)).append("\n");
    sb.append("    eventsExpiration: ").append(toIndentedString(eventsExpiration)).append("\n");
    sb.append("    eventsListeners: ").append(toIndentedString(eventsListeners)).append("\n");
    sb.append("    enabledEventTypes: ").append(toIndentedString(enabledEventTypes)).append("\n");
    sb.append("    adminEventsEnabled: ").append(toIndentedString(adminEventsEnabled)).append("\n");
    sb.append("    adminEventsDetailsEnabled: ").append(toIndentedString(adminEventsDetailsEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventsEnabled");
    openapiFields.add("eventsExpiration");
    openapiFields.add("eventsListeners");
    openapiFields.add("enabledEventTypes");
    openapiFields.add("adminEventsEnabled");
    openapiFields.add("adminEventsDetailsEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RealmEventsConfigRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealmEventsConfigRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealmEventsConfigRepresentation is not found in the empty JSON string", RealmEventsConfigRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealmEventsConfigRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealmEventsConfigRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventsListeners") != null && !jsonObj.get("eventsListeners").isJsonNull() && !jsonObj.get("eventsListeners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventsListeners` to be an array in the JSON string but got `%s`", jsonObj.get("eventsListeners").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledEventTypes") != null && !jsonObj.get("enabledEventTypes").isJsonNull() && !jsonObj.get("enabledEventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledEventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("enabledEventTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealmEventsConfigRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealmEventsConfigRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealmEventsConfigRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealmEventsConfigRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<RealmEventsConfigRepresentation>() {
           @Override
           public void write(JsonWriter out, RealmEventsConfigRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealmEventsConfigRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RealmEventsConfigRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RealmEventsConfigRepresentation
   * @throws IOException if the JSON string is invalid with respect to RealmEventsConfigRepresentation
   */
  public static RealmEventsConfigRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealmEventsConfigRepresentation.class);
  }

  /**
   * Convert an instance of RealmEventsConfigRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

