/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * PublishedRealmRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PublishedRealmRepresentation {
  public static final String SERIALIZED_NAME_REALM = "realm";
  @SerializedName(SERIALIZED_NAME_REALM)
  @javax.annotation.Nullable
  private String realm;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  @javax.annotation.Nullable
  private String publicKey;

  public static final String SERIALIZED_NAME_TOKEN_SERVICE = "token-service";
  @SerializedName(SERIALIZED_NAME_TOKEN_SERVICE)
  @javax.annotation.Nullable
  private String tokenService;

  public static final String SERIALIZED_NAME_ACCOUNT_SERVICE = "account-service";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SERVICE)
  @javax.annotation.Nullable
  private String accountService;

  public static final String SERIALIZED_NAME_TOKENS_NOT_BEFORE = "tokens-not-before";
  @SerializedName(SERIALIZED_NAME_TOKENS_NOT_BEFORE)
  @javax.annotation.Nullable
  private Integer tokensNotBefore;

  public PublishedRealmRepresentation() {
  }

  public PublishedRealmRepresentation realm(@javax.annotation.Nullable String realm) {
    this.realm = realm;
    return this;
  }

  /**
   * Get realm
   * @return realm
   */
  @javax.annotation.Nullable
  public String getRealm() {
    return realm;
  }

  public void setRealm(@javax.annotation.Nullable String realm) {
    this.realm = realm;
  }


  public PublishedRealmRepresentation publicKey(@javax.annotation.Nullable String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(@javax.annotation.Nullable String publicKey) {
    this.publicKey = publicKey;
  }


  public PublishedRealmRepresentation tokenService(@javax.annotation.Nullable String tokenService) {
    this.tokenService = tokenService;
    return this;
  }

  /**
   * Get tokenService
   * @return tokenService
   */
  @javax.annotation.Nullable
  public String getTokenService() {
    return tokenService;
  }

  public void setTokenService(@javax.annotation.Nullable String tokenService) {
    this.tokenService = tokenService;
  }


  public PublishedRealmRepresentation accountService(@javax.annotation.Nullable String accountService) {
    this.accountService = accountService;
    return this;
  }

  /**
   * Get accountService
   * @return accountService
   */
  @javax.annotation.Nullable
  public String getAccountService() {
    return accountService;
  }

  public void setAccountService(@javax.annotation.Nullable String accountService) {
    this.accountService = accountService;
  }


  public PublishedRealmRepresentation tokensNotBefore(@javax.annotation.Nullable Integer tokensNotBefore) {
    this.tokensNotBefore = tokensNotBefore;
    return this;
  }

  /**
   * Get tokensNotBefore
   * @return tokensNotBefore
   */
  @javax.annotation.Nullable
  public Integer getTokensNotBefore() {
    return tokensNotBefore;
  }

  public void setTokensNotBefore(@javax.annotation.Nullable Integer tokensNotBefore) {
    this.tokensNotBefore = tokensNotBefore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedRealmRepresentation publishedRealmRepresentation = (PublishedRealmRepresentation) o;
    return Objects.equals(this.realm, publishedRealmRepresentation.realm) &&
        Objects.equals(this.publicKey, publishedRealmRepresentation.publicKey) &&
        Objects.equals(this.tokenService, publishedRealmRepresentation.tokenService) &&
        Objects.equals(this.accountService, publishedRealmRepresentation.accountService) &&
        Objects.equals(this.tokensNotBefore, publishedRealmRepresentation.tokensNotBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(realm, publicKey, tokenService, accountService, tokensNotBefore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedRealmRepresentation {\n");
    sb.append("    realm: ").append(toIndentedString(realm)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    tokenService: ").append(toIndentedString(tokenService)).append("\n");
    sb.append("    accountService: ").append(toIndentedString(accountService)).append("\n");
    sb.append("    tokensNotBefore: ").append(toIndentedString(tokensNotBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("realm");
    openapiFields.add("public_key");
    openapiFields.add("token-service");
    openapiFields.add("account-service");
    openapiFields.add("tokens-not-before");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedRealmRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedRealmRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedRealmRepresentation is not found in the empty JSON string", PublishedRealmRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedRealmRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedRealmRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("realm") != null && !jsonObj.get("realm").isJsonNull()) && !jsonObj.get("realm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realm").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if ((jsonObj.get("token-service") != null && !jsonObj.get("token-service").isJsonNull()) && !jsonObj.get("token-service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token-service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token-service").toString()));
      }
      if ((jsonObj.get("account-service") != null && !jsonObj.get("account-service").isJsonNull()) && !jsonObj.get("account-service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedRealmRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedRealmRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedRealmRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedRealmRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedRealmRepresentation>() {
           @Override
           public void write(JsonWriter out, PublishedRealmRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedRealmRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedRealmRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedRealmRepresentation
   * @throws IOException if the JSON string is invalid with respect to PublishedRealmRepresentation
   */
  public static PublishedRealmRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedRealmRepresentation.class);
  }

  /**
   * Convert an instance of PublishedRealmRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

