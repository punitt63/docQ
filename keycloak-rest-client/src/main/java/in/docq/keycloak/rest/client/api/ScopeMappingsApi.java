/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.api;

import in.docq.keycloak.rest.client.ApiCallback;
import in.docq.keycloak.rest.client.ApiClient;
import in.docq.keycloak.rest.client.ApiException;
import in.docq.keycloak.rest.client.ApiResponse;
import in.docq.keycloak.rest.client.Configuration;
import in.docq.keycloak.rest.client.Pair;
import in.docq.keycloak.rest.client.ProgressRequestBody;
import in.docq.keycloak.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import in.docq.keycloak.rest.client.model.MappingsRepresentation;
import in.docq.keycloak.rest.client.model.RoleRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScopeMappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScopeMappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScopeMappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetValidateBeforeCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetCall(realm, clientScopeId, client, _callback);

    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet(String realm, String clientScopeId, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo(realm, clientScopeId, client);
        return localVarResp.getData();
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo(String realm, String clientScopeId, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetValidateBeforeCall(realm, clientScopeId, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetAsync(String realm, String clientScopeId, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetValidateBeforeCall(realm, clientScopeId, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetCall(String realm, String clientScopeId, String client, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetValidateBeforeCall(String realm, String clientScopeId, String client, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetCall(realm, clientScopeId, client, briefRepresentation, _callback);

    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet(String realm, String clientScopeId, String client, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo(realm, clientScopeId, client, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo(String realm, String clientScopeId, String client, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetValidateBeforeCall(realm, clientScopeId, client, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetAsync(String realm, String clientScopeId, String client, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetValidateBeforeCall(realm, clientScopeId, client, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteValidateBeforeCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteCall(realm, clientScopeId, client, roleRepresentation, _callback);

    }

    /**
     * Remove client-level roles from the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo(realm, clientScopeId, client, roleRepresentation);
    }

    /**
     * Remove client-level roles from the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove client-level roles from the client&#39;s scope. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteAsync(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetValidateBeforeCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetCall(realm, clientScopeId, client, _callback);

    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet(String realm, String clientScopeId, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo(realm, clientScopeId, client);
        return localVarResp.getData();
    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo(String realm, String clientScopeId, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetValidateBeforeCall(realm, clientScopeId, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetAsync(String realm, String clientScopeId, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetValidateBeforeCall(realm, clientScopeId, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostValidateBeforeCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostCall(realm, clientScopeId, client, roleRepresentation, _callback);

    }

    /**
     * Add client-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo(realm, clientScopeId, client, roleRepresentation);
    }

    /**
     * Add client-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add client-level roles to the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostAsync(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get all scope mappings for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return MappingsRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MappingsRepresentation adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<MappingsRepresentation> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get all scope mappings for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;MappingsRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MappingsRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all scope mappings for the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetAsync(String realm, String clientScopeId, final ApiCallback<MappingsRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetAsync(String realm, String clientScopeId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetCall(String realm, String clientScopeId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetValidateBeforeCall(String realm, String clientScopeId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetCall(realm, clientScopeId, briefRepresentation, _callback);

    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet(String realm, String clientScopeId, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo(realm, clientScopeId, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo(String realm, String clientScopeId, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetValidateBeforeCall(realm, clientScopeId, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists. (asynchronously)
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetAsync(String realm, String clientScopeId, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetValidateBeforeCall(realm, clientScopeId, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteValidateBeforeCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteCall(realm, clientScopeId, roleRepresentation, _callback);

    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo(realm, clientScopeId, roleRepresentation);
    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteValidateBeforeCall(realm, clientScopeId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteAsync(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteValidateBeforeCall(realm, clientScopeId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get realm-level roles associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles associated with the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetAsync(String realm, String clientScopeId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostValidateBeforeCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost(Async)");
        }

        return adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostCall(realm, clientScopeId, roleRepresentation, _callback);

    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostWithHttpInfo(realm, clientScopeId, roleRepresentation);
    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostWithHttpInfo(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostValidateBeforeCall(realm, clientScopeId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostAsync(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostValidateBeforeCall(realm, clientScopeId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetValidateBeforeCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetCall(realm, clientScopeId, client, _callback);

    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet(String realm, String clientScopeId, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo(realm, clientScopeId, client);
        return localVarResp.getData();
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo(String realm, String clientScopeId, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetValidateBeforeCall(realm, clientScopeId, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetAsync(String realm, String clientScopeId, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetValidateBeforeCall(realm, clientScopeId, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetCall(String realm, String clientScopeId, String client, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetValidateBeforeCall(String realm, String clientScopeId, String client, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetCall(realm, clientScopeId, client, briefRepresentation, _callback);

    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet(String realm, String clientScopeId, String client, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo(realm, clientScopeId, client, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo(String realm, String clientScopeId, String client, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetValidateBeforeCall(realm, clientScopeId, client, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetAsync(String realm, String clientScopeId, String client, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetValidateBeforeCall(realm, clientScopeId, client, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteValidateBeforeCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteCall(realm, clientScopeId, client, roleRepresentation, _callback);

    }

    /**
     * Remove client-level roles from the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo(realm, clientScopeId, client, roleRepresentation);
    }

    /**
     * Remove client-level roles from the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove client-level roles from the client&#39;s scope. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteAsync(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetValidateBeforeCall(String realm, String clientScopeId, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetCall(realm, clientScopeId, client, _callback);

    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet(String realm, String clientScopeId, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo(realm, clientScopeId, client);
        return localVarResp.getData();
    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo(String realm, String clientScopeId, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetValidateBeforeCall(realm, clientScopeId, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetAsync(String realm, String clientScopeId, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetValidateBeforeCall(realm, clientScopeId, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostValidateBeforeCall(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostCall(realm, clientScopeId, client, roleRepresentation, _callback);

    }

    /**
     * Add client-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo(realm, clientScopeId, client, roleRepresentation);
    }

    /**
     * Add client-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add client-level roles to the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostAsync(String realm, String clientScopeId, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostValidateBeforeCall(realm, clientScopeId, client, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get all scope mappings for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return MappingsRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MappingsRepresentation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<MappingsRepresentation> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get all scope mappings for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;MappingsRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MappingsRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all scope mappings for the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetAsync(String realm, String clientScopeId, final ApiCallback<MappingsRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetAsync(String realm, String clientScopeId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetCall(String realm, String clientScopeId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetValidateBeforeCall(String realm, String clientScopeId, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetCall(realm, clientScopeId, briefRepresentation, _callback);

    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet(String realm, String clientScopeId, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo(realm, clientScopeId, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo(String realm, String clientScopeId, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetValidateBeforeCall(realm, clientScopeId, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists. (asynchronously)
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetAsync(String realm, String clientScopeId, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetValidateBeforeCall(realm, clientScopeId, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteValidateBeforeCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteCall(realm, clientScopeId, roleRepresentation, _callback);

    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo(realm, clientScopeId, roleRepresentation);
    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteValidateBeforeCall(realm, clientScopeId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteAsync(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteValidateBeforeCall(realm, clientScopeId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetValidateBeforeCall(String realm, String clientScopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetCall(realm, clientScopeId, _callback);

    }

    /**
     * Get realm-level roles associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet(String realm, String clientScopeId) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetWithHttpInfo(realm, clientScopeId);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetWithHttpInfo(String realm, String clientScopeId) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetValidateBeforeCall(realm, clientScopeId, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles associated with the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetAsync(String realm, String clientScopeId, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetValidateBeforeCall(realm, clientScopeId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-scope-id" + "}", localVarApiClient.escapeString(clientScopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostValidateBeforeCall(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost(Async)");
        }

        // verify the required parameter 'clientScopeId' is set
        if (clientScopeId == null) {
            throw new ApiException("Missing the required parameter 'clientScopeId' when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost(Async)");
        }

        return adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostCall(realm, clientScopeId, roleRepresentation, _callback);

    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostWithHttpInfo(realm, clientScopeId, roleRepresentation);
    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostWithHttpInfo(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostValidateBeforeCall(realm, clientScopeId, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientScopeId  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostAsync(String realm, String clientScopeId, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostValidateBeforeCall(realm, clientScopeId, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetCall(String realm, String clientUuid, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetValidateBeforeCall(String realm, String clientUuid, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetCall(realm, clientUuid, client, _callback);

    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet(String realm, String clientUuid, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetWithHttpInfo(realm, clientUuid, client);
        return localVarResp.getData();
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetWithHttpInfo(String realm, String clientUuid, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetValidateBeforeCall(realm, clientUuid, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetAsync(String realm, String clientUuid, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetValidateBeforeCall(realm, clientUuid, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetCall(String realm, String clientUuid, String client, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetValidateBeforeCall(String realm, String clientUuid, String client, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetCall(realm, clientUuid, client, briefRepresentation, _callback);

    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet(String realm, String clientUuid, String client, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetWithHttpInfo(realm, clientUuid, client, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetWithHttpInfo(String realm, String clientUuid, String client, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetValidateBeforeCall(realm, clientUuid, client, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetAsync(String realm, String clientUuid, String client, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetValidateBeforeCall(realm, clientUuid, client, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteCall(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteValidateBeforeCall(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteCall(realm, clientUuid, client, roleRepresentation, _callback);

    }

    /**
     * Remove client-level roles from the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteWithHttpInfo(realm, clientUuid, client, roleRepresentation);
    }

    /**
     * Remove client-level roles from the client&#39;s scope.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteWithHttpInfo(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteValidateBeforeCall(realm, clientUuid, client, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove client-level roles from the client&#39;s scope. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteAsync(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteValidateBeforeCall(realm, clientUuid, client, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetCall(String realm, String clientUuid, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetValidateBeforeCall(String realm, String clientUuid, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetCall(realm, clientUuid, client, _callback);

    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet(String realm, String clientUuid, String client) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetWithHttpInfo(realm, clientUuid, client);
        return localVarResp.getData();
    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetWithHttpInfo(String realm, String clientUuid, String client) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetValidateBeforeCall(realm, clientUuid, client, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the roles associated with a client&#39;s scope Returns roles for the client. (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetAsync(String realm, String clientUuid, String client, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetValidateBeforeCall(realm, clientUuid, client, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostCall(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()))
            .replace("{" + "client" + "}", localVarApiClient.escapeString(client.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostValidateBeforeCall(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostCall(realm, clientUuid, client, roleRepresentation, _callback);

    }

    /**
     * Add client-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostWithHttpInfo(realm, clientUuid, client, roleRepresentation);
    }

    /**
     * Add client-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostWithHttpInfo(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostValidateBeforeCall(realm, clientUuid, client, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add client-level roles to the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param client  (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostAsync(String realm, String clientUuid, String client, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostValidateBeforeCall(realm, clientUuid, client, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get all scope mappings for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return MappingsRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public MappingsRepresentation adminRealmsRealmClientsClientUuidScopeMappingsGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<MappingsRepresentation> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get all scope mappings for the client
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;MappingsRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MappingsRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all scope mappings for the client (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsGetAsync(String realm, String clientUuid, final ApiCallback<MappingsRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<MappingsRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/available"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles that are available to attach to this client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetAsync(String realm, String clientUuid, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetCall(String realm, String clientUuid, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/composite"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (briefRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("briefRepresentation", briefRepresentation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetValidateBeforeCall(String realm, String clientUuid, Boolean briefRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetCall(realm, clientUuid, briefRepresentation, _callback);

    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet(String realm, String clientUuid, Boolean briefRepresentation) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetWithHttpInfo(realm, clientUuid, briefRepresentation);
        return localVarResp.getData();
    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetWithHttpInfo(String realm, String clientUuid, Boolean briefRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetValidateBeforeCall(realm, clientUuid, briefRepresentation, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists. (asynchronously)
     * The method is really to show a comprehensive total view of realm-level roles associated with the client.
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param briefRepresentation if false, return roles with their attributes (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetAsync(String realm, String clientUuid, Boolean briefRepresentation, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetValidateBeforeCall(realm, clientUuid, briefRepresentation, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteCall(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteValidateBeforeCall(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteCall(realm, clientUuid, roleRepresentation, _callback);

    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteWithHttpInfo(realm, clientUuid, roleRepresentation);
    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteWithHttpInfo(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteValidateBeforeCall(realm, clientUuid, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a set of realm-level roles from the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteAsync(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteValidateBeforeCall(realm, clientUuid, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsRealmGet
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmGetCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmGetValidateBeforeCall(String realm, String clientUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmGet(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmGet(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsRealmGetCall(realm, clientUuid, _callback);

    }

    /**
     * Get realm-level roles associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return List&lt;RoleRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleRepresentation> adminRealmsRealmClientsClientUuidScopeMappingsRealmGet(String realm, String clientUuid) throws ApiException {
        ApiResponse<List<RoleRepresentation>> localVarResp = adminRealmsRealmClientsClientUuidScopeMappingsRealmGetWithHttpInfo(realm, clientUuid);
        return localVarResp.getData();
    }

    /**
     * Get realm-level roles associated with the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @return ApiResponse&lt;List&lt;RoleRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleRepresentation>> adminRealmsRealmClientsClientUuidScopeMappingsRealmGetWithHttpInfo(String realm, String clientUuid) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmGetValidateBeforeCall(realm, clientUuid, null);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get realm-level roles associated with the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmGetAsync(String realm, String clientUuid, final ApiCallback<List<RoleRepresentation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmGetValidateBeforeCall(realm, clientUuid, _callback);
        Type localVarReturnType = new TypeToken<List<RoleRepresentation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRealmsRealmClientsClientUuidScopeMappingsRealmPost
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmPostCall(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleRepresentation;

        // create path and map variables
        String localVarPath = "/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm"
            .replace("{" + "realm" + "}", localVarApiClient.escapeString(realm.toString()))
            .replace("{" + "client-uuid" + "}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmPostValidateBeforeCall(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realm' is set
        if (realm == null) {
            throw new ApiException("Missing the required parameter 'realm' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmPost(Async)");
        }

        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmPost(Async)");
        }

        return adminRealmsRealmClientsClientUuidScopeMappingsRealmPostCall(realm, clientUuid, roleRepresentation, _callback);

    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void adminRealmsRealmClientsClientUuidScopeMappingsRealmPost(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation) throws ApiException {
        adminRealmsRealmClientsClientUuidScopeMappingsRealmPostWithHttpInfo(realm, clientUuid, roleRepresentation);
    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRealmsRealmClientsClientUuidScopeMappingsRealmPostWithHttpInfo(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation) throws ApiException {
        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmPostValidateBeforeCall(realm, clientUuid, roleRepresentation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a set of realm-level roles to the client&#39;s scope (asynchronously)
     * 
     * @param realm realm name (not id!) (required)
     * @param clientUuid id of client (not client-id!) (required)
     * @param roleRepresentation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRealmsRealmClientsClientUuidScopeMappingsRealmPostAsync(String realm, String clientUuid, List<RoleRepresentation> roleRepresentation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRealmsRealmClientsClientUuidScopeMappingsRealmPostValidateBeforeCall(realm, clientUuid, roleRepresentation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
