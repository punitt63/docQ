/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * UserSessionRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class UserSessionRepresentation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  @javax.annotation.Nullable
  private String ipAddress;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  @javax.annotation.Nullable
  private Long start;

  public static final String SERIALIZED_NAME_LAST_ACCESS = "lastAccess";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESS)
  @javax.annotation.Nullable
  private Long lastAccess;

  public static final String SERIALIZED_NAME_REMEMBER_ME = "rememberMe";
  @SerializedName(SERIALIZED_NAME_REMEMBER_ME)
  @javax.annotation.Nullable
  private Boolean rememberMe;

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  @javax.annotation.Nullable
  private Map<String, String> clients = new HashMap<>();

  public static final String SERIALIZED_NAME_TRANSIENT_USER = "transientUser";
  @SerializedName(SERIALIZED_NAME_TRANSIENT_USER)
  @javax.annotation.Nullable
  private Boolean transientUser;

  public UserSessionRepresentation() {
  }

  public UserSessionRepresentation id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public UserSessionRepresentation username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public UserSessionRepresentation userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public UserSessionRepresentation ipAddress(@javax.annotation.Nullable String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(@javax.annotation.Nullable String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public UserSessionRepresentation start(@javax.annotation.Nullable Long start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Long getStart() {
    return start;
  }

  public void setStart(@javax.annotation.Nullable Long start) {
    this.start = start;
  }


  public UserSessionRepresentation lastAccess(@javax.annotation.Nullable Long lastAccess) {
    this.lastAccess = lastAccess;
    return this;
  }

  /**
   * Get lastAccess
   * @return lastAccess
   */
  @javax.annotation.Nullable
  public Long getLastAccess() {
    return lastAccess;
  }

  public void setLastAccess(@javax.annotation.Nullable Long lastAccess) {
    this.lastAccess = lastAccess;
  }


  public UserSessionRepresentation rememberMe(@javax.annotation.Nullable Boolean rememberMe) {
    this.rememberMe = rememberMe;
    return this;
  }

  /**
   * Get rememberMe
   * @return rememberMe
   */
  @javax.annotation.Nullable
  public Boolean getRememberMe() {
    return rememberMe;
  }

  public void setRememberMe(@javax.annotation.Nullable Boolean rememberMe) {
    this.rememberMe = rememberMe;
  }


  public UserSessionRepresentation clients(@javax.annotation.Nullable Map<String, String> clients) {
    this.clients = clients;
    return this;
  }

  public UserSessionRepresentation putClientsItem(String key, String clientsItem) {
    if (this.clients == null) {
      this.clients = new HashMap<>();
    }
    this.clients.put(key, clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public Map<String, String> getClients() {
    return clients;
  }

  public void setClients(@javax.annotation.Nullable Map<String, String> clients) {
    this.clients = clients;
  }


  public UserSessionRepresentation transientUser(@javax.annotation.Nullable Boolean transientUser) {
    this.transientUser = transientUser;
    return this;
  }

  /**
   * Get transientUser
   * @return transientUser
   */
  @javax.annotation.Nullable
  public Boolean getTransientUser() {
    return transientUser;
  }

  public void setTransientUser(@javax.annotation.Nullable Boolean transientUser) {
    this.transientUser = transientUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSessionRepresentation userSessionRepresentation = (UserSessionRepresentation) o;
    return Objects.equals(this.id, userSessionRepresentation.id) &&
        Objects.equals(this.username, userSessionRepresentation.username) &&
        Objects.equals(this.userId, userSessionRepresentation.userId) &&
        Objects.equals(this.ipAddress, userSessionRepresentation.ipAddress) &&
        Objects.equals(this.start, userSessionRepresentation.start) &&
        Objects.equals(this.lastAccess, userSessionRepresentation.lastAccess) &&
        Objects.equals(this.rememberMe, userSessionRepresentation.rememberMe) &&
        Objects.equals(this.clients, userSessionRepresentation.clients) &&
        Objects.equals(this.transientUser, userSessionRepresentation.transientUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, userId, ipAddress, start, lastAccess, rememberMe, clients, transientUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSessionRepresentation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    lastAccess: ").append(toIndentedString(lastAccess)).append("\n");
    sb.append("    rememberMe: ").append(toIndentedString(rememberMe)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    transientUser: ").append(toIndentedString(transientUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("userId");
    openapiFields.add("ipAddress");
    openapiFields.add("start");
    openapiFields.add("lastAccess");
    openapiFields.add("rememberMe");
    openapiFields.add("clients");
    openapiFields.add("transientUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSessionRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSessionRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSessionRepresentation is not found in the empty JSON string", UserSessionRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSessionRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSessionRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSessionRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSessionRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSessionRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSessionRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSessionRepresentation>() {
           @Override
           public void write(JsonWriter out, UserSessionRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSessionRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSessionRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSessionRepresentation
   * @throws IOException if the JSON string is invalid with respect to UserSessionRepresentation
   */
  public static UserSessionRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSessionRepresentation.class);
  }

  /**
   * Convert an instance of UserSessionRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

