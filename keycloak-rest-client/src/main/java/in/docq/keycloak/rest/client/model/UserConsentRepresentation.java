/*
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.keycloak.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import in.docq.keycloak.rest.client.JSON;

/**
 * UserConsentRepresentation
 */
@javax.annotation.Generated(value = "in.docq.keycloak.rest.codegen.languages.JavaClientCodegen", date = "2025-02-08T16:05:02.219423+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class UserConsentRepresentation {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_GRANTED_CLIENT_SCOPES = "grantedClientScopes";
  @SerializedName(SERIALIZED_NAME_GRANTED_CLIENT_SCOPES)
  @javax.annotation.Nullable
  private List<String> grantedClientScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private Long createdDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  @javax.annotation.Nullable
  private Long lastUpdatedDate;

  public static final String SERIALIZED_NAME_GRANTED_REALM_ROLES = "grantedRealmRoles";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GRANTED_REALM_ROLES)
  @javax.annotation.Nullable
  private List<String> grantedRealmRoles = new ArrayList<>();

  public UserConsentRepresentation() {
  }

  public UserConsentRepresentation clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public UserConsentRepresentation grantedClientScopes(@javax.annotation.Nullable List<String> grantedClientScopes) {
    this.grantedClientScopes = grantedClientScopes;
    return this;
  }

  public UserConsentRepresentation addGrantedClientScopesItem(String grantedClientScopesItem) {
    if (this.grantedClientScopes == null) {
      this.grantedClientScopes = new ArrayList<>();
    }
    this.grantedClientScopes.add(grantedClientScopesItem);
    return this;
  }

  /**
   * Get grantedClientScopes
   * @return grantedClientScopes
   */
  @javax.annotation.Nullable
  public List<String> getGrantedClientScopes() {
    return grantedClientScopes;
  }

  public void setGrantedClientScopes(@javax.annotation.Nullable List<String> grantedClientScopes) {
    this.grantedClientScopes = grantedClientScopes;
  }


  public UserConsentRepresentation createdDate(@javax.annotation.Nullable Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable Long createdDate) {
    this.createdDate = createdDate;
  }


  public UserConsentRepresentation lastUpdatedDate(@javax.annotation.Nullable Long lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
   */
  @javax.annotation.Nullable
  public Long getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(@javax.annotation.Nullable Long lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }


  @Deprecated
  public UserConsentRepresentation grantedRealmRoles(@javax.annotation.Nullable List<String> grantedRealmRoles) {
    this.grantedRealmRoles = grantedRealmRoles;
    return this;
  }

  public UserConsentRepresentation addGrantedRealmRolesItem(String grantedRealmRolesItem) {
    if (this.grantedRealmRoles == null) {
      this.grantedRealmRoles = new ArrayList<>();
    }
    this.grantedRealmRoles.add(grantedRealmRolesItem);
    return this;
  }

  /**
   * Get grantedRealmRoles
   * @return grantedRealmRoles
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getGrantedRealmRoles() {
    return grantedRealmRoles;
  }

  @Deprecated
  public void setGrantedRealmRoles(@javax.annotation.Nullable List<String> grantedRealmRoles) {
    this.grantedRealmRoles = grantedRealmRoles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserConsentRepresentation userConsentRepresentation = (UserConsentRepresentation) o;
    return Objects.equals(this.clientId, userConsentRepresentation.clientId) &&
        Objects.equals(this.grantedClientScopes, userConsentRepresentation.grantedClientScopes) &&
        Objects.equals(this.createdDate, userConsentRepresentation.createdDate) &&
        Objects.equals(this.lastUpdatedDate, userConsentRepresentation.lastUpdatedDate) &&
        Objects.equals(this.grantedRealmRoles, userConsentRepresentation.grantedRealmRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, grantedClientScopes, createdDate, lastUpdatedDate, grantedRealmRoles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserConsentRepresentation {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    grantedClientScopes: ").append(toIndentedString(grantedClientScopes)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    grantedRealmRoles: ").append(toIndentedString(grantedRealmRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("grantedClientScopes");
    openapiFields.add("createdDate");
    openapiFields.add("lastUpdatedDate");
    openapiFields.add("grantedRealmRoles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserConsentRepresentation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserConsentRepresentation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserConsentRepresentation is not found in the empty JSON string", UserConsentRepresentation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserConsentRepresentation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserConsentRepresentation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grantedClientScopes") != null && !jsonObj.get("grantedClientScopes").isJsonNull() && !jsonObj.get("grantedClientScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantedClientScopes` to be an array in the JSON string but got `%s`", jsonObj.get("grantedClientScopes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grantedRealmRoles") != null && !jsonObj.get("grantedRealmRoles").isJsonNull() && !jsonObj.get("grantedRealmRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantedRealmRoles` to be an array in the JSON string but got `%s`", jsonObj.get("grantedRealmRoles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserConsentRepresentation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserConsentRepresentation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserConsentRepresentation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserConsentRepresentation.class));

       return (TypeAdapter<T>) new TypeAdapter<UserConsentRepresentation>() {
           @Override
           public void write(JsonWriter out, UserConsentRepresentation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserConsentRepresentation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserConsentRepresentation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserConsentRepresentation
   * @throws IOException if the JSON string is invalid with respect to UserConsentRepresentation
   */
  public static UserConsentRepresentation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserConsentRepresentation.class);
  }

  /**
   * Convert an instance of UserConsentRepresentation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

