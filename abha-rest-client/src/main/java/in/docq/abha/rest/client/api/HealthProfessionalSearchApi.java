/*
 * Healthcare Professional ID Service
 * It is important to standardize the process of identification of an individual across Healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Healthcare Professional ID to an individual, one only needs basic demographic details like **Name, Year of Birth, Gender**. In addition, citizens should be able to update contact information easily.  The Healthcare Professional ID will be used for the purposes of uniquely identifying persons, authenticating them, and threading their health records (only with the informed consent of the patient) across multiple systems and stakeholders. ## API Security</h4> You need Authorization Token and X-HIP-ID to consume APIs.   ## Notes:    <b>1. In order to have access to Healthcare Professional ID APIs, Your `ClientId`<sup style='color:red'>* required</sup> must have hid role in gateway. So if you want access to these APIs then please request it in your Ayushman Bharat Digital Mission (ABDM) on-boarding request.</b>   <b>2. When calling APIs, please ensure that Authorization header must have format as `Bearer <Token_Value>`. Please note that prefix Bearer followed by space before token value.</b>   <b>3. Please use latest version of **APIs (currently latest V2)**</b> as <b style=\"color:red\">older version may get deprecated soon.</b></b>   <b>4. Check the state and district codes from LGD directory [click here](https://lgdirectory.gov.in/)</b>    <b>5. Highlighted Changes in the API Version 2 </b>  - Sensitive data (Data like OTP, Aadhaar Number/Virtual ID/UID Token, Password, Username etc) have to be encrypted. - Data is encrypted by the public certificate. The certificate can be downloaded from the __/v1/auth/cert__  API under  __Authentication__ tag in the version 1. - RSA Encryption to encrypt the data. Cipher Type - <b>RSA/ECB/PKCS1Padding</b>.  online tool to encrypt data [click here](https://www.devglan.com/online-tools/rsa-encryption-decryption)    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.*;
import okhttp3.Call;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionStage;

public class HealthProfessionalSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HealthProfessionalSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthProfessionalSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchUserAccountHFR
     * @param searchByHprIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserAccountHFRCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchByHprIdRequest;

        // create path and map variables
        String localVarPath = "/v2/search/internal/hfr/searchByHprId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserAccountHFRValidateBeforeCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchByHprIdRequest' is set
        if (searchByHprIdRequest == null) {
            throw new ApiException("Missing the required parameter 'searchByHprIdRequest' when calling searchUserAccountHFR(Async)");
        }

        return searchUserAccountHFRCall(searchByHprIdRequest, _callback);

    }

    /**
     * Search a user by Healthcare Professional ID Number/Healthcare Professional ID.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |  ## &lt;b style&#x3D;&#39;color:red&#39;&gt;Note:&lt;/b&gt; - API is only Accessible for the &lt;b style&#x3D;&#39;color:black&#39;&gt;HFR&lt;/b&gt;. &lt;sup style&#x3D;&#39;color:red&#39;&gt;&#39;ACCOUNT_TAG_ADD&#39; role is mandatory for the API ACCESS.&lt;/sup&gt;
     * @param searchByHprIdRequest  (required)
     * @return SearchAccountHFRResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public SearchAccountHFRResponse searchUserAccountHFR(SearchByHprIdRequest searchByHprIdRequest) throws ApiException {
        ApiResponse<SearchAccountHFRResponse> localVarResp = searchUserAccountHFRWithHttpInfo(searchByHprIdRequest);
        return localVarResp.getData();
    }

    /**
     * Search a user by Healthcare Professional ID Number/Healthcare Professional ID.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |  ## &lt;b style&#x3D;&#39;color:red&#39;&gt;Note:&lt;/b&gt; - API is only Accessible for the &lt;b style&#x3D;&#39;color:black&#39;&gt;HFR&lt;/b&gt;. &lt;sup style&#x3D;&#39;color:red&#39;&gt;&#39;ACCOUNT_TAG_ADD&#39; role is mandatory for the API ACCESS.&lt;/sup&gt;
     * @param searchByHprIdRequest  (required)
     * @return ApiResponse&lt;SearchAccountHFRResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAccountHFRResponse> searchUserAccountHFRWithHttpInfo(SearchByHprIdRequest searchByHprIdRequest) throws ApiException {
        okhttp3.Call localVarCall = searchUserAccountHFRValidateBeforeCall(searchByHprIdRequest, null);
        Type localVarReturnType = new TypeToken<SearchAccountHFRResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for searchUserByAccount
     * @param searchByHprIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserByAccountCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchByHprIdRequest;

        // create path and map variables
        String localVarPath = "/v1/search/searchByHprId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserByAccountValidateBeforeCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchByHprIdRequest' is set
        if (searchByHprIdRequest == null) {
            throw new ApiException("Missing the required parameter 'searchByHprIdRequest' when calling searchUserByAccount(Async)");
        }

        return searchUserByAccountCall(searchByHprIdRequest, _callback);

    }

    /**
     * Search a user by Healthcare Professional ID Number.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |
     * @param searchByHprIdRequest  (required)
     * @return ApiResponse&lt;SearchAccountWebResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<SearchAccountWebResponse> searchUserByAccountAsync(SearchByHprIdRequest searchByHprIdRequest) {
        try {
            FutureApiCallBack<SearchAccountWebResponse> callBack = FutureApiCallBack.newCallback();
            okhttp3.Call localVarCall = searchUserByAccountValidateBeforeCall(searchByHprIdRequest, callBack);
            Type localVarReturnType = new TypeToken<SearchAccountWebResponse>(){}.getType();
            localVarApiClient.executeAsync(localVarCall, localVarReturnType, callBack);
            return callBack.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    public Call searchUserByHprIdCall(String hprId, String token, ApiCallback _callback) throws ApiException {
        String basePath = null;
        String[] localBasePaths = new String[0];
        if (this.localCustomBaseUrl != null) {
            basePath = this.localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[this.localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;
        String localVarPath = "/v1/search/searchByHprId/{hprId}".replace("{hprId}", this.localVarApiClient.escapeString(hprId.toString()));
        List<Pair> localVarQueryParams = new ArrayList();
        List<Pair> localVarCollectionQueryParams = new ArrayList();
        Map<String, String> localVarHeaderParams = new HashMap();
        Map<String, String> localVarCookieParams = new HashMap();
        Map<String, Object> localVarFormParams = new HashMap();
        String[] localVarAccepts = new String[]{"*/*"};
        String localVarAccept = this.localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        String[] localVarContentTypes = new String[0];
        String localVarContentType = this.localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Bearer ", token);
        }

        String[] localVarAuthNames = new String[]{"BearerAuth"};
        return this.localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    private Call searchUserByHprIdValidateBeforeCall(String hprId, String token, ApiCallback _callback) throws ApiException {
        if (hprId == null) {
            throw new ApiException("Missing the required parameter 'hprId' when calling searchUserByHprId(Async)");
        } else {
            return this.searchUserByHprIdCall(hprId, token, _callback);
        }
    }

    public CompletionStage<UserEntityResponseDTO> searchUserByHprIdAsync(String hprId, String authorization) {
        try {
            FutureApiCallBack<UserEntityResponseDTO> callBack = FutureApiCallBack.newCallback();
            Call localVarCall = this.searchUserByHprIdValidateBeforeCall(hprId, authorization, callBack);
            Type localVarReturnType = new TypeToken<UserEntityResponseDTO>(){}.getType();
            localVarApiClient.executeAsync(localVarCall, localVarReturnType, callBack);
            return callBack.getFuture();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Build call for searchUserByOtherDocAccount
     * @param searchByHprIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserByOtherDocAccountCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchByHprIdRequest;

        // create path and map variables
        String localVarPath = "/v2/search/internalapi/searchByHprId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserByOtherDocAccountValidateBeforeCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchByHprIdRequest' is set
        if (searchByHprIdRequest == null) {
            throw new ApiException("Missing the required parameter 'searchByHprIdRequest' when calling searchUserByOtherDocAccount(Async)");
        }

        return searchUserByOtherDocAccountCall(searchByHprIdRequest, _callback);

    }

    /**
     * Search a user by Healthcare Professional ID Number.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |
     * @param searchByHprIdRequest  (required)
     * @return SearchAccountWebResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public SearchAccountWebResponse searchUserByOtherDocAccount(SearchByHprIdRequest searchByHprIdRequest) throws ApiException {
        ApiResponse<SearchAccountWebResponse> localVarResp = searchUserByOtherDocAccountWithHttpInfo(searchByHprIdRequest);
        return localVarResp.getData();
    }

    /**
     * Search a user by Healthcare Professional ID Number.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |
     * @param searchByHprIdRequest  (required)
     * @return ApiResponse&lt;SearchAccountWebResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAccountWebResponse> searchUserByOtherDocAccountWithHttpInfo(SearchByHprIdRequest searchByHprIdRequest) throws ApiException {
        okhttp3.Call localVarCall = searchUserByOtherDocAccountValidateBeforeCall(searchByHprIdRequest, null);
        Type localVarReturnType = new TypeToken<SearchAccountWebResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for searchUserByUserid
     * @param searchByHprIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API will return true/false respective to the account. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserByUseridCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchByHprIdRequest;

        // create path and map variables
        String localVarPath = "/v2/search/existsByHprId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserByUseridValidateBeforeCall(SearchByHprIdRequest searchByHprIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchByHprIdRequest' is set
        if (searchByHprIdRequest == null) {
            throw new ApiException("Missing the required parameter 'searchByHprIdRequest' when calling searchUserByUserid(Async)");
        }

        return searchUserByUseridCall(searchByHprIdRequest, _callback);

    }

    /**
     * Search a user exists by Healthcare Professional ID Number.
     * ## Search a user exists by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |
     * @param searchByHprIdRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API will return true/false respective to the account. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public String searchUserByUserid(SearchByHprIdRequest searchByHprIdRequest) throws ApiException {
        ApiResponse<String> localVarResp = searchUserByUseridWithHttpInfo(searchByHprIdRequest);
        return localVarResp.getData();
    }

    /**
     * Search a user exists by Healthcare Professional ID Number.
     * ## Search a user exists by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |
     * @param searchByHprIdRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API will return true/false respective to the account. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> searchUserByUseridWithHttpInfo(SearchByHprIdRequest searchByHprIdRequest) throws ApiException {
        okhttp3.Call localVarCall = searchUserByUseridValidateBeforeCall(searchByHprIdRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search a user exists by Healthcare Professional ID Number. (asynchronously)
     * ## Search a user exists by Healthcare Professional ID Number.  - Healthcare Professional ID need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |
     * @param searchByHprIdRequest  (required)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API will return true/false respective to the account. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<Boolean> searchUserByUseridAsync(SearchByHprIdRequest searchByHprIdRequest) {
        try {
            FutureApiCallBack<String> callBack = FutureApiCallBack.newCallback();
            okhttp3.Call localVarCall = searchUserByUseridValidateBeforeCall(searchByHprIdRequest, null);
            Type localVarReturnType = new TypeToken<String>(){}.getType();
            localVarApiClient.executeAsync(localVarCall, localVarReturnType, callBack);
            return callBack.getFuture()
                    .thenApply(verdict -> verdict.equals("true"));
        } catch (Exception e) {
            throw new CompletionException(e);
        }

    }

    /**
     * Build call for searchUserForLogin
     * @param searchByHpIdWebRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserForLoginCall(SearchByHpIdWebRequest searchByHpIdWebRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchByHpIdWebRequest;

        // create path and map variables
        String localVarPath = "/v2/search/searchHprIdToLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "X-HIP-ID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserForLoginValidateBeforeCall(SearchByHpIdWebRequest searchByHpIdWebRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchByHpIdWebRequest' is set
        if (searchByHpIdWebRequest == null) {
            throw new ApiException("Missing the required parameter 'searchByHpIdWebRequest' when calling searchUserForLogin(Async)");
        }

        return searchUserForLoginCall(searchByHpIdWebRequest, _callback);

    }

    /**
     * Search a user by Healthcare Professional ID Number.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID and Year Of Birth need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |  | yearOfBirth &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | year of birth example: 1990|
     * @param searchByHpIdWebRequest  (required)
     * @return SearchAccountWebResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public SearchAccountWebResponse searchUserForLogin(SearchByHpIdWebRequest searchByHpIdWebRequest) throws ApiException {
        ApiResponse<SearchAccountWebResponse> localVarResp = searchUserForLoginWithHttpInfo(searchByHpIdWebRequest);
        return localVarResp.getData();
    }

    /**
     * Search a user by Healthcare Professional ID Number.
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID and Year Of Birth need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |  | yearOfBirth &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | year of birth example: 1990|
     * @param searchByHpIdWebRequest  (required)
     * @return ApiResponse&lt;SearchAccountWebResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAccountWebResponse> searchUserForLoginWithHttpInfo(SearchByHpIdWebRequest searchByHpIdWebRequest) throws ApiException {
        okhttp3.Call localVarCall = searchUserForLoginValidateBeforeCall(searchByHpIdWebRequest, null);
        Type localVarReturnType = new TypeToken<SearchAccountWebResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search a user by Healthcare Professional ID Number. (asynchronously)
     * ## Search a user by Healthcare Professional ID Number.  - Healthcare Professional ID and Year Of Birth need to pass in the request  ## Request below is the Request Parameters description   | Attributes | Description |  | ------ | ------ |  | hprId &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | Healthcare Professional ID Number/Healthcare Professional ID |  | yearOfBirth &lt;sup style&#x3D;&#39;color:red&#39;&gt;* required&lt;/sup&gt; | year of birth example: 1990|
     * @param searchByHpIdWebRequest  (required)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request. Please provide valid request syntax </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> API will return the details of the accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
     </table>
     */
    public CompletionStage<SearchAccountWebResponse> searchUserForLoginAsync(SearchByHpIdWebRequest searchByHpIdWebRequest) {
    try {
        FutureApiCallBack<SearchAccountWebResponse> callBack = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = searchUserForLoginValidateBeforeCall(searchByHpIdWebRequest, callBack);
        Type localVarReturnType = new TypeToken<SearchAccountWebResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callBack);
        return callBack.getFuture();
    } catch (Exception e) {
        throw new CompletionException(e);
    }
    }
}
