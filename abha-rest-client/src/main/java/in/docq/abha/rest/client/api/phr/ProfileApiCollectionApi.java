/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api.phr;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.phr.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletionStage;

public class ProfileApiCollectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileApiCollectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileApiCollectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deLinkRequest
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param deLinkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;DE_LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a de-link request for various services. This includes operations such as generating a request to de-link a specific service or account, ensuring that the request has been processed correctly and the de-linking has been completed as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the de-link request process due to invalid or missing inputs. Specifically, this includes errors such as an invalid transaction ID or a blank action specified in the de-link request, preventing the operation from being completed successfully.       &lt;p&gt;&lt;strong&gt;Types of De-Link Request Errors:&lt;/strong&gt;&lt;/p&gt;       &lt;ol&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the de-link request is invalid.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt;       &lt;ol start&#x3D;\&quot;2\&quot;&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Blank Action:&lt;/strong&gt; This error occurs when the action specified in the de-link request is blank or missing.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the de-link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deLinkRequestCall(String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deLinkRequestRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/deLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deLinkRequestValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling deLinkRequest(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling deLinkRequest(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling deLinkRequest(Async)");
        }

        return deLinkRequestCall(xToken, REQUEST_ID, TIMESTAMP, deLinkRequestRequest, _callback);

    }

    /**
     * De-Link Request
     * API endpoint is used to de-link an ABHA (Ayushman. Bharat Health Account) address from an ABHA number. This de-linking process is crucial for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Privacy Control:&lt;/strong&gt;Allows users to manage their privacy by de-linking their ABHA address from their ABHA number, ensuring that their health information is not accessible through the ABHA address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Management&lt;/strong&gt;Helps in managing and updating health records by removing outdated or incorrect ABHA addresses linked to an ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; Enhances security by allowing users to de-link compromised or unauthorized ABHA addresses from their ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance&lt;/strong&gt; Ensures compliance with health data management policies by allowing users to maintain accurate and up-to-date linkages between their ABHA address and ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param deLinkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;DE_LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return DeLinkRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a de-link request for various services. This includes operations such as generating a request to de-link a specific service or account, ensuring that the request has been processed correctly and the de-linking has been completed as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the de-link request process due to invalid or missing inputs. Specifically, this includes errors such as an invalid transaction ID or a blank action specified in the de-link request, preventing the operation from being completed successfully.       &lt;p&gt;&lt;strong&gt;Types of De-Link Request Errors:&lt;/strong&gt;&lt;/p&gt;       &lt;ol&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the de-link request is invalid.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt;       &lt;ol start&#x3D;\&quot;2\&quot;&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Blank Action:&lt;/strong&gt; This error occurs when the action specified in the de-link request is blank or missing.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the de-link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public DeLinkRequest200Response deLinkRequest(String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest) throws ApiException {
        ApiResponse<DeLinkRequest200Response> localVarResp = deLinkRequestWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP, deLinkRequestRequest);
        return localVarResp.getData();
    }

    /**
     * De-Link Request
     * API endpoint is used to de-link an ABHA (Ayushman. Bharat Health Account) address from an ABHA number. This de-linking process is crucial for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Privacy Control:&lt;/strong&gt;Allows users to manage their privacy by de-linking their ABHA address from their ABHA number, ensuring that their health information is not accessible through the ABHA address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Management&lt;/strong&gt;Helps in managing and updating health records by removing outdated or incorrect ABHA addresses linked to an ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; Enhances security by allowing users to de-link compromised or unauthorized ABHA addresses from their ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance&lt;/strong&gt; Ensures compliance with health data management policies by allowing users to maintain accurate and up-to-date linkages between their ABHA address and ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param deLinkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;DE_LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return ApiResponse&lt;DeLinkRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a de-link request for various services. This includes operations such as generating a request to de-link a specific service or account, ensuring that the request has been processed correctly and the de-linking has been completed as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the de-link request process due to invalid or missing inputs. Specifically, this includes errors such as an invalid transaction ID or a blank action specified in the de-link request, preventing the operation from being completed successfully.       &lt;p&gt;&lt;strong&gt;Types of De-Link Request Errors:&lt;/strong&gt;&lt;/p&gt;       &lt;ol&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the de-link request is invalid.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt;       &lt;ol start&#x3D;\&quot;2\&quot;&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Blank Action:&lt;/strong&gt; This error occurs when the action specified in the de-link request is blank or missing.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the de-link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeLinkRequest200Response> deLinkRequestWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = deLinkRequestValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, deLinkRequestRequest, null);
        Type localVarReturnType = new TypeToken<DeLinkRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * De-Link Request (asynchronously)
     * API endpoint is used to de-link an ABHA (Ayushman. Bharat Health Account) address from an ABHA number. This de-linking process is crucial for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Privacy Control:&lt;/strong&gt;Allows users to manage their privacy by de-linking their ABHA address from their ABHA number, ensuring that their health information is not accessible through the ABHA address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Management&lt;/strong&gt;Helps in managing and updating health records by removing outdated or incorrect ABHA addresses linked to an ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; Enhances security by allowing users to de-link compromised or unauthorized ABHA addresses from their ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance&lt;/strong&gt; Ensures compliance with health data management policies by allowing users to maintain accurate and up-to-date linkages between their ABHA address and ABHA number.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param deLinkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;DE_LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a de-link request for various services. This includes operations such as generating a request to de-link a specific service or account, ensuring that the request has been processed correctly and the de-linking has been completed as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the de-link request process due to invalid or missing inputs. Specifically, this includes errors such as an invalid transaction ID or a blank action specified in the de-link request, preventing the operation from being completed successfully.       &lt;p&gt;&lt;strong&gt;Types of De-Link Request Errors:&lt;/strong&gt;&lt;/p&gt;       &lt;ol&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the de-link request is invalid.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt;       &lt;ol start&#x3D;\&quot;2\&quot;&gt;         &lt;li&gt;           &lt;p&gt;&lt;strong&gt;De-Link Request - Blank Action:&lt;/strong&gt; This error occurs when the action specified in the de-link request is blank or missing.&lt;/p&gt;         &lt;/li&gt;       &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the de-link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deLinkRequestAsync(String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest, final ApiCallback<DeLinkRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deLinkRequestValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, deLinkRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<DeLinkRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<DeLinkRequest200Response> deLinkRequestAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest) throws ApiException {
        FutureApiCallBack<DeLinkRequest200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = deLinkRequestValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, deLinkRequestRequest, callback);
        Type localVarReturnType = new TypeToken<DeLinkRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deLinkRequestValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling deLinkRequest(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling deLinkRequest(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling deLinkRequest(Async)");
        }

        return deLinkRequestCall(token, xToken, REQUEST_ID, TIMESTAMP, deLinkRequestRequest, _callback);

    }

    public okhttp3.Call deLinkRequestCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, DeLinkRequestRequest deLinkRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deLinkRequestRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/deLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for getPhrCard
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request to “Get PHR Card” has been accepted for processing, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code means the request to “Get PHR Card” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code means the request to “Get PHR Card” was forbidden due to missing or invalid X token. This means the necessary authorization token was not provided, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPhrCardCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/phrCard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhrCardValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling getPhrCard(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling getPhrCard(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling getPhrCard(Async)");
        }

        return getPhrCardCall(xToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * Get PHR Card
     * API endpoint is used to provide a PNG image byte array that represents the PHR (Personal Health Record) card for the currently logged-in user’s account. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Access:&lt;/strong&gt; Allows users to quickly access their PHR card, which contains important health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Convenience:&lt;/strong&gt; Provides a convenient way for users to share their health information with healthcare providers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure sharing of health information through a scannable PHR card, reducing the risk of data breaches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt; Promotes interoperability by enabling seamless integration with various healthcare systems that support PHR card scanning.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request to “Get PHR Card” has been accepted for processing, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code means the request to “Get PHR Card” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code means the request to “Get PHR Card” was forbidden due to missing or invalid X token. This means the necessary authorization token was not provided, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public void getPhrCard(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        getPhrCardWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP);
    }

    /**
     * Get PHR Card
     * API endpoint is used to provide a PNG image byte array that represents the PHR (Personal Health Record) card for the currently logged-in user’s account. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Access:&lt;/strong&gt; Allows users to quickly access their PHR card, which contains important health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Convenience:&lt;/strong&gt; Provides a convenient way for users to share their health information with healthcare providers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure sharing of health information through a scannable PHR card, reducing the risk of data breaches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt; Promotes interoperability by enabling seamless integration with various healthcare systems that support PHR card scanning.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request to “Get PHR Card” has been accepted for processing, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code means the request to “Get PHR Card” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code means the request to “Get PHR Card” was forbidden due to missing or invalid X token. This means the necessary authorization token was not provided, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPhrCardWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = getPhrCardValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get PHR Card (asynchronously)
     * API endpoint is used to provide a PNG image byte array that represents the PHR (Personal Health Record) card for the currently logged-in user’s account. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Access:&lt;/strong&gt; Allows users to quickly access their PHR card, which contains important health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Convenience:&lt;/strong&gt; Provides a convenient way for users to share their health information with healthcare providers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure sharing of health information through a scannable PHR card, reducing the risk of data breaches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt; Promotes interoperability by enabling seamless integration with various healthcare systems that support PHR card scanning.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request to “Get PHR Card” has been accepted for processing, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code means the request to “Get PHR Card” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code means the request to “Get PHR Card” was forbidden due to missing or invalid X token. This means the necessary authorization token was not provided, so the Patient Health Record (PHR) card was not generated or delivered. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPhrCardAsync(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhrCardValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public CompletionStage<byte[]> getPhrCardAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<byte[]> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = getPhrCardValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhrCardValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling getPhrCard(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling getPhrCard(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling getPhrCard(Async)");
        }

        return getPhrCardCall(token, xToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    public okhttp3.Call getPhrCardCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        Object localVarPostBody = null;
        String localVarPath = "/abha/api/v3/phr/app/login/profile/phrCard";
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "image/png"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }
        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }
        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }
        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }
        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for getProfile
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of a user profile. This includes operations such as fetching the details of a user profile, ensuring that the request has been processed correctly and the profile information has been retrieved as intended. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling getProfile(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling getProfile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling getProfile(Async)");
        }

        return getProfileCall(xToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * Get Profile
     * API endpoint is used to retrieve the profile information of the user associated with the current ABHA (Ayushman Bharat Health Account) address. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Identification:&lt;/strong&gt; Provides detailed information about the user, helping in identifying and verifying the user’s identity.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management::&lt;/strong&gt; Allows users to view and manage their profile information, ensuring that their details are up-to-date.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Personalized Experience:&lt;/strong&gt; Enables personalized user experiences by providing relevant information based on the user’s profile.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Access:&lt;/strong&gt; Facilitates access to important health-related data linked to the user’s ABHA address, improving the efficiency of healthcare services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt;  Ensures compliance with health data management policies by providing a standardized method for retrieving user profile information, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return GetProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of a user profile. This includes operations such as fetching the details of a user profile, ensuring that the request has been processed correctly and the profile information has been retrieved as intended. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public GetProfile200Response getProfile(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        ApiResponse<GetProfile200Response> localVarResp = getProfileWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP);
        return localVarResp.getData();
    }

    /**
     * Get Profile
     * API endpoint is used to retrieve the profile information of the user associated with the current ABHA (Ayushman Bharat Health Account) address. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Identification:&lt;/strong&gt; Provides detailed information about the user, helping in identifying and verifying the user’s identity.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management::&lt;/strong&gt; Allows users to view and manage their profile information, ensuring that their details are up-to-date.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Personalized Experience:&lt;/strong&gt; Enables personalized user experiences by providing relevant information based on the user’s profile.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Access:&lt;/strong&gt; Facilitates access to important health-related data linked to the user’s ABHA address, improving the efficiency of healthcare services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt;  Ensures compliance with health data management policies by providing a standardized method for retrieving user profile information, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;GetProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of a user profile. This includes operations such as fetching the details of a user profile, ensuring that the request has been processed correctly and the profile information has been retrieved as intended. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetProfile200Response> getProfileWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = getProfileValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, null);
        Type localVarReturnType = new TypeToken<GetProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Profile (asynchronously)
     * API endpoint is used to retrieve the profile information of the user associated with the current ABHA (Ayushman Bharat Health Account) address. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Identification:&lt;/strong&gt; Provides detailed information about the user, helping in identifying and verifying the user’s identity.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management::&lt;/strong&gt; Allows users to view and manage their profile information, ensuring that their details are up-to-date.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Personalized Experience:&lt;/strong&gt; Enables personalized user experiences by providing relevant information based on the user’s profile.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Access:&lt;/strong&gt; Facilitates access to important health-related data linked to the user’s ABHA address, improving the efficiency of healthcare services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt;  Ensures compliance with health data management policies by providing a standardized method for retrieving user profile information, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of a user profile. This includes operations such as fetching the details of a user profile, ensuring that the request has been processed correctly and the profile information has been retrieved as intended. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the user profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileAsync(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback<GetProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, _callback);
        Type localVarReturnType = new TypeToken<GetProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<GetProfile200Response> getProfileAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<GetProfile200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = getProfileValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, callback);
        Type localVarReturnType = new TypeToken<GetProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling getProfile(Async)");
        }
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling getProfile(Async)");
        }
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling getProfile(Async)");
        }
        return getProfileCall(token, xToken, REQUEST_ID, TIMESTAMP, _callback);
    }

    public okhttp3.Call getProfileCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        Object localVarPostBody = null;
        String localVarPath = "/abha/api/v3/phr/app/login/profile";
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }
        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }
        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }
        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }
        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for getQrCode
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request has been accepted for processing, but the processing has not been completed. In this context, it refers to the successful acceptance of a request to generate a QR code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getQrCodeCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/qrCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-Token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQrCodeValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling getQrCode(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling getQrCode(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling getQrCode(Async)");
        }

        return getQrCodeCall(xToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * Get QR Code
     * API endpoint is used to provide a PNG image byte array that represents the QR code for the currently logged-in user’s account. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Access:&lt;/strong&gt; Allows users to quickly access their health account information by scanning the QR code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure sharing of health account information through a scannable QR code, reducing the risk of data breaches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt;  Promotes interoperability by enabling seamless integration with various healthcare systems that support QR code scanning.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request has been accepted for processing, but the processing has not been completed. In this context, it refers to the successful acceptance of a request to generate a QR code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public void getQrCode(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        getQrCodeWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP);
    }

    /**
     * Get QR Code
     * API endpoint is used to provide a PNG image byte array that represents the QR code for the currently logged-in user’s account. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Access:&lt;/strong&gt; Allows users to quickly access their health account information by scanning the QR code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure sharing of health account information through a scannable QR code, reducing the risk of data breaches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt;  Promotes interoperability by enabling seamless integration with various healthcare systems that support QR code scanning.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request has been accepted for processing, but the processing has not been completed. In this context, it refers to the successful acceptance of a request to generate a QR code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getQrCodeWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = getQrCodeValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get QR Code (asynchronously)
     * API endpoint is used to provide a PNG image byte array that represents the QR code for the currently logged-in user’s account. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Access:&lt;/strong&gt; Allows users to quickly access their health account information by scanning the QR code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure sharing of health account information through a scannable QR code, reducing the risk of data breaches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt;  Promotes interoperability by enabling seamless integration with various healthcare systems that support QR code scanning.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The 202 response code indicates that the request has been accepted for processing, but the processing has not been completed. In this context, it refers to the successful acceptance of a request to generate a QR code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. Specifically, this error occurs when there is no authentication provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for retrieving the QR code, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getQrCodeAsync(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQrCodeValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public CompletionStage<byte[]> getQrCodeAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<byte[]> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = getQrCodeValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQrCodeValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling getQrCode(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling getQrCode(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling getQrCode(Async)"); }
        return getQrCodeCall(token, xToken, REQUEST_ID, TIMESTAMP, _callback);
    }

    public okhttp3.Call getQrCodeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/qrCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-Token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for linkRequest
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param linkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a link request for various services. This includes operations such as generating a link for a specific service or operation, ensuring that the request has been processed correctly and the link has been created as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the link request process due to invalid or missing input. &lt;p&gt;&lt;strong&gt;Types of Link Request Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Blank Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is blank or missing.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Account Action:&lt;/strong&gt; This error occurs when the account action specified in the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call linkRequestCall(String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkRequestRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkRequestValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling linkRequest(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling linkRequest(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling linkRequest(Async)");
        }

        return linkRequestCall(xToken, REQUEST_ID, TIMESTAMP, linkRequestRequest, _callback);

    }

    /**
     * Link Request
     * API endpoint is used to link an ABHA (Ayushman Bharat Health Account) address to an ABHA number. This linking process is crucial for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified Health Records:&lt;/strong&gt;By linking the ABHA address to the ABHA number, users can ensure that all their health records are unified under a single identifier. This makes it easier to access and manage health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhanced Security:&lt;/strong&gt;Linking the ABHA address to the ABHA number adds an extra layer of security, ensuring that only authorized users can access sensitive health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Streamlined Access:&lt;/strong&gt; With the ABHA address linked to the ABHA number, users can seamlessly access their health records across different healthcare providers and platforms, improving the efficiency of healthcare services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improved Healthcare Coordination:&lt;/strong&gt;  Healthcare providers can better coordinate care by having access to a comprehensive view of a patient’s health history, leading to more informed decision-making and better patient outcomes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance with National Health Policies:&lt;/strong&gt;  This linking process aligns with national health policies and standards, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param linkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return LinkRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a link request for various services. This includes operations such as generating a link for a specific service or operation, ensuring that the request has been processed correctly and the link has been created as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the link request process due to invalid or missing input. &lt;p&gt;&lt;strong&gt;Types of Link Request Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Blank Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is blank or missing.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Account Action:&lt;/strong&gt; This error occurs when the account action specified in the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public LinkRequest200Response linkRequest(String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest) throws ApiException {
        ApiResponse<LinkRequest200Response> localVarResp = linkRequestWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP, linkRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Link Request
     * API endpoint is used to link an ABHA (Ayushman Bharat Health Account) address to an ABHA number. This linking process is crucial for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified Health Records:&lt;/strong&gt;By linking the ABHA address to the ABHA number, users can ensure that all their health records are unified under a single identifier. This makes it easier to access and manage health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhanced Security:&lt;/strong&gt;Linking the ABHA address to the ABHA number adds an extra layer of security, ensuring that only authorized users can access sensitive health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Streamlined Access:&lt;/strong&gt; With the ABHA address linked to the ABHA number, users can seamlessly access their health records across different healthcare providers and platforms, improving the efficiency of healthcare services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improved Healthcare Coordination:&lt;/strong&gt;  Healthcare providers can better coordinate care by having access to a comprehensive view of a patient’s health history, leading to more informed decision-making and better patient outcomes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance with National Health Policies:&lt;/strong&gt;  This linking process aligns with national health policies and standards, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param linkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return ApiResponse&lt;LinkRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a link request for various services. This includes operations such as generating a link for a specific service or operation, ensuring that the request has been processed correctly and the link has been created as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the link request process due to invalid or missing input. &lt;p&gt;&lt;strong&gt;Types of Link Request Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Blank Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is blank or missing.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Account Action:&lt;/strong&gt; This error occurs when the account action specified in the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<LinkRequest200Response> linkRequestWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = linkRequestValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, linkRequestRequest, null);
        Type localVarReturnType = new TypeToken<LinkRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link Request (asynchronously)
     * API endpoint is used to link an ABHA (Ayushman Bharat Health Account) address to an ABHA number. This linking process is crucial for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified Health Records:&lt;/strong&gt;By linking the ABHA address to the ABHA number, users can ensure that all their health records are unified under a single identifier. This makes it easier to access and manage health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhanced Security:&lt;/strong&gt;Linking the ABHA address to the ABHA number adds an extra layer of security, ensuring that only authorized users can access sensitive health information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Streamlined Access:&lt;/strong&gt; With the ABHA address linked to the ABHA number, users can seamlessly access their health records across different healthcare providers and platforms, improving the efficiency of healthcare services.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improved Healthcare Coordination:&lt;/strong&gt;  Healthcare providers can better coordinate care by having access to a comprehensive view of a patient’s health history, leading to more informed decision-making and better patient outcomes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance with National Health Policies:&lt;/strong&gt;  This linking process aligns with national health policies and standards, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param linkRequestRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;action (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the action to be performed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;LINK&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and processing of a link request for various services. This includes operations such as generating a link for a specific service or operation, ensuring that the request has been processed correctly and the link has been created as intended. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the link request process due to invalid or missing input. &lt;p&gt;&lt;strong&gt;Types of Link Request Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Blank Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the link request is blank or missing.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;     &lt;li&gt;       &lt;p&gt;&lt;strong&gt;Link Request - Invalid Account Action:&lt;/strong&gt; This error occurs when the account action specified in the link request is invalid.&lt;/p&gt;     &lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the link request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call linkRequestAsync(String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest, final ApiCallback<LinkRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkRequestValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, linkRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<LinkRequest200Response> linkRequestAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest) throws ApiException {
        FutureApiCallBack<LinkRequest200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = linkRequestValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, linkRequestRequest, callback);
        Type localVarReturnType = new TypeToken<LinkRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkRequestValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling linkRequest(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling linkRequest(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling linkRequest(Async)"); }
        return linkRequestCall(token, xToken, REQUEST_ID, TIMESTAMP, linkRequestRequest, _callback);
    }

    public okhttp3.Call linkRequestCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, LinkRequestRequest linkRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = linkRequestRequest;
        String localVarPath = "/abha/api/v3/phr/app/login/profile/link";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        final String[] localVarContentTypes = { "application/json" }; final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes); if (localVarContentType != null) { localVarHeaderParams.put("Content-Type", localVarContentType); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (xToken != null) { localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for logout
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Logout” was successful. This means the user was logged out as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Logout” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the logout request was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Logout” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the logout request was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/request/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling logout(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling logout(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling logout(Async)");
        }

        return logoutCall(xToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * Logout
     * This API endpoint is used to log out the current session of a user. It ensures that the user’s session is securely terminated, preventing unauthorized access and maintaining the security of the application. &lt;br&gt;&lt;br&gt;**Uses**&lt;br&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session Termination:&lt;/strong&gt; Ends the user’s current session, ensuring that no further actions can be taken without re-authentication.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Enhances security by preventing unauthorized access to the user’s account after logout.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; Provides users with control over their sessions, allowing them to log out when needed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Management:&lt;/strong&gt; Frees up server resources by terminating inactive or unwanted sessions.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return Logout200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Logout” was successful. This means the user was logged out as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Logout” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the logout request was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Logout” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the logout request was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public Logout200Response logout(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        ApiResponse<Logout200Response> localVarResp = logoutWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP);
        return localVarResp.getData();
    }

    /**
     * Logout
     * This API endpoint is used to log out the current session of a user. It ensures that the user’s session is securely terminated, preventing unauthorized access and maintaining the security of the application. &lt;br&gt;&lt;br&gt;**Uses**&lt;br&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session Termination:&lt;/strong&gt; Ends the user’s current session, ensuring that no further actions can be taken without re-authentication.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Enhances security by preventing unauthorized access to the user’s account after logout.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; Provides users with control over their sessions, allowing them to log out when needed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Management:&lt;/strong&gt; Frees up server resources by terminating inactive or unwanted sessions.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;Logout200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Logout” was successful. This means the user was logged out as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Logout” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the logout request was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Logout” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the logout request was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Logout200Response> logoutWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, null);
        Type localVarReturnType = new TypeToken<Logout200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logout (asynchronously)
     * This API endpoint is used to log out the current session of a user. It ensures that the user’s session is securely terminated, preventing unauthorized access and maintaining the security of the application. &lt;br&gt;&lt;br&gt;**Uses**&lt;br&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session Termination:&lt;/strong&gt; Ends the user’s current session, ensuring that no further actions can be taken without re-authentication.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Enhances security by preventing unauthorized access to the user’s account after logout.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; Provides users with control over their sessions, allowing them to log out when needed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Management:&lt;/strong&gt; Frees up server resources by terminating inactive or unwanted sessions.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Logout” was successful. This means the user was logged out as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Logout” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the logout request was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Logout” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the logout request was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback<Logout200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, _callback);
        Type localVarReturnType = new TypeToken<Logout200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<Logout200Response> logoutAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<Logout200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = logoutValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, callback);
        Type localVarReturnType = new TypeToken<Logout200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling logout(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling logout(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling logout(Async)"); }
        return logoutCall(token, xToken, REQUEST_ID, TIMESTAMP, _callback);
    }

    public okhttp3.Call logoutCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = null; String localVarPath = "/abha/api/v3/phr/app/login/profile/logout";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>(); Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (xToken != null) { localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" }; return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for refreshToken
     * @param rToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Refresh Token” was successful. This means the token was refreshed as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Refresh Token” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the token refresh was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * r-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Refresh Token” was forbidden due to a missing or invalid refresh token. This means the necessary refresh token was not provided, so the token refresh was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call refreshTokenCall(String rToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/request/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (rToken != null) {
            localVarHeaderParams.put("R-token", localVarApiClient.parameterToString(rToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshTokenValidateBeforeCall(String rToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rToken' is set
        if (rToken == null) {
            throw new ApiException("Missing the required parameter 'rToken' when calling refreshToken(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling refreshToken(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling refreshToken(Async)");
        }

        return refreshTokenCall(rToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * Refresh Token
     * This API endpoint is used to refresh the authentication token for a user’s profile in the application. It ensures that the user remains authenticated without needing to log in again, enhancing the user experience by providing seamless access to the application. &lt;br&gt;&lt;br&gt;**Uses**&lt;br&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Token Renewal:&lt;/strong&gt; Automatically renews the user’s authentication token, preventing session expiration and maintaining continuous access.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Enhances security by issuing a new token, reducing the risk of token misuse.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Experience:&lt;/strong&gt;  Improves user experience by eliminating the need for frequent logins.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session Management:&lt;/strong&gt; Helps in managing user sessions efficiently by keeping them active with valid tokens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param rToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return RefreshToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Refresh Token” was successful. This means the token was refreshed as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Refresh Token” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the token refresh was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * r-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Refresh Token” was forbidden due to a missing or invalid refresh token. This means the necessary refresh token was not provided, so the token refresh was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public RefreshToken200Response refreshToken(String rToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        ApiResponse<RefreshToken200Response> localVarResp = refreshTokenWithHttpInfo(rToken, REQUEST_ID, TIMESTAMP);
        return localVarResp.getData();
    }

    /**
     * Refresh Token
     * This API endpoint is used to refresh the authentication token for a user’s profile in the application. It ensures that the user remains authenticated without needing to log in again, enhancing the user experience by providing seamless access to the application. &lt;br&gt;&lt;br&gt;**Uses**&lt;br&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Token Renewal:&lt;/strong&gt; Automatically renews the user’s authentication token, preventing session expiration and maintaining continuous access.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Enhances security by issuing a new token, reducing the risk of token misuse.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Experience:&lt;/strong&gt;  Improves user experience by eliminating the need for frequent logins.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session Management:&lt;/strong&gt; Helps in managing user sessions efficiently by keeping them active with valid tokens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param rToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;RefreshToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Refresh Token” was successful. This means the token was refreshed as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Refresh Token” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the token refresh was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * r-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Refresh Token” was forbidden due to a missing or invalid refresh token. This means the necessary refresh token was not provided, so the token refresh was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<RefreshToken200Response> refreshTokenWithHttpInfo(String rToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = refreshTokenValidateBeforeCall(rToken, REQUEST_ID, TIMESTAMP, null);
        Type localVarReturnType = new TypeToken<RefreshToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh Token (asynchronously)
     * This API endpoint is used to refresh the authentication token for a user’s profile in the application. It ensures that the user remains authenticated without needing to log in again, enhancing the user experience by providing seamless access to the application. &lt;br&gt;&lt;br&gt;**Uses**&lt;br&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Token Renewal:&lt;/strong&gt; Automatically renews the user’s authentication token, preventing session expiration and maintaining continuous access.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Enhances security by issuing a new token, reducing the risk of token misuse.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Experience:&lt;/strong&gt;  Improves user experience by eliminating the need for frequent logins.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session Management:&lt;/strong&gt; Helps in managing user sessions efficiently by keeping them active with valid tokens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt;  Enhances the efficiency of accessing and sharing health information, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param rToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates that the request to “Refresh Token” was successful. This means the token was refreshed as requested. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Refresh Token” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the token refresh was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * r-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Refresh Token” was forbidden due to a missing or invalid refresh token. This means the necessary refresh token was not provided, so the token refresh was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call refreshTokenAsync(String rToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback<RefreshToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshTokenValidateBeforeCall(rToken, REQUEST_ID, TIMESTAMP, _callback);
        Type localVarReturnType = new TypeToken<RefreshToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<RefreshToken200Response> refreshTokenAsyncCall(String token, String rToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<RefreshToken200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = refreshTokenValidateBeforeCall(token, rToken, REQUEST_ID, TIMESTAMP, callback);
        Type localVarReturnType = new TypeToken<RefreshToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshTokenValidateBeforeCall(String token, String rToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        if (rToken == null) { throw new ApiException("Missing the required parameter 'rToken' when calling refreshToken(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling refreshToken(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling refreshToken(Async)"); }
        return refreshTokenCall(token, rToken, REQUEST_ID, TIMESTAMP, _callback);
    }

    public okhttp3.Call refreshTokenCall(String token, String rToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        String[] localBasePaths = new String[]{};
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        Object localVarPostBody = null;
        String localVarPath = "/abha/api/v3/phr/app/login/profile/request/token";
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {"application/json", "text/plain"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }
        if (rToken != null) {
            localVarHeaderParams.put("R-token", "Bearer " + localVarApiClient.parameterToString(rToken));
        }
        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }
        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }
        String[] localVarAuthNames = new String[]{"bearerAuth"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for sendOtpUpdateEmail
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param sendOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhar-verify&lt;/code&gt;, &lt;code&gt;abha-address-profile&lt;/code&gt;,&lt;code&gt;email-verify&lt;/code&gt;,etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;,&lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/encrypted mobile-number/encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful sending of an Aadhaar OTP for linking, delinking, or updating a mobile number.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of OTP Verification Scenarios:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP sending for linking or delinking an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP sending for updating the mobile number associated with an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for updating the mobile number is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. This can occur due to various reasons related to invalid inputs or authentication issues.   &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt;   responses: &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Email Id:&lt;/strong&gt; This error occurs when the provided email ID for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication for updating the email.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid ABHA Number:&lt;/strong&gt; This error occurs when the provided ABHA number for linking or delinking is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid LoginId:&lt;/strong&gt; This error occurs when the login ID provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Mobile Number:&lt;/strong&gt; This error occurs when the provided mobile number for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request was understood, but the server is refusing to fulfill it due to lack of proper authorization. &lt;p&gt;&lt;strong&gt;Types of Authorization Errors:&lt;/strong&gt;&lt;/p&gt; responses: &lt;ol&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an ABHA account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sendOtpUpdateEmailCall(String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendOtpUpdateEmailRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/request/otp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendOtpUpdateEmailValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling sendOtpUpdateEmail(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling sendOtpUpdateEmail(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling sendOtpUpdateEmail(Async)");
        }

        return sendOtpUpdateEmailCall(xToken, REQUEST_ID, TIMESTAMP, sendOtpUpdateEmailRequest, _callback);

    }

    /**
     * Send Otp
     * API is used to send a One-Time Password (OTP) to the mobile number associated with the currently logged-in user’s account. This ensures that the user can securely update their profile information by verifying their identity through the OTP. &lt;br&gt;&lt;br&gt;**Example of OTP Request**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAR OTP:** When the user wants to update their profile using their Aadhaar number, an OTP is sent to the mobile number registered with their Aadhaar. For this, pass loginHint as \&quot;abha-number\&quot;&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** When the user wants to update their profile using their ABHA number, an OTP is sent to the mobile number registered with their ABHA. For this, pass loginHint as \&quot;abha-number\&quot;.&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Email OTP:** When the user wants to update their profile using their email, an OTP is sent to the provided email address. For this, pass loginHint as \&quot;email\&quot;.. &lt;br&gt; &lt;br&gt;Example4:&lt;br&gt; **Mobile OTP:** When the user wants to update their profile using their mobile number, an OTP is sent to the provided mobile number. For this, pass loginHint as \&quot;mobile-number\&quot;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param sendOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhar-verify&lt;/code&gt;, &lt;code&gt;abha-address-profile&lt;/code&gt;,&lt;code&gt;email-verify&lt;/code&gt;,etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;,&lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/encrypted mobile-number/encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @return OtpRequestMobile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful sending of an Aadhaar OTP for linking, delinking, or updating a mobile number.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of OTP Verification Scenarios:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP sending for linking or delinking an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP sending for updating the mobile number associated with an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for updating the mobile number is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. This can occur due to various reasons related to invalid inputs or authentication issues.   &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt;   responses: &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Email Id:&lt;/strong&gt; This error occurs when the provided email ID for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication for updating the email.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid ABHA Number:&lt;/strong&gt; This error occurs when the provided ABHA number for linking or delinking is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid LoginId:&lt;/strong&gt; This error occurs when the login ID provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Mobile Number:&lt;/strong&gt; This error occurs when the provided mobile number for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request was understood, but the server is refusing to fulfill it due to lack of proper authorization. &lt;p&gt;&lt;strong&gt;Types of Authorization Errors:&lt;/strong&gt;&lt;/p&gt; responses: &lt;ol&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an ABHA account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public OtpRequestMobile200Response sendOtpUpdateEmail(String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest) throws ApiException {
        ApiResponse<OtpRequestMobile200Response> localVarResp = sendOtpUpdateEmailWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP, sendOtpUpdateEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Send Otp
     * API is used to send a One-Time Password (OTP) to the mobile number associated with the currently logged-in user’s account. This ensures that the user can securely update their profile information by verifying their identity through the OTP. &lt;br&gt;&lt;br&gt;**Example of OTP Request**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAR OTP:** When the user wants to update their profile using their Aadhaar number, an OTP is sent to the mobile number registered with their Aadhaar. For this, pass loginHint as \&quot;abha-number\&quot;&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** When the user wants to update their profile using their ABHA number, an OTP is sent to the mobile number registered with their ABHA. For this, pass loginHint as \&quot;abha-number\&quot;.&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Email OTP:** When the user wants to update their profile using their email, an OTP is sent to the provided email address. For this, pass loginHint as \&quot;email\&quot;.. &lt;br&gt; &lt;br&gt;Example4:&lt;br&gt; **Mobile OTP:** When the user wants to update their profile using their mobile number, an OTP is sent to the provided mobile number. For this, pass loginHint as \&quot;mobile-number\&quot;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param sendOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhar-verify&lt;/code&gt;, &lt;code&gt;abha-address-profile&lt;/code&gt;,&lt;code&gt;email-verify&lt;/code&gt;,etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;,&lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/encrypted mobile-number/encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @return ApiResponse&lt;OtpRequestMobile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful sending of an Aadhaar OTP for linking, delinking, or updating a mobile number.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of OTP Verification Scenarios:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP sending for linking or delinking an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP sending for updating the mobile number associated with an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for updating the mobile number is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. This can occur due to various reasons related to invalid inputs or authentication issues.   &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt;   responses: &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Email Id:&lt;/strong&gt; This error occurs when the provided email ID for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication for updating the email.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid ABHA Number:&lt;/strong&gt; This error occurs when the provided ABHA number for linking or delinking is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid LoginId:&lt;/strong&gt; This error occurs when the login ID provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Mobile Number:&lt;/strong&gt; This error occurs when the provided mobile number for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request was understood, but the server is refusing to fulfill it due to lack of proper authorization. &lt;p&gt;&lt;strong&gt;Types of Authorization Errors:&lt;/strong&gt;&lt;/p&gt; responses: &lt;ol&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an ABHA account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<OtpRequestMobile200Response> sendOtpUpdateEmailWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendOtpUpdateEmailValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, sendOtpUpdateEmailRequest, null);
        Type localVarReturnType = new TypeToken<OtpRequestMobile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Otp (asynchronously)
     * API is used to send a One-Time Password (OTP) to the mobile number associated with the currently logged-in user’s account. This ensures that the user can securely update their profile information by verifying their identity through the OTP. &lt;br&gt;&lt;br&gt;**Example of OTP Request**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAR OTP:** When the user wants to update their profile using their Aadhaar number, an OTP is sent to the mobile number registered with their Aadhaar. For this, pass loginHint as \&quot;abha-number\&quot;&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** When the user wants to update their profile using their ABHA number, an OTP is sent to the mobile number registered with their ABHA. For this, pass loginHint as \&quot;abha-number\&quot;.&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Email OTP:** When the user wants to update their profile using their email, an OTP is sent to the provided email address. For this, pass loginHint as \&quot;email\&quot;.. &lt;br&gt; &lt;br&gt;Example4:&lt;br&gt; **Mobile OTP:** When the user wants to update their profile using their mobile number, an OTP is sent to the provided mobile number. For this, pass loginHint as \&quot;mobile-number\&quot;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param sendOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhar-verify&lt;/code&gt;, &lt;code&gt;abha-address-profile&lt;/code&gt;,&lt;code&gt;email-verify&lt;/code&gt;,etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;,&lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/encrypted mobile-number/encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful sending of an Aadhaar OTP for linking, delinking, or updating a mobile number.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of OTP Verification Scenarios:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP sending for linking or delinking an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP sending for updating the mobile number associated with an Aadhaar account.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Update Mobile - Invalid Request:&lt;/strong&gt; This error occurs when the request for sending an OTP for updating the mobile number is invalid.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. This can occur due to various reasons related to invalid inputs or authentication issues.   &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt;   responses: &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Email Id:&lt;/strong&gt; This error occurs when the provided email ID for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the email is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication for updating the email.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid ABHA Number:&lt;/strong&gt; This error occurs when the provided ABHA number for linking or delinking is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid LoginId:&lt;/strong&gt; This error occurs when the login ID provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for linking or delinking Aadhaar is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Mobile Number:&lt;/strong&gt; This error occurs when the provided mobile number for updating is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid OTP System:&lt;/strong&gt; This error occurs when the OTP system for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Login Hint:&lt;/strong&gt; This error occurs when the login hint provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Send OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request was understood, but the server is refusing to fulfill it due to lack of proper authorization. &lt;p&gt;&lt;strong&gt;Types of Authorization Errors:&lt;/strong&gt;&lt;/p&gt; responses: &lt;ol&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an Aadhaar account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;      &lt;p&gt;&lt;strong&gt;Send ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when the request for sending an OTP for linking or delinking an ABHA account lacks the required X token.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call sendOtpUpdateEmailAsync(String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest, final ApiCallback<OtpRequestMobile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendOtpUpdateEmailValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, sendOtpUpdateEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<OtpRequestMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<OtpRequestMobile200Response> sendOtpUpdateEmailAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest) throws ApiException {
        FutureApiCallBack<OtpRequestMobile200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = sendOtpUpdateEmailValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, sendOtpUpdateEmailRequest, callback);
        Type localVarReturnType = new TypeToken<OtpRequestMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendOtpUpdateEmailValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling sendOtpUpdateEmail(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling sendOtpUpdateEmail(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling sendOtpUpdateEmail(Async)"); }
        return sendOtpUpdateEmailCall(token, xToken, REQUEST_ID, TIMESTAMP, sendOtpUpdateEmailRequest, _callback);
    }

    public okhttp3.Call sendOtpUpdateEmailCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, SendOtpUpdateEmailRequest sendOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = sendOtpUpdateEmailRequest; String localVarPath = "/abha/api/v3/phr/app/login/profile/update/email/send-otp";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>(); Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        final String[] localVarContentTypes = { "application/json" }; final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes); if (localVarContentType != null) { localVarHeaderParams.put("Content-Type", localVarContentType); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (xToken != null) { localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" }; return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for switchProfile
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful switching of user profiles. This includes operations such as changing from one user profile to another, ensuring that the request has been processed correctly and the profile switch has been completed as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the switch profile request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call switchProfileCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/switch-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call switchProfileValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling switchProfile(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling switchProfile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling switchProfile(Async)");
        }

        return switchProfileCall(xToken, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * Switch Profile
     * API endpoint is used to switch the profile for a given ABHA (Ayushman Bharat Health Account) address using the provided JWT token. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Flexibility:&lt;/strong&gt; Allows users to switch between different profiles associated with their ABHA address, providing flexibility in managing multiple health accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Access:&lt;/strong&gt; Enables seamless access to different profiles without the need to log out and log back in, enhancing user experience.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient Management:&lt;/strong&gt; Facilitates efficient management of health records by allowing users to quickly switch profiles and access the necessary information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure access to different profiles through the use of JWT tokens, maintaining the integrity and confidentiality of health data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt; Aligns with health data management policies by providing a standardized method for profile switching, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return SwitchProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful switching of user profiles. This includes operations such as changing from one user profile to another, ensuring that the request has been processed correctly and the profile switch has been completed as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the switch profile request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public SwitchProfile200Response switchProfile(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        ApiResponse<SwitchProfile200Response> localVarResp = switchProfileWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP);
        return localVarResp.getData();
    }

    /**
     * Switch Profile
     * API endpoint is used to switch the profile for a given ABHA (Ayushman Bharat Health Account) address using the provided JWT token. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Flexibility:&lt;/strong&gt; Allows users to switch between different profiles associated with their ABHA address, providing flexibility in managing multiple health accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Access:&lt;/strong&gt; Enables seamless access to different profiles without the need to log out and log back in, enhancing user experience.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient Management:&lt;/strong&gt; Facilitates efficient management of health records by allowing users to quickly switch profiles and access the necessary information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure access to different profiles through the use of JWT tokens, maintaining the integrity and confidentiality of health data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt; Aligns with health data management policies by providing a standardized method for profile switching, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;SwitchProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful switching of user profiles. This includes operations such as changing from one user profile to another, ensuring that the request has been processed correctly and the profile switch has been completed as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the switch profile request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<SwitchProfile200Response> switchProfileWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = switchProfileValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, null);
        Type localVarReturnType = new TypeToken<SwitchProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Switch Profile (asynchronously)
     * API endpoint is used to switch the profile for a given ABHA (Ayushman Bharat Health Account) address using the provided JWT token. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Flexibility:&lt;/strong&gt; Allows users to switch between different profiles associated with their ABHA address, providing flexibility in managing multiple health accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Access:&lt;/strong&gt; Enables seamless access to different profiles without the need to log out and log back in, enhancing user experience.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient Management:&lt;/strong&gt; Facilitates efficient management of health records by allowing users to quickly switch profiles and access the necessary information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; Ensures secure access to different profiles through the use of JWT tokens, maintaining the integrity and confidentiality of health data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt; Aligns with health data management policies by providing a standardized method for profile switching, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful switching of user profiles. This includes operations such as changing from one user profile to another, ensuring that the request has been processed correctly and the profile switch has been completed as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no X token provided for the switch profile request, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call switchProfileAsync(String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback<SwitchProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = switchProfileValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, _callback);
        Type localVarReturnType = new TypeToken<SwitchProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<SwitchProfile200Response> switchProfileAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<SwitchProfile200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = switchProfileValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, callback);
        Type localVarReturnType = new TypeToken<SwitchProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call switchProfileValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling switchProfile(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling switchProfile(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling switchProfile(Async)"); }
        return switchProfileCall(token, xToken, REQUEST_ID, TIMESTAMP, _callback);
    }

    public okhttp3.Call switchProfileCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = null; String localVarPath = "/abha/api/v3/phr/app/login/profile/switch";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>(); Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (xToken != null) { localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" }; return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for updateProfile
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param updateProfileRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;div&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;address (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s residential address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;street number 5&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;email (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s email address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;johndoe@example.com&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gender (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s gender.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;middleName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s middle name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;mobile (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s mobile number.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;XXXXXX1234&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pinCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The postal code of the user’s address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;422003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;profilePhoto (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The URL or identifier for the user’s profile photo.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code means the request to “Update Profile” was successful. This means the profile information was updated as requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the profile update process. &lt;p&gt;&lt;strong&gt;Types of Profile Update Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid First Name&lt;/strong&gt;: The first name provided is not valid. This could be due to the use of special characters, numbers, or exceeding the character limit.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid Day/Month/Year of Birth&lt;/strong&gt;: The date of birth provided is incorrect. This could be due to an invalid date format, a non-existent date, or a date that does not meet the age requirements.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Blank District and State&lt;/strong&gt;: The district and state fields are empty. These fields are required and must be filled out to proceed with the profile update.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Update Profile” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the profile update was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Update Profile” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the profile update was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileCall(String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfileRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/updateProfile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling updateProfile(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling updateProfile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling updateProfile(Async)");
        }

        return updateProfileCall(xToken, REQUEST_ID, TIMESTAMP, updateProfileRequest, _callback);

    }

    /**
     * Update Profile
     * This API endpoint updates the user profile of the currently logged-in user with the information provided in the request body. It allows users to modify their personal details, ensuring their profile information is accurate and up-to-date. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management:&lt;/strong&gt; Enables users to update their personal information such as address, contact details, and other profile attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Accuracy:&lt;/strong&gt; Ensures that the user’s profile information is current and accurate, which is essential for personalized services and communication..&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; Provides users with the ability to manage and update their own profile information, enhancing user autonomy and satisfaction..&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt; Helps in maintaining compliance with data protection regulations by allowing users to keep their information up-to-date.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param updateProfileRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;div&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;address (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s residential address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;street number 5&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;email (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s email address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;johndoe@example.com&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gender (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s gender.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;middleName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s middle name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;mobile (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s mobile number.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;XXXXXX1234&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pinCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The postal code of the user’s address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;422003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;profilePhoto (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The URL or identifier for the user’s profile photo.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; (optional)
     * @return UpdateProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code means the request to “Update Profile” was successful. This means the profile information was updated as requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the profile update process. &lt;p&gt;&lt;strong&gt;Types of Profile Update Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid First Name&lt;/strong&gt;: The first name provided is not valid. This could be due to the use of special characters, numbers, or exceeding the character limit.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid Day/Month/Year of Birth&lt;/strong&gt;: The date of birth provided is incorrect. This could be due to an invalid date format, a non-existent date, or a date that does not meet the age requirements.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Blank District and State&lt;/strong&gt;: The district and state fields are empty. These fields are required and must be filled out to proceed with the profile update.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Update Profile” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the profile update was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Update Profile” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the profile update was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public UpdateProfile200Response updateProfile(String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest) throws ApiException {
        ApiResponse<UpdateProfile200Response> localVarResp = updateProfileWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP, updateProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Update Profile
     * This API endpoint updates the user profile of the currently logged-in user with the information provided in the request body. It allows users to modify their personal details, ensuring their profile information is accurate and up-to-date. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management:&lt;/strong&gt; Enables users to update their personal information such as address, contact details, and other profile attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Accuracy:&lt;/strong&gt; Ensures that the user’s profile information is current and accurate, which is essential for personalized services and communication..&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; Provides users with the ability to manage and update their own profile information, enhancing user autonomy and satisfaction..&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt; Helps in maintaining compliance with data protection regulations by allowing users to keep their information up-to-date.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param updateProfileRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;div&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;address (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s residential address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;street number 5&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;email (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s email address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;johndoe@example.com&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gender (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s gender.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;middleName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s middle name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;mobile (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s mobile number.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;XXXXXX1234&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pinCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The postal code of the user’s address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;422003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;profilePhoto (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The URL or identifier for the user’s profile photo.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; (optional)
     * @return ApiResponse&lt;UpdateProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code means the request to “Update Profile” was successful. This means the profile information was updated as requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the profile update process. &lt;p&gt;&lt;strong&gt;Types of Profile Update Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid First Name&lt;/strong&gt;: The first name provided is not valid. This could be due to the use of special characters, numbers, or exceeding the character limit.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid Day/Month/Year of Birth&lt;/strong&gt;: The date of birth provided is incorrect. This could be due to an invalid date format, a non-existent date, or a date that does not meet the age requirements.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Blank District and State&lt;/strong&gt;: The district and state fields are empty. These fields are required and must be filled out to proceed with the profile update.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Update Profile” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the profile update was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Update Profile” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the profile update was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateProfile200Response> updateProfileWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, updateProfileRequest, null);
        Type localVarReturnType = new TypeToken<UpdateProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Profile (asynchronously)
     * This API endpoint updates the user profile of the currently logged-in user with the information provided in the request body. It allows users to modify their personal details, ensuring their profile information is accurate and up-to-date. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management:&lt;/strong&gt; Enables users to update their personal information such as address, contact details, and other profile attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Accuracy:&lt;/strong&gt; Ensures that the user’s profile information is current and accurate, which is essential for personalized services and communication..&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; Provides users with the ability to manage and update their own profile information, enhancing user autonomy and satisfaction..&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt; Helps in maintaining compliance with data protection regulations by allowing users to keep their information up-to-date.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param updateProfileRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;div&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;address (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s residential address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;street number 5&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;districtName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s district.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;email (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s email address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;johndoe@example.com&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;gender (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s gender.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;middleName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s middle name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;mobile (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s mobile number.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;XXXXXX1234&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pinCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The postal code of the user’s address.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;422003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;profilePhoto (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The URL or identifier for the user’s profile photo.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateCode (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The code of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stateName (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The name of the user’s state.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code means the request to “Update Profile” was successful. This means the profile information was updated as requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the profile update process. &lt;p&gt;&lt;strong&gt;Types of Profile Update Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid First Name&lt;/strong&gt;: The first name provided is not valid. This could be due to the use of special characters, numbers, or exceeding the character limit.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Invalid Day/Month/Year of Birth&lt;/strong&gt;: The date of birth provided is incorrect. This could be due to an invalid date format, a non-existent date, or a date that does not meet the age requirements.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Update Profile - Blank District and State&lt;/strong&gt;: The district and state fields are empty. These fields are required and must be filled out to proceed with the profile update.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates that the request to “Update Profile” failed due to lack of authentication. This means the necessary credentials were not provided or were invalid, so the profile update was not authorized and did not proceed. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates that the request to “Update Profile” was forbidden due to a missing or invalid X token. This means the necessary authorization token was not provided, so the profile update was not allowed to proceed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileAsync(String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest, final ApiCallback<UpdateProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, updateProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<UpdateProfile200Response> updateProfileAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest) throws ApiException {
        FutureApiCallBack<UpdateProfile200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, updateProfileRequest, callback);
        Type localVarReturnType = new TypeToken<UpdateProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling updateProfile(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling updateProfile(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling updateProfile(Async)"); }
        return updateProfileCall(token, xToken, REQUEST_ID, TIMESTAMP, updateProfileRequest, _callback);
    }

    public okhttp3.Call updateProfileCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, UpdateProfileRequest updateProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = updateProfileRequest; String localVarPath = "/abha/api/v3/phr/app/login/profile/update";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>(); Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        final String[] localVarContentTypes = { "application/json" }; final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes); if (localVarContentType != null) { localVarHeaderParams.put("Content-Type", localVarContentType); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (xToken != null) { localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" }; return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for verifyOtpUpdateEmail
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods (required):&lt;/strong&gt; Specifies the methods used for authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp (required):&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue (required):&lt;/strong&gt; The encrypted OTP value. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; mobile-verify, email-verify, abha-login, aadhaar-verify, etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of authentication methods for various services. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA (Ayushman Bharat Health Account).&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP verification for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the email address are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA (Ayushman Bharat Health Account) is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;18\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;19\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the mobile number are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;20\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call verifyOtpUpdateEmailCall(String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyOtpUpdateEmailRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xToken != null) {
            localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyOtpUpdateEmailValidateBeforeCall(String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xToken' is set
        if (xToken == null) {
            throw new ApiException("Missing the required parameter 'xToken' when calling verifyOtpUpdateEmail(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling verifyOtpUpdateEmail(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling verifyOtpUpdateEmail(Async)");
        }

        return verifyOtpUpdateEmailCall(xToken, REQUEST_ID, TIMESTAMP, verifyOtpUpdateEmailRequest, _callback);

    }

    /**
     * Verify Otp
     * API endpoint is used to verify the user’s identity using the provided verification information. This ensures that the user can securely update their profile information by confirming their identity through the OTP. &lt;br&gt;&lt;br&gt;**Example of OTP Verification**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP Verification:**  When the user wants to verify their identity using an OTP sent to their Aadhaar number, the provided OTP is validated. For this, pass scope as [\&quot;abha-login\&quot;, \&quot;aadhaar-verify\&quot;].&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP Verification:** When the user wants to verify their identity using an OTP sent to their ABHA number, the provided OTP is validated. For this, pass scope as [\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;].&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Email OTP Verification:**When the user wants to verify their identity using an OTP sent to their email, the provided OTP is validated. For this, pass scope as [\&quot;email-verify\&quot;]. &lt;br&gt; &lt;br&gt;Example4:&lt;br&gt; **Mobile OTP Verification:** When the user wants to verify their identity using an OTP sent to their mobile number, the provided OTP is validated. For this, pass scope as [\&quot;mobile-verify\&quot;].&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods (required):&lt;/strong&gt; Specifies the methods used for authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp (required):&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue (required):&lt;/strong&gt; The encrypted OTP value. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; mobile-verify, email-verify, abha-login, aadhaar-verify, etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return VerifyOtpUpdateEmail200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of authentication methods for various services. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA (Ayushman Bharat Health Account).&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP verification for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the email address are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA (Ayushman Bharat Health Account) is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;18\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;19\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the mobile number are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;20\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public VerifyOtpUpdateEmail200Response verifyOtpUpdateEmail(String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest) throws ApiException {
        ApiResponse<VerifyOtpUpdateEmail200Response> localVarResp = verifyOtpUpdateEmailWithHttpInfo(xToken, REQUEST_ID, TIMESTAMP, verifyOtpUpdateEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Verify Otp
     * API endpoint is used to verify the user’s identity using the provided verification information. This ensures that the user can securely update their profile information by confirming their identity through the OTP. &lt;br&gt;&lt;br&gt;**Example of OTP Verification**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP Verification:**  When the user wants to verify their identity using an OTP sent to their Aadhaar number, the provided OTP is validated. For this, pass scope as [\&quot;abha-login\&quot;, \&quot;aadhaar-verify\&quot;].&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP Verification:** When the user wants to verify their identity using an OTP sent to their ABHA number, the provided OTP is validated. For this, pass scope as [\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;].&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Email OTP Verification:**When the user wants to verify their identity using an OTP sent to their email, the provided OTP is validated. For this, pass scope as [\&quot;email-verify\&quot;]. &lt;br&gt; &lt;br&gt;Example4:&lt;br&gt; **Mobile OTP Verification:** When the user wants to verify their identity using an OTP sent to their mobile number, the provided OTP is validated. For this, pass scope as [\&quot;mobile-verify\&quot;].&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods (required):&lt;/strong&gt; Specifies the methods used for authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp (required):&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue (required):&lt;/strong&gt; The encrypted OTP value. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; mobile-verify, email-verify, abha-login, aadhaar-verify, etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return ApiResponse&lt;VerifyOtpUpdateEmail200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of authentication methods for various services. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA (Ayushman Bharat Health Account).&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP verification for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the email address are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA (Ayushman Bharat Health Account) is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;18\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;19\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the mobile number are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;20\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VerifyOtpUpdateEmail200Response> verifyOtpUpdateEmailWithHttpInfo(String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyOtpUpdateEmailValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, verifyOtpUpdateEmailRequest, null);
        Type localVarReturnType = new TypeToken<VerifyOtpUpdateEmail200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Otp (asynchronously)
     * API endpoint is used to verify the user’s identity using the provided verification information. This ensures that the user can securely update their profile information by confirming their identity through the OTP. &lt;br&gt;&lt;br&gt;**Example of OTP Verification**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP Verification:**  When the user wants to verify their identity using an OTP sent to their Aadhaar number, the provided OTP is validated. For this, pass scope as [\&quot;abha-login\&quot;, \&quot;aadhaar-verify\&quot;].&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP Verification:** When the user wants to verify their identity using an OTP sent to their ABHA number, the provided OTP is validated. For this, pass scope as [\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;].&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Email OTP Verification:**When the user wants to verify their identity using an OTP sent to their email, the provided OTP is validated. For this, pass scope as [\&quot;email-verify\&quot;]. &lt;br&gt; &lt;br&gt;Example4:&lt;br&gt; **Mobile OTP Verification:** When the user wants to verify their identity using an OTP sent to their mobile number, the provided OTP is validated. For this, pass scope as [\&quot;mobile-verify\&quot;].&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param xToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyOtpUpdateEmailRequest Below is the Request Body description&lt;br&gt;&lt;br&gt; &lt;b&gt; Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods (required):&lt;/strong&gt; Specifies the methods used for authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp (required):&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue (required):&lt;/strong&gt; The encrypted OTP value. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; mobile-verify, email-verify, abha-login, aadhaar-verify, etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful retrieval of authentication methods for various services. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA (Ayushman Bharat Health Account).&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink:&lt;/strong&gt; This indicates a successful OTP verification for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile:&lt;/strong&gt; This indicates a successful OTP verification for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the email address are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the email address is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA (Ayushman Bharat Health Account) is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an ABHA are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an ABHA is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid OTP Value:&lt;/strong&gt; This error occurs when the OTP value provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;16\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for linking or delinking an AADHAAR account are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;17\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for linking or delinking an AADHAAR account is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;18\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;19\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods provided for updating the mobile number are invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;20\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - Invalid Scope:&lt;/strong&gt; This error occurs when the scope provided for updating the mobile number is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates unauthorized access. In this context, it refers to the lack of authentication required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Email - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the email address.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify OTP - Update Mobile - No Auth:&lt;/strong&gt; This error occurs when there is no authentication provided for updating the mobile number.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  * x-token -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. &lt;p&gt;&lt;strong&gt;Types of OTP Verification Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify AADHAAR OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an AADHAAR account.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify ABHA OTP - Link-DeLink - No X Token:&lt;/strong&gt; This error occurs when there is no X token provided for linking or delinking an ABHA.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call verifyOtpUpdateEmailAsync(String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest, final ApiCallback<VerifyOtpUpdateEmail200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyOtpUpdateEmailValidateBeforeCall(xToken, REQUEST_ID, TIMESTAMP, verifyOtpUpdateEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifyOtpUpdateEmail200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<VerifyOtpUpdateEmail200Response> verifyOtpUpdateEmailAsyncCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest) throws ApiException {
        FutureApiCallBack<VerifyOtpUpdateEmail200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = verifyOtpUpdateEmailValidateBeforeCall(token, xToken, REQUEST_ID, TIMESTAMP, verifyOtpUpdateEmailRequest, callback);
        Type localVarReturnType = new TypeToken<VerifyOtpUpdateEmail200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyOtpUpdateEmailValidateBeforeCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        if (xToken == null) { throw new ApiException("Missing the required parameter 'xToken' when calling verifyOtpUpdateEmail(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling verifyOtpUpdateEmail(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling verifyOtpUpdateEmail(Async)"); }
        return verifyOtpUpdateEmailCall(token, xToken, REQUEST_ID, TIMESTAMP, verifyOtpUpdateEmailRequest, _callback);
    }

    public okhttp3.Call verifyOtpUpdateEmailCall(String token, String xToken, String REQUEST_ID, String TIMESTAMP, VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = verifyOtpUpdateEmailRequest; String localVarPath = "/abha/api/v3/phr/app/login/profile/update/email/verify-otp";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>(); Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        final String[] localVarContentTypes = { "application/json" }; final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes); if (localVarContentType != null) { localVarHeaderParams.put("Content-Type", localVarContentType); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (xToken != null) { localVarHeaderParams.put("X-token", localVarApiClient.parameterToString(xToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" }; return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for verifyUserSwitchProfile
     * @param tToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyUserRequest &lt;b&gt;Request Body description :- &lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The ABHA address of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;john.doe@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of a user switch profile operation. This includes confirming that the request to switch user profiles has been processed correctly and the profile switch has been verified as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the verification of a user switch profile operation due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of Verify User Switch Profile Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid ABHA Address:&lt;/strong&gt; This error occurs when the ABHA (Ayushman Bharat Health Account) address provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no T token provided for verifying the user switch profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserSwitchProfileCall(String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyUserRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/login/profile/verify/switch-profile/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (tToken != null) {
            localVarHeaderParams.put("T-token", localVarApiClient.parameterToString(tToken));
        }


        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserSwitchProfileValidateBeforeCall(String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tToken' is set
        if (tToken == null) {
            throw new ApiException("Missing the required parameter 'tToken' when calling verifyUserSwitchProfile(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling verifyUserSwitchProfile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling verifyUserSwitchProfile(Async)");
        }

        return verifyUserSwitchProfileCall(tToken, REQUEST_ID, TIMESTAMP, verifyUserRequest, _callback);

    }

    /**
     * Verify User Switch Profile
     * API endpoint is used to verify and switch the profile for a given mobile login request using the provided JWT token. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Verification:&lt;/strong&gt; Ensures that the user is authenticated and authorized to switch profiles, enhancing security.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management:&lt;/strong&gt; Allows users to manage and switch between different profiles associated with their ABHA address, providing flexibility in handling multiple health accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Access:&lt;/strong&gt; Enables users to switch profiles without the need to log out and log back in, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient Record Access:&lt;/strong&gt; Facilitates quick access to the necessary health records by allowing users to switch profiles efficiently.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt;  Aligns with health data management policies by providing a standardized method for profile verification and switching, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param tToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyUserRequest &lt;b&gt;Request Body description :- &lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The ABHA address of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;john.doe@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return OtpVerifyMobile200ResponseTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of a user switch profile operation. This includes confirming that the request to switch user profiles has been processed correctly and the profile switch has been verified as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the verification of a user switch profile operation due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of Verify User Switch Profile Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid ABHA Address:&lt;/strong&gt; This error occurs when the ABHA (Ayushman Bharat Health Account) address provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no T token provided for verifying the user switch profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public OtpVerifyMobile200ResponseTokens verifyUserSwitchProfile(String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest) throws ApiException {
        ApiResponse<OtpVerifyMobile200ResponseTokens> localVarResp = verifyUserSwitchProfileWithHttpInfo(tToken, REQUEST_ID, TIMESTAMP, verifyUserRequest);
        return localVarResp.getData();
    }

    /**
     * Verify User Switch Profile
     * API endpoint is used to verify and switch the profile for a given mobile login request using the provided JWT token. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Verification:&lt;/strong&gt; Ensures that the user is authenticated and authorized to switch profiles, enhancing security.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management:&lt;/strong&gt; Allows users to manage and switch between different profiles associated with their ABHA address, providing flexibility in handling multiple health accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Access:&lt;/strong&gt; Enables users to switch profiles without the need to log out and log back in, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient Record Access:&lt;/strong&gt; Facilitates quick access to the necessary health records by allowing users to switch profiles efficiently.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt;  Aligns with health data management policies by providing a standardized method for profile verification and switching, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param tToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyUserRequest &lt;b&gt;Request Body description :- &lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The ABHA address of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;john.doe@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return ApiResponse&lt;OtpVerifyMobile200ResponseTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of a user switch profile operation. This includes confirming that the request to switch user profiles has been processed correctly and the profile switch has been verified as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the verification of a user switch profile operation due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of Verify User Switch Profile Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid ABHA Address:&lt;/strong&gt; This error occurs when the ABHA (Ayushman Bharat Health Account) address provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no T token provided for verifying the user switch profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<OtpVerifyMobile200ResponseTokens> verifyUserSwitchProfileWithHttpInfo(String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyUserSwitchProfileValidateBeforeCall(tToken, REQUEST_ID, TIMESTAMP, verifyUserRequest, null);
        Type localVarReturnType = new TypeToken<OtpVerifyMobile200ResponseTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify User Switch Profile (asynchronously)
     * API endpoint is used to verify and switch the profile for a given mobile login request using the provided JWT token. This functionality is essential for the following reasons. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Verification:&lt;/strong&gt; Ensures that the user is authenticated and authorized to switch profiles, enhancing security.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profile Management:&lt;/strong&gt; Allows users to manage and switch between different profiles associated with their ABHA address, providing flexibility in handling multiple health accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Seamless Access:&lt;/strong&gt; Enables users to switch profiles without the need to log out and log back in, improving the overall user experience.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient Record Access:&lt;/strong&gt; Facilitates quick access to the necessary health records by allowing users to switch profiles efficiently.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compliance:&lt;/strong&gt;  Aligns with health data management policies by providing a standardized method for profile verification and switching, promoting interoperability and standardization in the healthcare ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param tToken  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param verifyUserRequest &lt;b&gt;Request Body description :- &lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The ABHA address of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;john.doe@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId (required):&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of a user switch profile operation. This includes confirming that the request to switch user profiles has been processed correctly and the profile switch has been verified as intended. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the verification of a user switch profile operation due to invalid inputs or parameters. &lt;p&gt;&lt;strong&gt;Types of Verify User Switch Profile Errors:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid ABHA Address:&lt;/strong&gt; This error occurs when the ABHA (Ayushman Bharat Health Account) address provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;     &lt;p&gt;&lt;strong&gt;Verify User Switch Profile - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for verifying the user switch profile is invalid.&lt;/p&gt;   &lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 403 </td><td> The 403 response code indicates forbidden access. In this context, it refers to the lack of necessary permissions or tokens required to perform the requested operation. Specifically, this error occurs when there is no T token provided for verifying the user switch profile, preventing the operation from being completed. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserSwitchProfileAsync(String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest, final ApiCallback<OtpVerifyMobile200ResponseTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserSwitchProfileValidateBeforeCall(tToken, REQUEST_ID, TIMESTAMP, verifyUserRequest, _callback);
        Type localVarReturnType = new TypeToken<OtpVerifyMobile200ResponseTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<OtpVerifyMobile200ResponseTokens> verifyUserSwitchProfileAsyncCall(String token, String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest) throws ApiException {
        FutureApiCallBack<OtpVerifyMobile200ResponseTokens> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = verifyUserSwitchProfileValidateBeforeCall(token, tToken, REQUEST_ID, TIMESTAMP, verifyUserRequest, callback);
        Type localVarReturnType = new TypeToken<OtpVerifyMobile200ResponseTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserSwitchProfileValidateBeforeCall(String token, String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest, final ApiCallback _callback) throws ApiException {
        if (tToken == null) { throw new ApiException("Missing the required parameter 'tToken' when calling verifyUserSwitchProfile(Async)"); }
        if (REQUEST_ID == null) { throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling verifyUserSwitchProfile(Async)"); }
        if (TIMESTAMP == null) { throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling verifyUserSwitchProfile(Async)"); }
        return verifyUserSwitchProfileCall(token, tToken, REQUEST_ID, TIMESTAMP, verifyUserRequest, _callback);
    }

    public okhttp3.Call verifyUserSwitchProfileCall(String token, String tToken, String REQUEST_ID, String TIMESTAMP, VerifyUserRequest verifyUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null; String[] localBasePaths = new String[] {  };
        if (localCustomBaseUrl != null){ basePath = localCustomBaseUrl; } else if ( localBasePaths.length > 0 ) { basePath = localBasePaths[localHostIndex]; } else { basePath = null; }
        Object localVarPostBody = verifyUserRequest; String localVarPath = "/abha/api/v3/phr/app/login/profile/verify";
        List<Pair> localVarQueryParams = new ArrayList<Pair>(); List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>(); Map<String, String> localVarHeaderParams = new HashMap<String, String>(); Map<String, String> localVarCookieParams = new HashMap<String, String>(); Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = { "application/json", "text/plain" }; final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts); if (localVarAccept != null) { localVarHeaderParams.put("Accept", localVarAccept); }
        final String[] localVarContentTypes = { "application/json" }; final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes); if (localVarContentType != null) { localVarHeaderParams.put("Content-Type", localVarContentType); }
        if (token != null) { localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token)); }
        if (tToken != null) { localVarHeaderParams.put("tToken", localVarApiClient.parameterToString(tToken)); }
        if (REQUEST_ID != null) { localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID)); }
        if (TIMESTAMP != null) { localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP)); }
        String[] localVarAuthNames = new String[] { "bearerAuth" }; return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
}
