/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ValidateOtpRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ValidateOtpRequest {
  public static final String SERIALIZED_NAME_FACILITY_ID = "facilityId";
  @SerializedName(SERIALIZED_NAME_FACILITY_ID)
  @javax.annotation.Nullable
  private String facilityId;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  @javax.annotation.Nullable
  private String sourceId;

  public static final String SERIALIZED_NAME_OTP = "otp";
  @SerializedName(SERIALIZED_NAME_OTP)
  @javax.annotation.Nullable
  private String otp;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nullable
  private String source;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nullable
  private String transactionId;

  public ValidateOtpRequest() {
  }

  public ValidateOtpRequest facilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
    return this;
  }

  /**
   * Get facilityId
   * @return facilityId
   */
  @javax.annotation.Nullable
  public String getFacilityId() {
    return facilityId;
  }

  public void setFacilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
  }


  public ValidateOtpRequest sourceId(@javax.annotation.Nullable String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Get sourceId
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(@javax.annotation.Nullable String sourceId) {
    this.sourceId = sourceId;
  }


  public ValidateOtpRequest otp(@javax.annotation.Nullable String otp) {
    this.otp = otp;
    return this;
  }

  /**
   * Get otp
   * @return otp
   */
  @javax.annotation.Nullable
  public String getOtp() {
    return otp;
  }

  public void setOtp(@javax.annotation.Nullable String otp) {
    this.otp = otp;
  }


  public ValidateOtpRequest source(@javax.annotation.Nullable String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nullable String source) {
    this.source = source;
  }


  public ValidateOtpRequest transactionId(@javax.annotation.Nullable String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nullable String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateOtpRequest validateOtpRequest = (ValidateOtpRequest) o;
    return Objects.equals(this.facilityId, validateOtpRequest.facilityId) &&
        Objects.equals(this.sourceId, validateOtpRequest.sourceId) &&
        Objects.equals(this.otp, validateOtpRequest.otp) &&
        Objects.equals(this.source, validateOtpRequest.source) &&
        Objects.equals(this.transactionId, validateOtpRequest.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facilityId, sourceId, otp, source, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateOtpRequest {\n");
    sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    otp: ").append(toIndentedString(otp)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facilityId");
    openapiFields.add("sourceId");
    openapiFields.add("otp");
    openapiFields.add("source");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidateOtpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidateOtpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateOtpRequest is not found in the empty JSON string", ValidateOtpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidateOtpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateOtpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("facilityId") != null && !jsonObj.get("facilityId").isJsonNull()) && !jsonObj.get("facilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityId").toString()));
      }
      if ((jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) && !jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if ((jsonObj.get("otp") != null && !jsonObj.get("otp").isJsonNull()) && !jsonObj.get("otp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otp").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateOtpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateOtpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateOtpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateOtpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateOtpRequest>() {
           @Override
           public void write(JsonWriter out, ValidateOtpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateOtpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidateOtpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidateOtpRequest
   * @throws IOException if the JSON string is invalid with respect to ValidateOtpRequest
   */
  public static ValidateOtpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateOtpRequest.class);
  }

  /**
   * Convert an instance of ValidateOtpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

