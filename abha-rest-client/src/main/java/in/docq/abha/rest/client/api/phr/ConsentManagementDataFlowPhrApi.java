/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api.phr;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsentManagementDataFlowPhrApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConsentManagementDataFlowPhrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsentManagementDataFlowPhrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for abdmConsentManagement1
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement1Request1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement1Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement1Request1 abdmConsentManagement1Request1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmConsentManagement1Request1;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/request/{request-id}/approve"
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement1ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement1Request1 abdmConsentManagement1Request1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement1(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement1(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement1(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement1(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling abdmConsentManagement1(Async)");
        }

        // verify the required parameter 'abdmConsentManagement1Request1' is set
        if (abdmConsentManagement1Request1 == null) {
            throw new ApiException("Missing the required parameter 'abdmConsentManagement1Request1' when calling abdmConsentManagement1(Async)");
        }

        return abdmConsentManagement1Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement1Request1, _callback);

    }

    /**
     * This is ABDM HIE-CM API called by patients to approve the consent request raised by HIU from PHR/mobile application.
     * This API endpoint is used by the user to approve a consent request, specifying their preferred data access parameters. By invoking this API, the user grants permission for the Health Information User (HIU) to access their health data under the defined conditions. This approval process is essential for ensuring that patient data is shared securely and in accordance with the userâ€™s preferences, supporting a transparent and compliant health information exchange. The API facilitates the establishment of trust and adherence to privacy regulations, enabling ethical and efficient access to health information.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement1Request1  (required)
     * @return AbdmConsentManagement1202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement1202Response abdmConsentManagement1(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement1Request1 abdmConsentManagement1Request1) throws ApiException {
        ApiResponse<AbdmConsentManagement1202Response> localVarResp = abdmConsentManagement1WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement1Request1);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called by patients to approve the consent request raised by HIU from PHR/mobile application.
     * This API endpoint is used by the user to approve a consent request, specifying their preferred data access parameters. By invoking this API, the user grants permission for the Health Information User (HIU) to access their health data under the defined conditions. This approval process is essential for ensuring that patient data is shared securely and in accordance with the userâ€™s preferences, supporting a transparent and compliant health information exchange. The API facilitates the establishment of trust and adherence to privacy regulations, enabling ethical and efficient access to health information.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement1Request1  (required)
     * @return ApiResponse&lt;AbdmConsentManagement1202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement1202Response> abdmConsentManagement1WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement1Request1 abdmConsentManagement1Request1) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement1ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement1Request1, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement1202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called by patients to approve the consent request raised by HIU from PHR/mobile application. (asynchronously)
     * This API endpoint is used by the user to approve a consent request, specifying their preferred data access parameters. By invoking this API, the user grants permission for the Health Information User (HIU) to access their health data under the defined conditions. This approval process is essential for ensuring that patient data is shared securely and in accordance with the userâ€™s preferences, supporting a transparent and compliant health information exchange. The API facilitates the establishment of trust and adherence to privacy regulations, enabling ethical and efficient access to health information.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement1Request1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement1Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement1Request1 abdmConsentManagement1Request1, final ApiCallback<AbdmConsentManagement1202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement1ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement1Request1, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement1202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement12
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement12Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement12Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement12Request abdmConsentManagement12Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmConsentManagement12Request;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/auto/approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement12ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement12Request abdmConsentManagement12Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement12(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement12(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement12(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement12(Async)");
        }

        // verify the required parameter 'abdmConsentManagement12Request' is set
        if (abdmConsentManagement12Request == null) {
            throw new ApiException("Missing the required parameter 'abdmConsentManagement12Request' when calling abdmConsentManagement12(Async)");
        }

        return abdmConsentManagement12Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement12Request, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to setup an auto-approval policy for given HIU.
     * This API endpoint is used to set up an auto-approval policy for a specified Health Information User (HIU). By invoking this API, users can configure automatic approval of consent requests from the designated HIU, streamlining the process of granting access to health data. This functionality is essential for enhancing efficiency and reducing manual intervention in the consent management process. The API supports secure and compliant health information exchange, ensuring that auto-approval policies are implemented in accordance with user preferences and regulatory requirements.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement12Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void abdmConsentManagement12(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement12Request abdmConsentManagement12Request) throws ApiException {
        abdmConsentManagement12WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement12Request);
    }

    /**
     * This is ABDM HIE-CM API called to setup an auto-approval policy for given HIU.
     * This API endpoint is used to set up an auto-approval policy for a specified Health Information User (HIU). By invoking this API, users can configure automatic approval of consent requests from the designated HIU, streamlining the process of granting access to health data. This functionality is essential for enhancing efficiency and reducing manual intervention in the consent management process. The API supports secure and compliant health information exchange, ensuring that auto-approval policies are implemented in accordance with user preferences and regulatory requirements.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement12Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmConsentManagement12WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement12Request abdmConsentManagement12Request) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement12ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement12Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This is ABDM HIE-CM API called to setup an auto-approval policy for given HIU. (asynchronously)
     * This API endpoint is used to set up an auto-approval policy for a specified Health Information User (HIU). By invoking this API, users can configure automatic approval of consent requests from the designated HIU, streamlining the process of granting access to health data. This functionality is essential for enhancing efficiency and reducing manual intervention in the consent management process. The API supports secure and compliant health information exchange, ensuring that auto-approval policies are implemented in accordance with user preferences and regulatory requirements.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement12Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement12Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement12Request abdmConsentManagement12Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement12ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement12Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement13
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement13Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/auto/approve/{auto-approval-id}/disable"
            .replace("{" + "auto-approval-id" + "}", localVarApiClient.escapeString(autoApprovalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement13ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement13(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement13(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement13(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement13(Async)");
        }

        // verify the required parameter 'autoApprovalId' is set
        if (autoApprovalId == null) {
            throw new ApiException("Missing the required parameter 'autoApprovalId' when calling abdmConsentManagement13(Async)");
        }

        return abdmConsentManagement13Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to disable the auto-approval policy.
     * This API endpoint is used to disable an existing auto-approval policy. By invoking this API, users can deactivate the automatic approval of consent requests for the specified Health Information User (HIU). This functionality is essential for maintaining control over consent management, allowing users to modify or revoke auto-approval settings as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @return AbdmConsentManagement13202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement13202Response abdmConsentManagement13(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId) throws ApiException {
        ApiResponse<AbdmConsentManagement13202Response> localVarResp = abdmConsentManagement13WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to disable the auto-approval policy.
     * This API endpoint is used to disable an existing auto-approval policy. By invoking this API, users can deactivate the automatic approval of consent requests for the specified Health Information User (HIU). This functionality is essential for maintaining control over consent management, allowing users to modify or revoke auto-approval settings as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @return ApiResponse&lt;AbdmConsentManagement13202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement13202Response> abdmConsentManagement13WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement13ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement13202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to disable the auto-approval policy. (asynchronously)
     * This API endpoint is used to disable an existing auto-approval policy. By invoking this API, users can deactivate the automatic approval of consent requests for the specified Health Information User (HIU). This functionality is essential for maintaining control over consent management, allowing users to modify or revoke auto-approval settings as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement13Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId, final ApiCallback<AbdmConsentManagement13202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement13ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement13202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement14
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement14Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/auto/approve/{auto-approval-id}/enable"
            .replace("{" + "auto-approval-id" + "}", localVarApiClient.escapeString(autoApprovalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement14ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement14(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement14(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement14(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement14(Async)");
        }

        // verify the required parameter 'autoApprovalId' is set
        if (autoApprovalId == null) {
            throw new ApiException("Missing the required parameter 'autoApprovalId' when calling abdmConsentManagement14(Async)");
        }

        return abdmConsentManagement14Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to enable the auto-approval policy.
     * This API endpoint is used to enable an existing auto-approval policy. By invoking this API, users can activate the automatic approval of consent requests for the specified Health Information User (HIU). This functionality is essential for streamlining the consent management process, allowing consent requests to be automatically approved without manual intervention. The API supports secure and compliant health information exchange, ensuring that auto-approval policies are implemented in accordance with user preferences and regulatory requirements.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @return AbdmConsentManagement14202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement14202Response abdmConsentManagement14(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId) throws ApiException {
        ApiResponse<AbdmConsentManagement14202Response> localVarResp = abdmConsentManagement14WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to enable the auto-approval policy.
     * This API endpoint is used to enable an existing auto-approval policy. By invoking this API, users can activate the automatic approval of consent requests for the specified Health Information User (HIU). This functionality is essential for streamlining the consent management process, allowing consent requests to be automatically approved without manual intervention. The API supports secure and compliant health information exchange, ensuring that auto-approval policies are implemented in accordance with user preferences and regulatory requirements.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @return ApiResponse&lt;AbdmConsentManagement14202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement14202Response> abdmConsentManagement14WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement14ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement14202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to enable the auto-approval policy. (asynchronously)
     * This API endpoint is used to enable an existing auto-approval policy. By invoking this API, users can activate the automatic approval of consent requests for the specified Health Information User (HIU). This functionality is essential for streamlining the consent management process, allowing consent requests to be automatically approved without manual intervention. The API supports secure and compliant health information exchange, ensuring that auto-approval policies are implemented in accordance with user preferences and regulatory requirements.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param autoApprovalId The auto approval id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement14Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String autoApprovalId, final ApiCallback<AbdmConsentManagement14202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement14ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, autoApprovalId, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement14202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement2
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement2Request1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement2Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement2Request1 abdmConsentManagement2Request1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmConsentManagement2Request1;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/request/{request-id}/deny"
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement2ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement2Request1 abdmConsentManagement2Request1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement2(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement2(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement2(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement2(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling abdmConsentManagement2(Async)");
        }

        // verify the required parameter 'abdmConsentManagement2Request1' is set
        if (abdmConsentManagement2Request1 == null) {
            throw new ApiException("Missing the required parameter 'abdmConsentManagement2Request1' when calling abdmConsentManagement2(Async)");
        }

        return abdmConsentManagement2Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement2Request1, _callback);

    }

    /**
     * This is ABDM HIE-CM API called by patients to deny the consent request raised by HIU from PHR/mobile application.
     * This API endpoint is used to deny a consent request from the Personal Health Record (PHR) or mobile application. By invoking this API, users can reject a consent request, preventing the Health Information User (HIU) from accessing their health data. This functionality is essential for maintaining user control over their health information, ensuring that consents are managed according to the userâ€™s preferences. The API supports secure and compliant health information exchange, enabling users to deny consent requests as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement2Request1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void abdmConsentManagement2(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement2Request1 abdmConsentManagement2Request1) throws ApiException {
        abdmConsentManagement2WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement2Request1);
    }

    /**
     * This is ABDM HIE-CM API called by patients to deny the consent request raised by HIU from PHR/mobile application.
     * This API endpoint is used to deny a consent request from the Personal Health Record (PHR) or mobile application. By invoking this API, users can reject a consent request, preventing the Health Information User (HIU) from accessing their health data. This functionality is essential for maintaining user control over their health information, ensuring that consents are managed according to the userâ€™s preferences. The API supports secure and compliant health information exchange, enabling users to deny consent requests as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement2Request1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmConsentManagement2WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement2Request1 abdmConsentManagement2Request1) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement2ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement2Request1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This is ABDM HIE-CM API called by patients to deny the consent request raised by HIU from PHR/mobile application. (asynchronously)
     * This API endpoint is used to deny a consent request from the Personal Health Record (PHR) or mobile application. By invoking this API, users can reject a consent request, preventing the Health Information User (HIU) from accessing their health data. This functionality is essential for maintaining user control over their health information, ensuring that consents are managed according to the userâ€™s preferences. The API supports secure and compliant health information exchange, enabling users to deny consent requests as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param abdmConsentManagement2Request1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement2Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, AbdmConsentManagement2Request1 abdmConsentManagement2Request1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement2ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, abdmConsentManagement2Request1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement3
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement3Request3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement3Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement3Request3 abdmConsentManagement3Request3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmConsentManagement3Request3;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement3ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement3Request3 abdmConsentManagement3Request3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement3(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement3(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement3(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement3(Async)");
        }

        // verify the required parameter 'abdmConsentManagement3Request3' is set
        if (abdmConsentManagement3Request3 == null) {
            throw new ApiException("Missing the required parameter 'abdmConsentManagement3Request3' when calling abdmConsentManagement3(Async)");
        }

        return abdmConsentManagement3Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement3Request3, _callback);

    }

    /**
     * This is ABDM HIE-CM API called by patients to revoke the granted consent from PHR/mobile application.
     * This API endpoint is used to revoke a previously approved consent from the Personal Health Record (PHR) or mobile application. By invoking this API, users can withdraw their consent, thereby terminating the permissions granted to access their health data. This functionality is essential for maintaining user control over their health information, ensuring that consents can be managed dynamically and in accordance with the userâ€™s preferences. The API supports secure and compliant health information exchange, enabling users to revoke consent as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement3Request3  (required)
     * @return AbdmConsentManagement3202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement3202Response abdmConsentManagement3(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement3Request3 abdmConsentManagement3Request3) throws ApiException {
        ApiResponse<AbdmConsentManagement3202Response> localVarResp = abdmConsentManagement3WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement3Request3);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called by patients to revoke the granted consent from PHR/mobile application.
     * This API endpoint is used to revoke a previously approved consent from the Personal Health Record (PHR) or mobile application. By invoking this API, users can withdraw their consent, thereby terminating the permissions granted to access their health data. This functionality is essential for maintaining user control over their health information, ensuring that consents can be managed dynamically and in accordance with the userâ€™s preferences. The API supports secure and compliant health information exchange, enabling users to revoke consent as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement3Request3  (required)
     * @return ApiResponse&lt;AbdmConsentManagement3202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement3202Response> abdmConsentManagement3WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement3Request3 abdmConsentManagement3Request3) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement3ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement3Request3, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement3202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called by patients to revoke the granted consent from PHR/mobile application. (asynchronously)
     * This API endpoint is used to revoke a previously approved consent from the Personal Health Record (PHR) or mobile application. By invoking this API, users can withdraw their consent, thereby terminating the permissions granted to access their health data. This functionality is essential for maintaining user control over their health information, ensuring that consents can be managed dynamically and in accordance with the userâ€™s preferences. The API supports secure and compliant health information exchange, enabling users to revoke consent as needed.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmConsentManagement3Request3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement3Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, AbdmConsentManagement3Request3 abdmConsentManagement3Request3, final ApiCallback<AbdmConsentManagement3202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement3ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, abdmConsentManagement3Request3, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement3202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement4
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement4Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/request/{request-id}"
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement4ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement4(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement4(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement4(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement4(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling abdmConsentManagement4(Async)");
        }

        return abdmConsentManagement4Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to get the consent request details by request id.
     * This API endpoint is used to retrieve the details of a consent request using the request ID. By invoking this API, users can obtain comprehensive information about a specific consent request, including its status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent requests, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @return AbdmConsentManagement4200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement4200Response abdmConsentManagement4(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId) throws ApiException {
        ApiResponse<AbdmConsentManagement4200Response> localVarResp = abdmConsentManagement4WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to get the consent request details by request id.
     * This API endpoint is used to retrieve the details of a consent request using the request ID. By invoking this API, users can obtain comprehensive information about a specific consent request, including its status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent requests, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @return ApiResponse&lt;AbdmConsentManagement4200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement4200Response> abdmConsentManagement4WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement4ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement4200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to get the consent request details by request id. (asynchronously)
     * This API endpoint is used to retrieve the details of a consent request using the request ID. By invoking this API, users can obtain comprehensive information about a specific consent request, including its status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent requests, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId The consent request id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement4Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, final ApiCallback<AbdmConsentManagement4200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement4ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement4200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement5
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement5Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement5ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement5(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement5(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement5(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement5(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling abdmConsentManagement5(Async)");
        }

        return abdmConsentManagement5Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent request details of a patient.
     *  This API endpoint is used to fetch all consent request details for a patient. By invoking this API, users can retrieve a comprehensive list of all consent requests associated with a patientâ€™s health information. This functionality is essential for maintaining transparency and ensuring that users have access to complete and up-to-date consent information. The API supports efficient tracking and management of consent requests, facilitating secure and compliant health information exchange within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @return AbdmConsentManagement5200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement5200Response abdmConsentManagement5(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status) throws ApiException {
        ApiResponse<AbdmConsentManagement5200Response> localVarResp = abdmConsentManagement5WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent request details of a patient.
     *  This API endpoint is used to fetch all consent request details for a patient. By invoking this API, users can retrieve a comprehensive list of all consent requests associated with a patientâ€™s health information. This functionality is essential for maintaining transparency and ensuring that users have access to complete and up-to-date consent information. The API supports efficient tracking and management of consent requests, facilitating secure and compliant health information exchange within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @return ApiResponse&lt;AbdmConsentManagement5200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement5200Response> abdmConsentManagement5WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement5ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement5200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent request details of a patient. (asynchronously)
     *  This API endpoint is used to fetch all consent request details for a patient. By invoking this API, users can retrieve a comprehensive list of all consent requests associated with a patientâ€™s health information. This functionality is essential for maintaining transparency and ensuring that users have access to complete and up-to-date consent information. The API supports efficient tracking and management of consent requests, facilitating secure and compliant health information exchange within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement5Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status, final ApiCallback<AbdmConsentManagement5200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement5ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement5200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement6
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param artefactId Consent artefact id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement6Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String artefactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/artefact/{artefact-id}"
            .replace("{" + "artefact-id" + "}", localVarApiClient.escapeString(artefactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement6ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String artefactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement6(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement6(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement6(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement6(Async)");
        }

        // verify the required parameter 'artefactId' is set
        if (artefactId == null) {
            throw new ApiException("Missing the required parameter 'artefactId' when calling abdmConsentManagement6(Async)");
        }

        return abdmConsentManagement6Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, artefactId, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to fetch the consent artefact details associated with the artefact-id.
     * This API endpoint is used to fetch the details of a consent artefact associated with a specific artefact ID. By invoking this API, users can retrieve comprehensive information about the consent artefact, including its status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent artefact information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent artefacts, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param artefactId Consent artefact id (required)
     * @return AbdmConsentManagement6200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement6200Response abdmConsentManagement6(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String artefactId) throws ApiException {
        ApiResponse<AbdmConsentManagement6200Response> localVarResp = abdmConsentManagement6WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, artefactId);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to fetch the consent artefact details associated with the artefact-id.
     * This API endpoint is used to fetch the details of a consent artefact associated with a specific artefact ID. By invoking this API, users can retrieve comprehensive information about the consent artefact, including its status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent artefact information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent artefacts, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param artefactId Consent artefact id (required)
     * @return ApiResponse&lt;AbdmConsentManagement6200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement6200Response> abdmConsentManagement6WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String artefactId) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement6ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, artefactId, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement6200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to fetch the consent artefact details associated with the artefact-id. (asynchronously)
     * This API endpoint is used to fetch the details of a consent artefact associated with a specific artefact ID. By invoking this API, users can retrieve comprehensive information about the consent artefact, including its status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent artefact information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent artefacts, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param artefactId Consent artefact id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement6Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String artefactId, final ApiCallback<AbdmConsentManagement6200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement6ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, artefactId, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement6200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement7
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId Consent request id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement7Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/artefact/request/{request-id}"
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement7ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement7(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement7(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement7(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement7(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling abdmConsentManagement7(Async)");
        }

        return abdmConsentManagement7Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent artefact details associated with a consent request request-id.
     * This API endpoint is used to fetch all consent artefact details associated with a specific consent request ID. By invoking this API, users can retrieve comprehensive information about all consent artefacts linked to the given request ID, including their status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent artefact information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent artefacts, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId Consent request id (required)
     * @return List&lt;AbdmConsentManagement7200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public List<AbdmConsentManagement7200ResponseInner> abdmConsentManagement7(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId) throws ApiException {
        ApiResponse<List<AbdmConsentManagement7200ResponseInner>> localVarResp = abdmConsentManagement7WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent artefact details associated with a consent request request-id.
     * This API endpoint is used to fetch all consent artefact details associated with a specific consent request ID. By invoking this API, users can retrieve comprehensive information about all consent artefacts linked to the given request ID, including their status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent artefact information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent artefacts, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId Consent request id (required)
     * @return ApiResponse&lt;List&lt;AbdmConsentManagement7200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AbdmConsentManagement7200ResponseInner>> abdmConsentManagement7WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement7ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, null);
        Type localVarReturnType = new TypeToken<List<AbdmConsentManagement7200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent artefact details associated with a consent request request-id. (asynchronously)
     * This API endpoint is used to fetch all consent artefact details associated with a specific consent request ID. By invoking this API, users can retrieve comprehensive information about all consent artefacts linked to the given request ID, including their status, scope, and any associated conditions. This functionality is essential for ensuring that users have access to accurate and up-to-date consent artefact information, supporting secure and compliant health information exchange. The API facilitates efficient management and verification of consent artefacts, enhancing the overall integrity of the consent management process.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param requestId Consent request id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement7Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String requestId, final ApiCallback<List<AbdmConsentManagement7200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement7ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, requestId, _callback);
        Type localVarReturnType = new TypeToken<List<AbdmConsentManagement7200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmConsentManagement8
     * @param REQUEST_ID Unique UUID for tracking the end-to-end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds, and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement8Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/consent/v3/artefact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmConsentManagement8ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmConsentManagement8(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmConsentManagement8(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmConsentManagement8(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmConsentManagement8(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling abdmConsentManagement8(Async)");
        }

        return abdmConsentManagement8Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status, _callback);

    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent artefact details of a patient.
     * This API endpoint is used to fetch all consent artefact details for a patient. By invoking this API, users can retrieve comprehensive information about all consent artefacts associated with the patientâ€™s health information. This functionality is essential for maintaining transparency and ensuring that users have access to complete and up-to-date consent artefact information. The API supports efficient tracking and management of consent artefacts, facilitating secure and compliant health information exchange within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for tracking the end-to-end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds, and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @return AbdmConsentManagement8200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public AbdmConsentManagement8200Response abdmConsentManagement8(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status) throws ApiException {
        ApiResponse<AbdmConsentManagement8200Response> localVarResp = abdmConsentManagement8WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent artefact details of a patient.
     * This API endpoint is used to fetch all consent artefact details for a patient. By invoking this API, users can retrieve comprehensive information about all consent artefacts associated with the patientâ€™s health information. This functionality is essential for maintaining transparency and ensuring that users have access to complete and up-to-date consent artefact information. The API supports efficient tracking and management of consent artefacts, facilitating secure and compliant health information exchange within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for tracking the end-to-end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds, and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @return ApiResponse&lt;AbdmConsentManagement8200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmConsentManagement8200Response> abdmConsentManagement8WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status) throws ApiException {
        okhttp3.Call localVarCall = abdmConsentManagement8ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement8200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is ABDM HIE-CM API called to fetch all the consent artefact details of a patient. (asynchronously)
     * This API endpoint is used to fetch all consent artefact details for a patient. By invoking this API, users can retrieve comprehensive information about all consent artefacts associated with the patientâ€™s health information. This functionality is essential for maintaining transparency and ensuring that users have access to complete and up-to-date consent artefact information. The API supports efficient tracking and management of consent artefacts, facilitating secure and compliant health information exchange within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for tracking the end-to-end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds, and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The number of items to be returned at a time (required)
     * @param offset The number of items to be skipped before starting to collect data (optional)
     * @param status Status of the consent (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmConsentManagement8Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, Integer limit, Integer offset, String status, final ApiCallback<AbdmConsentManagement8200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmConsentManagement8ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<AbdmConsentManagement8200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
