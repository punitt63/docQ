/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SearchFacilitiesRequestFacility
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class SearchFacilitiesRequestFacility {
  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  @javax.annotation.Nullable
  private String district;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "facilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  @javax.annotation.Nullable
  private String facilityName;

  public static final String SERIALIZED_NAME_FACILITY_TYPE = "facilityType";
  @SerializedName(SERIALIZED_NAME_FACILITY_TYPE)
  @javax.annotation.Nullable
  private String facilityType;

  public static final String SERIALIZED_NAME_OWNERSHIP = "ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  @javax.annotation.Nullable
  private String ownership;

  public static final String SERIALIZED_NAME_PHOTO = "photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  @javax.annotation.Nullable
  private String photo;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_SYSTEM_OF_MEDICINE = "systemOfMedicine";
  @SerializedName(SERIALIZED_NAME_SYSTEM_OF_MEDICINE)
  @javax.annotation.Nullable
  private String systemOfMedicine;

  public SearchFacilitiesRequestFacility() {
  }

  public SearchFacilitiesRequestFacility district(@javax.annotation.Nullable String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(@javax.annotation.Nullable String district) {
    this.district = district;
  }


  public SearchFacilitiesRequestFacility facilityName(@javax.annotation.Nullable String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * Get facilityName
   * @return facilityName
   */
  @javax.annotation.Nullable
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(@javax.annotation.Nullable String facilityName) {
    this.facilityName = facilityName;
  }


  public SearchFacilitiesRequestFacility facilityType(@javax.annotation.Nullable String facilityType) {
    this.facilityType = facilityType;
    return this;
  }

  /**
   * Get facilityType
   * @return facilityType
   */
  @javax.annotation.Nullable
  public String getFacilityType() {
    return facilityType;
  }

  public void setFacilityType(@javax.annotation.Nullable String facilityType) {
    this.facilityType = facilityType;
  }


  public SearchFacilitiesRequestFacility ownership(@javax.annotation.Nullable String ownership) {
    this.ownership = ownership;
    return this;
  }

  /**
   * Get ownership
   * @return ownership
   */
  @javax.annotation.Nullable
  public String getOwnership() {
    return ownership;
  }

  public void setOwnership(@javax.annotation.Nullable String ownership) {
    this.ownership = ownership;
  }


  public SearchFacilitiesRequestFacility photo(@javax.annotation.Nullable String photo) {
    this.photo = photo;
    return this;
  }

  /**
   * Get photo
   * @return photo
   */
  @javax.annotation.Nullable
  public String getPhoto() {
    return photo;
  }

  public void setPhoto(@javax.annotation.Nullable String photo) {
    this.photo = photo;
  }


  public SearchFacilitiesRequestFacility state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public SearchFacilitiesRequestFacility systemOfMedicine(@javax.annotation.Nullable String systemOfMedicine) {
    this.systemOfMedicine = systemOfMedicine;
    return this;
  }

  /**
   * Get systemOfMedicine
   * @return systemOfMedicine
   */
  @javax.annotation.Nullable
  public String getSystemOfMedicine() {
    return systemOfMedicine;
  }

  public void setSystemOfMedicine(@javax.annotation.Nullable String systemOfMedicine) {
    this.systemOfMedicine = systemOfMedicine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchFacilitiesRequestFacility searchFacilitiesRequestFacility = (SearchFacilitiesRequestFacility) o;
    return Objects.equals(this.district, searchFacilitiesRequestFacility.district) &&
        Objects.equals(this.facilityName, searchFacilitiesRequestFacility.facilityName) &&
        Objects.equals(this.facilityType, searchFacilitiesRequestFacility.facilityType) &&
        Objects.equals(this.ownership, searchFacilitiesRequestFacility.ownership) &&
        Objects.equals(this.photo, searchFacilitiesRequestFacility.photo) &&
        Objects.equals(this.state, searchFacilitiesRequestFacility.state) &&
        Objects.equals(this.systemOfMedicine, searchFacilitiesRequestFacility.systemOfMedicine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(district, facilityName, facilityType, ownership, photo, state, systemOfMedicine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchFacilitiesRequestFacility {\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    facilityType: ").append(toIndentedString(facilityType)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    systemOfMedicine: ").append(toIndentedString(systemOfMedicine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("district");
    openapiFields.add("facilityName");
    openapiFields.add("facilityType");
    openapiFields.add("ownership");
    openapiFields.add("photo");
    openapiFields.add("state");
    openapiFields.add("systemOfMedicine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchFacilitiesRequestFacility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchFacilitiesRequestFacility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchFacilitiesRequestFacility is not found in the empty JSON string", SearchFacilitiesRequestFacility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchFacilitiesRequestFacility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchFacilitiesRequestFacility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("facilityName") != null && !jsonObj.get("facilityName").isJsonNull()) && !jsonObj.get("facilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityName").toString()));
      }
      if ((jsonObj.get("facilityType") != null && !jsonObj.get("facilityType").isJsonNull()) && !jsonObj.get("facilityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityType").toString()));
      }
      if ((jsonObj.get("ownership") != null && !jsonObj.get("ownership").isJsonNull()) && !jsonObj.get("ownership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownership").toString()));
      }
      if ((jsonObj.get("photo") != null && !jsonObj.get("photo").isJsonNull()) && !jsonObj.get("photo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photo").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("systemOfMedicine") != null && !jsonObj.get("systemOfMedicine").isJsonNull()) && !jsonObj.get("systemOfMedicine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemOfMedicine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemOfMedicine").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchFacilitiesRequestFacility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchFacilitiesRequestFacility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchFacilitiesRequestFacility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchFacilitiesRequestFacility.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchFacilitiesRequestFacility>() {
           @Override
           public void write(JsonWriter out, SearchFacilitiesRequestFacility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchFacilitiesRequestFacility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchFacilitiesRequestFacility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchFacilitiesRequestFacility
   * @throws IOException if the JSON string is invalid with respect to SearchFacilitiesRequestFacility
   */
  public static SearchFacilitiesRequestFacility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchFacilitiesRequestFacility.class);
  }

  /**
   * Convert an instance of SearchFacilitiesRequestFacility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

