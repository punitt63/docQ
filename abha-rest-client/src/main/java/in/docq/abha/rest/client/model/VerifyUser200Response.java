/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * VerifyUser200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T18:02:09.764020+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class VerifyUser200Response {
  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  @javax.annotation.Nullable
  private BigDecimal expiresIn;

  public static final String SERIALIZED_NAME_REFRESH_EXPIRES_IN = "refreshExpiresIn";
  @SerializedName(SERIALIZED_NAME_REFRESH_EXPIRES_IN)
  @javax.annotation.Nullable
  private BigDecimal refreshExpiresIn;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refreshToken";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  @javax.annotation.Nullable
  private String refreshToken;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_SWITCH_PROFILE_ENABLED = "switchProfileEnabled";
  @SerializedName(SERIALIZED_NAME_SWITCH_PROFILE_ENABLED)
  @javax.annotation.Nullable
  private Boolean switchProfileEnabled;

  public VerifyUser200Response() {
  }

  public VerifyUser200Response expiresIn(@javax.annotation.Nullable BigDecimal expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public BigDecimal getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(@javax.annotation.Nullable BigDecimal expiresIn) {
    this.expiresIn = expiresIn;
  }


  public VerifyUser200Response refreshExpiresIn(@javax.annotation.Nullable BigDecimal refreshExpiresIn) {
    this.refreshExpiresIn = refreshExpiresIn;
    return this;
  }

  /**
   * Get refreshExpiresIn
   * @return refreshExpiresIn
   */
  @javax.annotation.Nullable
  public BigDecimal getRefreshExpiresIn() {
    return refreshExpiresIn;
  }

  public void setRefreshExpiresIn(@javax.annotation.Nullable BigDecimal refreshExpiresIn) {
    this.refreshExpiresIn = refreshExpiresIn;
  }


  public VerifyUser200Response refreshToken(@javax.annotation.Nullable String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * Get refreshToken
   * @return refreshToken
   */
  @javax.annotation.Nullable
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(@javax.annotation.Nullable String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public VerifyUser200Response token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }

  public VerifyUser200Response switchProfileEnabled(@javax.annotation.Nullable Boolean switchProfileEnabled) {
    this.switchProfileEnabled = switchProfileEnabled;
    return this;
  }

  /**
   * Get switchProfileEnabled
   * @return switchProfileEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSwitchProfileEnabled() {
    return switchProfileEnabled;
  }

  public void setSwitchProfileEnabled(@javax.annotation.Nullable Boolean switchProfileEnabled) {
    this.switchProfileEnabled = switchProfileEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyUser200Response verifyUser200Response = (VerifyUser200Response) o;
    return Objects.equals(this.expiresIn, verifyUser200Response.expiresIn) &&
        Objects.equals(this.refreshExpiresIn, verifyUser200Response.refreshExpiresIn) &&
        Objects.equals(this.refreshToken, verifyUser200Response.refreshToken) &&
        Objects.equals(this.token, verifyUser200Response.token) &&
        Objects.equals(this.switchProfileEnabled, verifyUser200Response.switchProfileEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresIn, refreshExpiresIn, refreshToken, token, switchProfileEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyUser200Response {\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    refreshExpiresIn: ").append(toIndentedString(refreshExpiresIn)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    switchProfileEnabled: ").append(toIndentedString(switchProfileEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiresIn");
    openapiFields.add("refreshExpiresIn");
    openapiFields.add("refreshToken");
    openapiFields.add("token");
    openapiFields.add("switchProfileEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyUser200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyUser200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyUser200Response is not found in the empty JSON string", VerifyUser200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyUser200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyUser200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refreshToken") != null && !jsonObj.get("refreshToken").isJsonNull()) && !jsonObj.get("refreshToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshToken").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyUser200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyUser200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyUser200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyUser200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyUser200Response>() {
           @Override
           public void write(JsonWriter out, VerifyUser200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyUser200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyUser200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyUser200Response
   * @throws IOException if the JSON string is invalid with respect to VerifyUser200Response
   */
  public static VerifyUser200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyUser200Response.class);
  }

  /**
   * Convert an instance of VerifyUser200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

