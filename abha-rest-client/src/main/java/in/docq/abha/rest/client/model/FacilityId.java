/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * FacilityId
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityId {
  public static final String SERIALIZED_NAME_FACILITY_ID = "facilityId";
  @SerializedName(SERIALIZED_NAME_FACILITY_ID)
  @javax.annotation.Nullable
  private String facilityId;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "facilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  @javax.annotation.Nullable
  private String facilityName;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contactName";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  @javax.annotation.Nullable
  private String contactName;

  public static final String SERIALIZED_NAME_CONTACT_MOBILE = "contactMobile";
  @SerializedName(SERIALIZED_NAME_CONTACT_MOBILE)
  @javax.annotation.Nullable
  private String contactMobile;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  @javax.annotation.Nullable
  private String contactEmail;

  public static final String SERIALIZED_NAME_HPRID = "hprid";
  @SerializedName(SERIALIZED_NAME_HPRID)
  @javax.annotation.Nullable
  private String hprid;

  public FacilityId() {
  }

  public FacilityId facilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
    return this;
  }

  /**
   * Get facilityId
   * @return facilityId
   */
  @javax.annotation.Nullable
  public String getFacilityId() {
    return facilityId;
  }

  public void setFacilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
  }


  public FacilityId facilityName(@javax.annotation.Nullable String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * Get facilityName
   * @return facilityName
   */
  @javax.annotation.Nullable
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(@javax.annotation.Nullable String facilityName) {
    this.facilityName = facilityName;
  }


  public FacilityId contactName(@javax.annotation.Nullable String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Get contactName
   * @return contactName
   */
  @javax.annotation.Nullable
  public String getContactName() {
    return contactName;
  }

  public void setContactName(@javax.annotation.Nullable String contactName) {
    this.contactName = contactName;
  }


  public FacilityId contactMobile(@javax.annotation.Nullable String contactMobile) {
    this.contactMobile = contactMobile;
    return this;
  }

  /**
   * Get contactMobile
   * @return contactMobile
   */
  @javax.annotation.Nullable
  public String getContactMobile() {
    return contactMobile;
  }

  public void setContactMobile(@javax.annotation.Nullable String contactMobile) {
    this.contactMobile = contactMobile;
  }


  public FacilityId contactEmail(@javax.annotation.Nullable String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Get contactEmail
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(@javax.annotation.Nullable String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public FacilityId hprid(@javax.annotation.Nullable String hprid) {
    this.hprid = hprid;
    return this;
  }

  /**
   * Get hprid
   * @return hprid
   */
  @javax.annotation.Nullable
  public String getHprid() {
    return hprid;
  }

  public void setHprid(@javax.annotation.Nullable String hprid) {
    this.hprid = hprid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityId facilityId = (FacilityId) o;
    return Objects.equals(this.facilityId, facilityId.facilityId) &&
        Objects.equals(this.facilityName, facilityId.facilityName) &&
        Objects.equals(this.contactName, facilityId.contactName) &&
        Objects.equals(this.contactMobile, facilityId.contactMobile) &&
        Objects.equals(this.contactEmail, facilityId.contactEmail) &&
        Objects.equals(this.hprid, facilityId.hprid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facilityId, facilityName, contactName, contactMobile, contactEmail, hprid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityId {\n");
    sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    contactMobile: ").append(toIndentedString(contactMobile)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    hprid: ").append(toIndentedString(hprid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facilityId");
    openapiFields.add("facilityName");
    openapiFields.add("contactName");
    openapiFields.add("contactMobile");
    openapiFields.add("contactEmail");
    openapiFields.add("hprid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityId
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityId is not found in the empty JSON string", FacilityId.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityId` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("facilityId") != null && !jsonObj.get("facilityId").isJsonNull()) && !jsonObj.get("facilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityId").toString()));
      }
      if ((jsonObj.get("facilityName") != null && !jsonObj.get("facilityName").isJsonNull()) && !jsonObj.get("facilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityName").toString()));
      }
      if ((jsonObj.get("contactName") != null && !jsonObj.get("contactName").isJsonNull()) && !jsonObj.get("contactName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactName").toString()));
      }
      if ((jsonObj.get("contactMobile") != null && !jsonObj.get("contactMobile").isJsonNull()) && !jsonObj.get("contactMobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactMobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactMobile").toString()));
      }
      if ((jsonObj.get("contactEmail") != null && !jsonObj.get("contactEmail").isJsonNull()) && !jsonObj.get("contactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmail").toString()));
      }
      if ((jsonObj.get("hprid") != null && !jsonObj.get("hprid").isJsonNull()) && !jsonObj.get("hprid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hprid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hprid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityId.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityId>() {
           @Override
           public void write(JsonWriter out, FacilityId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityId given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityId
   * @throws IOException if the JSON string is invalid with respect to FacilityId
   */
  public static FacilityId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityId.class);
  }

  /**
   * Convert an instance of FacilityId to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

