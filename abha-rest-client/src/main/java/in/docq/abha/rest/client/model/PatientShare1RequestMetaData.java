/*
 * HIE-CM Profile Share
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * PatientShare1RequestMetaData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T12:11:20.742865+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PatientShare1RequestMetaData {
  public static final String SERIALIZED_NAME_HIP_ID = "hipId";
  @SerializedName(SERIALIZED_NAME_HIP_ID)
  @javax.annotation.Nonnull
  private String hipId;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @javax.annotation.Nonnull
  private String context;

  public static final String SERIALIZED_NAME_HPR_ID = "hprId";
  @SerializedName(SERIALIZED_NAME_HPR_ID)
  @javax.annotation.Nullable
  private String hprId;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  @javax.annotation.Nullable
  private Float latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  @javax.annotation.Nullable
  private Float longitude;

  public PatientShare1RequestMetaData() {
  }

  public PatientShare1RequestMetaData hipId(@javax.annotation.Nonnull String hipId) {
    this.hipId = hipId;
    return this;
  }

  /**
   * The service ID of the health information provider. Allows alpha numeric character and special characters like [A-Z a-z 0-9]+[A-Z a-z 0-9 @//_//-]*[A-Z a-z 0-9]
   * @return hipId
   */
  @javax.annotation.Nonnull
  public String getHipId() {
    return hipId;
  }

  public void setHipId(@javax.annotation.Nonnull String hipId) {
    this.hipId = hipId;
  }


  public PatientShare1RequestMetaData context(@javax.annotation.Nonnull String context) {
    this.context = context;
    return this;
  }

  /**
   * This is a counter Id. Allows alpha numeric character and special characters like ^(?:[a-zA-Z0-9 ]|[a-zA-Z0-9 ][a-zA-Z0-9.\\\\-_ ]*[a-zA-Z0-9 ]){1,250}$
   * @return context
   */
  @javax.annotation.Nonnull
  public String getContext() {
    return context;
  }

  public void setContext(@javax.annotation.Nonnull String context) {
    this.context = context;
  }


  public PatientShare1RequestMetaData hprId(@javax.annotation.Nullable String hprId) {
    this.hprId = hprId;
    return this;
  }

  /**
   * Healthcare Professionals Registry id. Allows alpha numeric character and special characters like [a-zA-Z0-9][a-zA-Z0-9_.]+[a-zA-Z0-9]@(dr.abdm|hpr.abdm)$|^[1-9][0-9]{13}$
   * @return hprId
   */
  @javax.annotation.Nullable
  public String getHprId() {
    return hprId;
  }

  public void setHprId(@javax.annotation.Nullable String hprId) {
    this.hprId = hprId;
  }


  public PatientShare1RequestMetaData latitude(@javax.annotation.Nullable Float latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude of the location.Allows alpha numeric character and special characters like ^[0-9-.]+$
   * @return latitude
   */
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }

  public void setLatitude(@javax.annotation.Nullable Float latitude) {
    this.latitude = latitude;
  }


  public PatientShare1RequestMetaData longitude(@javax.annotation.Nullable Float longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude of the location.Allows alpha numeric character and special characters like ^[0-9-.]+$
   * @return longitude
   */
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }

  public void setLongitude(@javax.annotation.Nullable Float longitude) {
    this.longitude = longitude;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientShare1RequestMetaData patientShare1RequestMetaData = (PatientShare1RequestMetaData) o;
    return Objects.equals(this.hipId, patientShare1RequestMetaData.hipId) &&
        Objects.equals(this.context, patientShare1RequestMetaData.context) &&
        Objects.equals(this.hprId, patientShare1RequestMetaData.hprId) &&
        Objects.equals(this.latitude, patientShare1RequestMetaData.latitude) &&
        Objects.equals(this.longitude, patientShare1RequestMetaData.longitude);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hipId, context, hprId, latitude, longitude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientShare1RequestMetaData {\n");
    sb.append("    hipId: ").append(toIndentedString(hipId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    hprId: ").append(toIndentedString(hprId)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hipId");
    openapiFields.add("context");
    openapiFields.add("hprId");
    openapiFields.add("latitude");
    openapiFields.add("longitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hipId");
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientShare1RequestMetaData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientShare1RequestMetaData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientShare1RequestMetaData is not found in the empty JSON string", PatientShare1RequestMetaData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientShare1RequestMetaData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientShare1RequestMetaData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientShare1RequestMetaData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipId").toString()));
      }
      if (!jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("hprId") != null && !jsonObj.get("hprId").isJsonNull()) && !jsonObj.get("hprId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hprId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hprId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientShare1RequestMetaData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientShare1RequestMetaData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientShare1RequestMetaData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientShare1RequestMetaData.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientShare1RequestMetaData>() {
           @Override
           public void write(JsonWriter out, PatientShare1RequestMetaData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientShare1RequestMetaData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientShare1RequestMetaData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientShare1RequestMetaData
   * @throws IOException if the JSON string is invalid with respect to PatientShare1RequestMetaData
   */
  public static PatientShare1RequestMetaData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientShare1RequestMetaData.class);
  }

  /**
   * Convert an instance of PatientShare1RequestMetaData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

