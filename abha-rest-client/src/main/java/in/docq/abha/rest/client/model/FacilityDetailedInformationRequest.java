/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;;

import java.io.IOException;
import java.util.*;

/**
 * FacilityDetailedInformationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityDetailedInformationRequest {
  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  @javax.annotation.Nullable
  private String trackingId;

  public static final String SERIALIZED_NAME_SPECIALITIES = "specialities";
  @SerializedName(SERIALIZED_NAME_SPECIALITIES)
  @javax.annotation.Nullable
  private List<FacilitySpecialities> specialities = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDICAL_INFRASTRUCTURE = "medicalInfrastructure";
  @SerializedName(SERIALIZED_NAME_MEDICAL_INFRASTRUCTURE)
  @javax.annotation.Nullable
  private FacilityMedicalInfrastructure medicalInfrastructure;

  public static final String SERIALIZED_NAME_PHARMACY_DETAILS = "pharmacyDetails";
  @SerializedName(SERIALIZED_NAME_PHARMACY_DETAILS)
  @javax.annotation.Nullable
  private FacilityPharmacyDetails pharmacyDetails;

  public static final String SERIALIZED_NAME_BLOOD_BANK_DETAILS = "bloodBankDetails";
  @SerializedName(SERIALIZED_NAME_BLOOD_BANK_DETAILS)
  @javax.annotation.Nullable
  private FacilityBloodBankDetails bloodBankDetails;

  public static final String SERIALIZED_NAME_IMAGING_SERVICES = "imagingServices";
  @SerializedName(SERIALIZED_NAME_IMAGING_SERVICES)
  @javax.annotation.Nullable
  private List<FacilityImagingServices> imagingServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTIC_SERVICES = "diagnosticServices";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTIC_SERVICES)
  @javax.annotation.Nullable
  private List<String> diagnosticServices = new ArrayList<>();

  public FacilityDetailedInformationRequest() {
  }

  public FacilityDetailedInformationRequest trackingId(@javax.annotation.Nullable String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * Get trackingId
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(@javax.annotation.Nullable String trackingId) {
    this.trackingId = trackingId;
  }


  public FacilityDetailedInformationRequest specialities(@javax.annotation.Nullable List<FacilitySpecialities> specialities) {
    this.specialities = specialities;
    return this;
  }

  public FacilityDetailedInformationRequest addSpecialitiesItem(FacilitySpecialities specialitiesItem) {
    if (this.specialities == null) {
      this.specialities = new ArrayList<>();
    }
    this.specialities.add(specialitiesItem);
    return this;
  }

  /**
   * Get specialities
   * @return specialities
   */
  @javax.annotation.Nullable
  public List<FacilitySpecialities> getSpecialities() {
    return specialities;
  }

  public void setSpecialities(@javax.annotation.Nullable List<FacilitySpecialities> specialities) {
    this.specialities = specialities;
  }


  public FacilityDetailedInformationRequest medicalInfrastructure(@javax.annotation.Nullable FacilityMedicalInfrastructure medicalInfrastructure) {
    this.medicalInfrastructure = medicalInfrastructure;
    return this;
  }

  /**
   * Get medicalInfrastructure
   * @return medicalInfrastructure
   */
  @javax.annotation.Nullable
  public FacilityMedicalInfrastructure getMedicalInfrastructure() {
    return medicalInfrastructure;
  }

  public void setMedicalInfrastructure(@javax.annotation.Nullable FacilityMedicalInfrastructure medicalInfrastructure) {
    this.medicalInfrastructure = medicalInfrastructure;
  }


  public FacilityDetailedInformationRequest pharmacyDetails(@javax.annotation.Nullable FacilityPharmacyDetails pharmacyDetails) {
    this.pharmacyDetails = pharmacyDetails;
    return this;
  }

  /**
   * Get pharmacyDetails
   * @return pharmacyDetails
   */
  @javax.annotation.Nullable
  public FacilityPharmacyDetails getPharmacyDetails() {
    return pharmacyDetails;
  }

  public void setPharmacyDetails(@javax.annotation.Nullable FacilityPharmacyDetails pharmacyDetails) {
    this.pharmacyDetails = pharmacyDetails;
  }


  public FacilityDetailedInformationRequest bloodBankDetails(@javax.annotation.Nullable FacilityBloodBankDetails bloodBankDetails) {
    this.bloodBankDetails = bloodBankDetails;
    return this;
  }

  /**
   * Get bloodBankDetails
   * @return bloodBankDetails
   */
  @javax.annotation.Nullable
  public FacilityBloodBankDetails getBloodBankDetails() {
    return bloodBankDetails;
  }

  public void setBloodBankDetails(@javax.annotation.Nullable FacilityBloodBankDetails bloodBankDetails) {
    this.bloodBankDetails = bloodBankDetails;
  }


  public FacilityDetailedInformationRequest imagingServices(@javax.annotation.Nullable List<FacilityImagingServices> imagingServices) {
    this.imagingServices = imagingServices;
    return this;
  }

  public FacilityDetailedInformationRequest addImagingServicesItem(FacilityImagingServices imagingServicesItem) {
    if (this.imagingServices == null) {
      this.imagingServices = new ArrayList<>();
    }
    this.imagingServices.add(imagingServicesItem);
    return this;
  }

  /**
   * Get imagingServices
   * @return imagingServices
   */
  @javax.annotation.Nullable
  public List<FacilityImagingServices> getImagingServices() {
    return imagingServices;
  }

  public void setImagingServices(@javax.annotation.Nullable List<FacilityImagingServices> imagingServices) {
    this.imagingServices = imagingServices;
  }


  public FacilityDetailedInformationRequest diagnosticServices(@javax.annotation.Nullable List<String> diagnosticServices) {
    this.diagnosticServices = diagnosticServices;
    return this;
  }

  public FacilityDetailedInformationRequest addDiagnosticServicesItem(String diagnosticServicesItem) {
    if (this.diagnosticServices == null) {
      this.diagnosticServices = new ArrayList<>();
    }
    this.diagnosticServices.add(diagnosticServicesItem);
    return this;
  }

  /**
   * Get diagnosticServices
   * @return diagnosticServices
   */
  @javax.annotation.Nullable
  public List<String> getDiagnosticServices() {
    return diagnosticServices;
  }

  public void setDiagnosticServices(@javax.annotation.Nullable List<String> diagnosticServices) {
    this.diagnosticServices = diagnosticServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityDetailedInformationRequest facilityDetailedInformationRequest = (FacilityDetailedInformationRequest) o;
    return Objects.equals(this.trackingId, facilityDetailedInformationRequest.trackingId) &&
        Objects.equals(this.specialities, facilityDetailedInformationRequest.specialities) &&
        Objects.equals(this.medicalInfrastructure, facilityDetailedInformationRequest.medicalInfrastructure) &&
        Objects.equals(this.pharmacyDetails, facilityDetailedInformationRequest.pharmacyDetails) &&
        Objects.equals(this.bloodBankDetails, facilityDetailedInformationRequest.bloodBankDetails) &&
        Objects.equals(this.imagingServices, facilityDetailedInformationRequest.imagingServices) &&
        Objects.equals(this.diagnosticServices, facilityDetailedInformationRequest.diagnosticServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackingId, specialities, medicalInfrastructure, pharmacyDetails, bloodBankDetails, imagingServices, diagnosticServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityDetailedInformationRequest {\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    specialities: ").append(toIndentedString(specialities)).append("\n");
    sb.append("    medicalInfrastructure: ").append(toIndentedString(medicalInfrastructure)).append("\n");
    sb.append("    pharmacyDetails: ").append(toIndentedString(pharmacyDetails)).append("\n");
    sb.append("    bloodBankDetails: ").append(toIndentedString(bloodBankDetails)).append("\n");
    sb.append("    imagingServices: ").append(toIndentedString(imagingServices)).append("\n");
    sb.append("    diagnosticServices: ").append(toIndentedString(diagnosticServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trackingId");
    openapiFields.add("specialities");
    openapiFields.add("medicalInfrastructure");
    openapiFields.add("pharmacyDetails");
    openapiFields.add("bloodBankDetails");
    openapiFields.add("imagingServices");
    openapiFields.add("diagnosticServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityDetailedInformationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityDetailedInformationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityDetailedInformationRequest is not found in the empty JSON string", FacilityDetailedInformationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityDetailedInformationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityDetailedInformationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("trackingId") != null && !jsonObj.get("trackingId").isJsonNull()) && !jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
      if (jsonObj.get("specialities") != null && !jsonObj.get("specialities").isJsonNull()) {
        JsonArray jsonArrayspecialities = jsonObj.getAsJsonArray("specialities");
        if (jsonArrayspecialities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specialities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specialities` to be an array in the JSON string but got `%s`", jsonObj.get("specialities").toString()));
          }

          // validate the optional field `specialities` (array)
          for (int i = 0; i < jsonArrayspecialities.size(); i++) {
            FacilitySpecialities.validateJsonElement(jsonArrayspecialities.get(i));
          };
        }
      }
      // validate the optional field `medicalInfrastructure`
      if (jsonObj.get("medicalInfrastructure") != null && !jsonObj.get("medicalInfrastructure").isJsonNull()) {
        FacilityMedicalInfrastructure.validateJsonElement(jsonObj.get("medicalInfrastructure"));
      }
      // validate the optional field `pharmacyDetails`
      if (jsonObj.get("pharmacyDetails") != null && !jsonObj.get("pharmacyDetails").isJsonNull()) {
        FacilityPharmacyDetails.validateJsonElement(jsonObj.get("pharmacyDetails"));
      }
      // validate the optional field `bloodBankDetails`
      if (jsonObj.get("bloodBankDetails") != null && !jsonObj.get("bloodBankDetails").isJsonNull()) {
        FacilityBloodBankDetails.validateJsonElement(jsonObj.get("bloodBankDetails"));
      }
      if (jsonObj.get("imagingServices") != null && !jsonObj.get("imagingServices").isJsonNull()) {
        JsonArray jsonArrayimagingServices = jsonObj.getAsJsonArray("imagingServices");
        if (jsonArrayimagingServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imagingServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imagingServices` to be an array in the JSON string but got `%s`", jsonObj.get("imagingServices").toString()));
          }

          // validate the optional field `imagingServices` (array)
          for (int i = 0; i < jsonArrayimagingServices.size(); i++) {
            FacilityImagingServices.validateJsonElement(jsonArrayimagingServices.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("diagnosticServices") != null && !jsonObj.get("diagnosticServices").isJsonNull() && !jsonObj.get("diagnosticServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `diagnosticServices` to be an array in the JSON string but got `%s`", jsonObj.get("diagnosticServices").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityDetailedInformationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityDetailedInformationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityDetailedInformationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityDetailedInformationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityDetailedInformationRequest>() {
           @Override
           public void write(JsonWriter out, FacilityDetailedInformationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityDetailedInformationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityDetailedInformationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityDetailedInformationRequest
   * @throws IOException if the JSON string is invalid with respect to FacilityDetailedInformationRequest
   */
  public static FacilityDetailedInformationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityDetailedInformationRequest.class);
  }

  /**
   * Convert an instance of FacilityDetailedInformationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

