/*
 * User Initiated Linking Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * In the request body, either ‘link’ or ‘error’ must be included.&lt;br&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;link is mandatory and error should be null&lt;/li&gt; &lt;li&gt;error is mandatory and patient should be null&lt;/li&gt;&lt;li&gt;response is mandatory object in both the cases&lt;/li&gt;&lt;/ol&gt; 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T17:25:36.087359+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmUserInitiatedLinking4Request {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nullable
  private UUID transactionId;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  @javax.annotation.Nonnull
  private AbdmUserInitiatedLinking4RequestLink link;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private AbdmUserInitiatedLinking4RequestError error;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  @javax.annotation.Nonnull
  private AbdmUserInitiatedLinking4RequestResponse response;

  public AbdmUserInitiatedLinking4Request() {
  }

  public AbdmUserInitiatedLinking4Request transactionId(@javax.annotation.Nullable UUID transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * UUID from discover request callback to track the entire user link flow.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public UUID getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nullable UUID transactionId) {
    this.transactionId = transactionId;
  }


  public AbdmUserInitiatedLinking4Request link(@javax.annotation.Nonnull AbdmUserInitiatedLinking4RequestLink link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nonnull
  public AbdmUserInitiatedLinking4RequestLink getLink() {
    return link;
  }

  public void setLink(@javax.annotation.Nonnull AbdmUserInitiatedLinking4RequestLink link) {
    this.link = link;
  }


  public AbdmUserInitiatedLinking4Request error(@javax.annotation.Nullable AbdmUserInitiatedLinking4RequestError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public AbdmUserInitiatedLinking4RequestError getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable AbdmUserInitiatedLinking4RequestError error) {
    this.error = error;
  }


  public AbdmUserInitiatedLinking4Request response(@javax.annotation.Nonnull AbdmUserInitiatedLinking4RequestResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public AbdmUserInitiatedLinking4RequestResponse getResponse() {
    return response;
  }

  public void setResponse(@javax.annotation.Nonnull AbdmUserInitiatedLinking4RequestResponse response) {
    this.response = response;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmUserInitiatedLinking4Request abdmUserInitiatedLinking4Request = (AbdmUserInitiatedLinking4Request) o;
    return Objects.equals(this.transactionId, abdmUserInitiatedLinking4Request.transactionId) &&
        Objects.equals(this.link, abdmUserInitiatedLinking4Request.link) &&
        Objects.equals(this.error, abdmUserInitiatedLinking4Request.error) &&
        Objects.equals(this.response, abdmUserInitiatedLinking4Request.response);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, link, error, response);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmUserInitiatedLinking4Request {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("link");
    openapiFields.add("error");
    openapiFields.add("response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("response");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmUserInitiatedLinking4Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmUserInitiatedLinking4Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmUserInitiatedLinking4Request is not found in the empty JSON string", AbdmUserInitiatedLinking4Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmUserInitiatedLinking4Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmUserInitiatedLinking4Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmUserInitiatedLinking4Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      // validate the required field `link`
      AbdmUserInitiatedLinking4RequestLink.validateJsonElement(jsonObj.get("link"));
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        AbdmUserInitiatedLinking4RequestError.validateJsonElement(jsonObj.get("error"));
      }
      // validate the required field `response`
      AbdmUserInitiatedLinking4RequestResponse.validateJsonElement(jsonObj.get("response"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmUserInitiatedLinking4Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmUserInitiatedLinking4Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmUserInitiatedLinking4Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmUserInitiatedLinking4Request.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmUserInitiatedLinking4Request>() {
           @Override
           public void write(JsonWriter out, AbdmUserInitiatedLinking4Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmUserInitiatedLinking4Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmUserInitiatedLinking4Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmUserInitiatedLinking4Request
   * @throws IOException if the JSON string is invalid with respect to AbdmUserInitiatedLinking4Request
   */
  public static AbdmUserInitiatedLinking4Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmUserInitiatedLinking4Request.class);
  }

  /**
   * Convert an instance of AbdmUserInitiatedLinking4Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

