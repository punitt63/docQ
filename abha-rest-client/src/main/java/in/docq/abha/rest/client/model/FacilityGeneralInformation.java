/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;;

import java.io.IOException;
import java.util.*;

/**
 * FacilityGeneralInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityGeneralInformation {
  public static final String SERIALIZED_NAME_HAS_DIALYSIS_CENTER = "hasDialysisCenter";
  @SerializedName(SERIALIZED_NAME_HAS_DIALYSIS_CENTER)
  @javax.annotation.Nullable
  private String hasDialysisCenter;

  public static final String SERIALIZED_NAME_HAS_PHARMACY = "hasPharmacy";
  @SerializedName(SERIALIZED_NAME_HAS_PHARMACY)
  @javax.annotation.Nullable
  private String hasPharmacy;

  public static final String SERIALIZED_NAME_HAS_BLOOD_BANK = "hasBloodBank";
  @SerializedName(SERIALIZED_NAME_HAS_BLOOD_BANK)
  @javax.annotation.Nullable
  private String hasBloodBank;

  public static final String SERIALIZED_NAME_HAS_CATH_LAB = "hasCathLab";
  @SerializedName(SERIALIZED_NAME_HAS_CATH_LAB)
  @javax.annotation.Nullable
  private String hasCathLab;

  public static final String SERIALIZED_NAME_HAS_DIAGNOSTIC_LAB = "hasDiagnosticLab";
  @SerializedName(SERIALIZED_NAME_HAS_DIAGNOSTIC_LAB)
  @javax.annotation.Nullable
  private String hasDiagnosticLab;

  public static final String SERIALIZED_NAME_HAS_IMAGING_CENTER = "hasImagingCenter";
  @SerializedName(SERIALIZED_NAME_HAS_IMAGING_CENTER)
  @javax.annotation.Nullable
  private String hasImagingCenter;

  public static final String SERIALIZED_NAME_SERVICES_BY_IMAGING_CENTER = "servicesByImagingCenter";
  @SerializedName(SERIALIZED_NAME_SERVICES_BY_IMAGING_CENTER)
  @javax.annotation.Nullable
  private List<FacilityServices> servicesByImagingCenter = new ArrayList<>();

  public FacilityGeneralInformation() {
  }

  public FacilityGeneralInformation hasDialysisCenter(@javax.annotation.Nullable String hasDialysisCenter) {
    this.hasDialysisCenter = hasDialysisCenter;
    return this;
  }

  /**
   * Get hasDialysisCenter
   * @return hasDialysisCenter
   */
  @javax.annotation.Nullable
  public String getHasDialysisCenter() {
    return hasDialysisCenter;
  }

  public void setHasDialysisCenter(@javax.annotation.Nullable String hasDialysisCenter) {
    this.hasDialysisCenter = hasDialysisCenter;
  }


  public FacilityGeneralInformation hasPharmacy(@javax.annotation.Nullable String hasPharmacy) {
    this.hasPharmacy = hasPharmacy;
    return this;
  }

  /**
   * Get hasPharmacy
   * @return hasPharmacy
   */
  @javax.annotation.Nullable
  public String getHasPharmacy() {
    return hasPharmacy;
  }

  public void setHasPharmacy(@javax.annotation.Nullable String hasPharmacy) {
    this.hasPharmacy = hasPharmacy;
  }


  public FacilityGeneralInformation hasBloodBank(@javax.annotation.Nullable String hasBloodBank) {
    this.hasBloodBank = hasBloodBank;
    return this;
  }

  /**
   * Get hasBloodBank
   * @return hasBloodBank
   */
  @javax.annotation.Nullable
  public String getHasBloodBank() {
    return hasBloodBank;
  }

  public void setHasBloodBank(@javax.annotation.Nullable String hasBloodBank) {
    this.hasBloodBank = hasBloodBank;
  }


  public FacilityGeneralInformation hasCathLab(@javax.annotation.Nullable String hasCathLab) {
    this.hasCathLab = hasCathLab;
    return this;
  }

  /**
   * Get hasCathLab
   * @return hasCathLab
   */
  @javax.annotation.Nullable
  public String getHasCathLab() {
    return hasCathLab;
  }

  public void setHasCathLab(@javax.annotation.Nullable String hasCathLab) {
    this.hasCathLab = hasCathLab;
  }


  public FacilityGeneralInformation hasDiagnosticLab(@javax.annotation.Nullable String hasDiagnosticLab) {
    this.hasDiagnosticLab = hasDiagnosticLab;
    return this;
  }

  /**
   * Get hasDiagnosticLab
   * @return hasDiagnosticLab
   */
  @javax.annotation.Nullable
  public String getHasDiagnosticLab() {
    return hasDiagnosticLab;
  }

  public void setHasDiagnosticLab(@javax.annotation.Nullable String hasDiagnosticLab) {
    this.hasDiagnosticLab = hasDiagnosticLab;
  }


  public FacilityGeneralInformation hasImagingCenter(@javax.annotation.Nullable String hasImagingCenter) {
    this.hasImagingCenter = hasImagingCenter;
    return this;
  }

  /**
   * Get hasImagingCenter
   * @return hasImagingCenter
   */
  @javax.annotation.Nullable
  public String getHasImagingCenter() {
    return hasImagingCenter;
  }

  public void setHasImagingCenter(@javax.annotation.Nullable String hasImagingCenter) {
    this.hasImagingCenter = hasImagingCenter;
  }


  public FacilityGeneralInformation servicesByImagingCenter(@javax.annotation.Nullable List<FacilityServices> servicesByImagingCenter) {
    this.servicesByImagingCenter = servicesByImagingCenter;
    return this;
  }

  public FacilityGeneralInformation addServicesByImagingCenterItem(FacilityServices servicesByImagingCenterItem) {
    if (this.servicesByImagingCenter == null) {
      this.servicesByImagingCenter = new ArrayList<>();
    }
    this.servicesByImagingCenter.add(servicesByImagingCenterItem);
    return this;
  }

  /**
   * Get servicesByImagingCenter
   * @return servicesByImagingCenter
   */
  @javax.annotation.Nullable
  public List<FacilityServices> getServicesByImagingCenter() {
    return servicesByImagingCenter;
  }

  public void setServicesByImagingCenter(@javax.annotation.Nullable List<FacilityServices> servicesByImagingCenter) {
    this.servicesByImagingCenter = servicesByImagingCenter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityGeneralInformation facilityGeneralInformation = (FacilityGeneralInformation) o;
    return Objects.equals(this.hasDialysisCenter, facilityGeneralInformation.hasDialysisCenter) &&
        Objects.equals(this.hasPharmacy, facilityGeneralInformation.hasPharmacy) &&
        Objects.equals(this.hasBloodBank, facilityGeneralInformation.hasBloodBank) &&
        Objects.equals(this.hasCathLab, facilityGeneralInformation.hasCathLab) &&
        Objects.equals(this.hasDiagnosticLab, facilityGeneralInformation.hasDiagnosticLab) &&
        Objects.equals(this.hasImagingCenter, facilityGeneralInformation.hasImagingCenter) &&
        Objects.equals(this.servicesByImagingCenter, facilityGeneralInformation.servicesByImagingCenter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasDialysisCenter, hasPharmacy, hasBloodBank, hasCathLab, hasDiagnosticLab, hasImagingCenter, servicesByImagingCenter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityGeneralInformation {\n");
    sb.append("    hasDialysisCenter: ").append(toIndentedString(hasDialysisCenter)).append("\n");
    sb.append("    hasPharmacy: ").append(toIndentedString(hasPharmacy)).append("\n");
    sb.append("    hasBloodBank: ").append(toIndentedString(hasBloodBank)).append("\n");
    sb.append("    hasCathLab: ").append(toIndentedString(hasCathLab)).append("\n");
    sb.append("    hasDiagnosticLab: ").append(toIndentedString(hasDiagnosticLab)).append("\n");
    sb.append("    hasImagingCenter: ").append(toIndentedString(hasImagingCenter)).append("\n");
    sb.append("    servicesByImagingCenter: ").append(toIndentedString(servicesByImagingCenter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasDialysisCenter");
    openapiFields.add("hasPharmacy");
    openapiFields.add("hasBloodBank");
    openapiFields.add("hasCathLab");
    openapiFields.add("hasDiagnosticLab");
    openapiFields.add("hasImagingCenter");
    openapiFields.add("servicesByImagingCenter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityGeneralInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityGeneralInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityGeneralInformation is not found in the empty JSON string", FacilityGeneralInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityGeneralInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityGeneralInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hasDialysisCenter") != null && !jsonObj.get("hasDialysisCenter").isJsonNull()) && !jsonObj.get("hasDialysisCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasDialysisCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasDialysisCenter").toString()));
      }
      if ((jsonObj.get("hasPharmacy") != null && !jsonObj.get("hasPharmacy").isJsonNull()) && !jsonObj.get("hasPharmacy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasPharmacy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasPharmacy").toString()));
      }
      if ((jsonObj.get("hasBloodBank") != null && !jsonObj.get("hasBloodBank").isJsonNull()) && !jsonObj.get("hasBloodBank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasBloodBank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasBloodBank").toString()));
      }
      if ((jsonObj.get("hasCathLab") != null && !jsonObj.get("hasCathLab").isJsonNull()) && !jsonObj.get("hasCathLab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasCathLab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasCathLab").toString()));
      }
      if ((jsonObj.get("hasDiagnosticLab") != null && !jsonObj.get("hasDiagnosticLab").isJsonNull()) && !jsonObj.get("hasDiagnosticLab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasDiagnosticLab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasDiagnosticLab").toString()));
      }
      if ((jsonObj.get("hasImagingCenter") != null && !jsonObj.get("hasImagingCenter").isJsonNull()) && !jsonObj.get("hasImagingCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasImagingCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasImagingCenter").toString()));
      }
      if (jsonObj.get("servicesByImagingCenter") != null && !jsonObj.get("servicesByImagingCenter").isJsonNull()) {
        JsonArray jsonArrayservicesByImagingCenter = jsonObj.getAsJsonArray("servicesByImagingCenter");
        if (jsonArrayservicesByImagingCenter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servicesByImagingCenter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servicesByImagingCenter` to be an array in the JSON string but got `%s`", jsonObj.get("servicesByImagingCenter").toString()));
          }

          // validate the optional field `servicesByImagingCenter` (array)
          for (int i = 0; i < jsonArrayservicesByImagingCenter.size(); i++) {
            FacilityServices.validateJsonElement(jsonArrayservicesByImagingCenter.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityGeneralInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityGeneralInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityGeneralInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityGeneralInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityGeneralInformation>() {
           @Override
           public void write(JsonWriter out, FacilityGeneralInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityGeneralInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityGeneralInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityGeneralInformation
   * @throws IOException if the JSON string is invalid with respect to FacilityGeneralInformation
   */
  public static FacilityGeneralInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityGeneralInformation.class);
  }

  /**
   * Convert an instance of FacilityGeneralInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

