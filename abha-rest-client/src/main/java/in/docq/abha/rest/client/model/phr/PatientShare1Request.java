/*
 * HIE-CM Profile Share
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * PatientShare1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T12:11:20.742865+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PatientShare1Request {
  /**
   * The intention of share API call
   */
  @JsonAdapter(IntentEnum.Adapter.class)
  public enum IntentEnum {
    PROFILE_SHARE("PROFILE_SHARE"),
    
    RECORD_SHARE("RECORD_SHARE"),
    
    PAYMENT_SHARE("PAYMENT_SHARE");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  @javax.annotation.Nonnull
  private IntentEnum intent;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  @javax.annotation.Nonnull
  private PatientShare1RequestMetaData metaData;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nonnull
  private PatientShare1RequestProfile profile;

  public PatientShare1Request() {
  }

  public PatientShare1Request intent(@javax.annotation.Nonnull IntentEnum intent) {
    this.intent = intent;
    return this;
  }

  /**
   * The intention of share API call
   * @return intent
   */
  @javax.annotation.Nonnull
  public IntentEnum getIntent() {
    return intent;
  }

  public void setIntent(@javax.annotation.Nonnull IntentEnum intent) {
    this.intent = intent;
  }


  public PatientShare1Request metaData(@javax.annotation.Nonnull PatientShare1RequestMetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * Get metaData
   * @return metaData
   */
  @javax.annotation.Nonnull
  public PatientShare1RequestMetaData getMetaData() {
    return metaData;
  }

  public void setMetaData(@javax.annotation.Nonnull PatientShare1RequestMetaData metaData) {
    this.metaData = metaData;
  }


  public PatientShare1Request profile(@javax.annotation.Nonnull PatientShare1RequestProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nonnull
  public PatientShare1RequestProfile getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nonnull PatientShare1RequestProfile profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientShare1Request patientShare1Request = (PatientShare1Request) o;
    return Objects.equals(this.intent, patientShare1Request.intent) &&
        Objects.equals(this.metaData, patientShare1Request.metaData) &&
        Objects.equals(this.profile, patientShare1Request.profile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intent, metaData, profile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientShare1Request {\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intent");
    openapiFields.add("metaData");
    openapiFields.add("profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("intent");
    openapiRequiredFields.add("metaData");
    openapiRequiredFields.add("profile");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientShare1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientShare1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientShare1Request is not found in the empty JSON string", PatientShare1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientShare1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientShare1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientShare1Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("intent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intent").toString()));
      }
      // validate the required field `intent`
      IntentEnum.validateJsonElement(jsonObj.get("intent"));
      // validate the required field `metaData`
      PatientShare1RequestMetaData.validateJsonElement(jsonObj.get("metaData"));
      // validate the required field `profile`
      PatientShare1RequestProfile.validateJsonElement(jsonObj.get("profile"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientShare1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientShare1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientShare1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientShare1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientShare1Request>() {
           @Override
           public void write(JsonWriter out, PatientShare1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientShare1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientShare1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientShare1Request
   * @throws IOException if the JSON string is invalid with respect to PatientShare1Request
   */
  public static PatientShare1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientShare1Request.class);
  }

  /**
   * Convert an instance of PatientShare1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

