/*
 * Healthcare Professional ID Service
 * It is important to standardize the process of identification of an individual across Healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Healthcare Professional ID to an individual, one only needs basic demographic details like **Name, Year of Birth, Gender**. In addition, citizens should be able to update contact information easily.  The Healthcare Professional ID will be used for the purposes of uniquely identifying persons, authenticating them, and threading their health records (only with the informed consent of the patient) across multiple systems and stakeholders. ## API Security</h4> You need Authorization Token and X-HIP-ID to consume APIs.   ## Notes:    <b>1. In order to have access to Healthcare Professional ID APIs, Your `ClientId`<sup style='color:red'>* required</sup> must have hid role in gateway. So if you want access to these APIs then please request it in your Ayushman Bharat Digital Mission (ABDM) on-boarding request.</b>   <b>2. When calling APIs, please ensure that Authorization header must have format as `Bearer <Token_Value>`. Please note that prefix Bearer followed by space before token value.</b>   <b>3. Please use latest version of **APIs (currently latest V2)**</b> as <b style=\"color:red\">older version may get deprecated soon.</b></b>   <b>4. Check the state and district codes from LGD directory [click here](https://lgdirectory.gov.in/)</b>    <b>5. Highlighted Changes in the API Version 2 </b>  - Sensitive data (Data like OTP, Aadhaar Number/Virtual ID/UID Token, Password, Username etc) have to be encrypted. - Data is encrypted by the public certificate. The certificate can be downloaded from the __/v1/auth/cert__  API under  __Authentication__ tag in the version 1. - RSA Encryption to encrypt the data. Cipher Type - <b>RSA/ECB/PKCS1Padding</b>.  online tool to encrypt data [click here](https://www.devglan.com/online-tools/rsa-encryption-decryption)    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import in.docq.abha.rest.client.JSON;

/**
 * SearchAccountWebResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-09T21:20:59.109435+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class SearchAccountWebResponse {
  public static final String SERIALIZED_NAME_HPR_ID = "hprId";
  @SerializedName(SERIALIZED_NAME_HPR_ID)
  @javax.annotation.Nullable
  private String hprId;

  public static final String SERIALIZED_NAME_HPR_ID_NUMBER = "hprIdNumber";
  @SerializedName(SERIALIZED_NAME_HPR_ID_NUMBER)
  @javax.annotation.Nullable
  private String hprIdNumber;

  /**
   * Gets or Sets authMethods
   */
  @JsonAdapter(AuthMethodsEnum.Adapter.class)
  public enum AuthMethodsEnum {
    AADHAAR_OTP("AADHAAR_OTP"),
    
    MOBILE_OTP("MOBILE_OTP"),
    
    PASSWORD("PASSWORD"),
    
    DEMOGRAPHICS("DEMOGRAPHICS"),
    
    AADHAAR_BIO("AADHAAR_BIO"),
    
    EMAIL_OTP("EMAIL_OTP"),
    
    MOBILE_OTP_RESET_PASSWROD("MOBILE_OTP_RESET_PASSWROD");

    private String value;

    AuthMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthMethodsEnum fromValue(String value) {
      for (AuthMethodsEnum b : AuthMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_METHODS = "authMethods";
  @SerializedName(SERIALIZED_NAME_AUTH_METHODS)
  @javax.annotation.Nullable
  private Set<AuthMethodsEnum> authMethods = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_BLOCKED_AUTH_METHODS = "blockedAuthMethods";
  @SerializedName(SERIALIZED_NAME_BLOCKED_AUTH_METHODS)
  @javax.annotation.Nullable
  private Set<String> blockedAuthMethods = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_VERIFICATION_TYPE = "verificationType";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TYPE)
  @javax.annotation.Nullable
  private String verificationType;

  public static final String SERIALIZED_NAME_VERIFICATION_STATUS = "verificationStatus";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATUS)
  @javax.annotation.Nullable
  private String verificationStatus;

  public SearchAccountWebResponse() {
  }

  public SearchAccountWebResponse hprId(@javax.annotation.Nullable String hprId) {
    this.hprId = hprId;
    return this;
  }

  /**
   * Get hprId
   * @return hprId
   */
  @javax.annotation.Nullable
  public String getHprId() {
    return hprId;
  }

  public void setHprId(@javax.annotation.Nullable String hprId) {
    this.hprId = hprId;
  }


  public SearchAccountWebResponse hprIdNumber(@javax.annotation.Nullable String hprIdNumber) {
    this.hprIdNumber = hprIdNumber;
    return this;
  }

  /**
   * Get hprIdNumber
   * @return hprIdNumber
   */
  @javax.annotation.Nullable
  public String getHprIdNumber() {
    return hprIdNumber;
  }

  public void setHprIdNumber(@javax.annotation.Nullable String hprIdNumber) {
    this.hprIdNumber = hprIdNumber;
  }


  public SearchAccountWebResponse authMethods(@javax.annotation.Nullable Set<AuthMethodsEnum> authMethods) {
    this.authMethods = authMethods;
    return this;
  }

  public SearchAccountWebResponse addAuthMethodsItem(AuthMethodsEnum authMethodsItem) {
    if (this.authMethods == null) {
      this.authMethods = new LinkedHashSet<>();
    }
    this.authMethods.add(authMethodsItem);
    return this;
  }

  /**
   * Get authMethods
   * @return authMethods
   */
  @javax.annotation.Nullable
  public Set<AuthMethodsEnum> getAuthMethods() {
    return authMethods;
  }

  public void setAuthMethods(@javax.annotation.Nullable Set<AuthMethodsEnum> authMethods) {
    this.authMethods = authMethods;
  }


  public SearchAccountWebResponse tags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public SearchAccountWebResponse putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }


  public SearchAccountWebResponse blockedAuthMethods(@javax.annotation.Nullable Set<String> blockedAuthMethods) {
    this.blockedAuthMethods = blockedAuthMethods;
    return this;
  }

  public SearchAccountWebResponse addBlockedAuthMethodsItem(String blockedAuthMethodsItem) {
    if (this.blockedAuthMethods == null) {
      this.blockedAuthMethods = new LinkedHashSet<>();
    }
    this.blockedAuthMethods.add(blockedAuthMethodsItem);
    return this;
  }

  /**
   * Get blockedAuthMethods
   * @return blockedAuthMethods
   */
  @javax.annotation.Nullable
  public Set<String> getBlockedAuthMethods() {
    return blockedAuthMethods;
  }

  public void setBlockedAuthMethods(@javax.annotation.Nullable Set<String> blockedAuthMethods) {
    this.blockedAuthMethods = blockedAuthMethods;
  }


  public SearchAccountWebResponse verificationType(@javax.annotation.Nullable String verificationType) {
    this.verificationType = verificationType;
    return this;
  }

  /**
   * Get verificationType
   * @return verificationType
   */
  @javax.annotation.Nullable
  public String getVerificationType() {
    return verificationType;
  }

  public void setVerificationType(@javax.annotation.Nullable String verificationType) {
    this.verificationType = verificationType;
  }


  public SearchAccountWebResponse verificationStatus(@javax.annotation.Nullable String verificationStatus) {
    this.verificationStatus = verificationStatus;
    return this;
  }

  /**
   * Get verificationStatus
   * @return verificationStatus
   */
  @javax.annotation.Nullable
  public String getVerificationStatus() {
    return verificationStatus;
  }

  public void setVerificationStatus(@javax.annotation.Nullable String verificationStatus) {
    this.verificationStatus = verificationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAccountWebResponse searchAccountWebResponse = (SearchAccountWebResponse) o;
    return Objects.equals(this.hprId, searchAccountWebResponse.hprId) &&
        Objects.equals(this.hprIdNumber, searchAccountWebResponse.hprIdNumber) &&
        Objects.equals(this.authMethods, searchAccountWebResponse.authMethods) &&
        Objects.equals(this.tags, searchAccountWebResponse.tags) &&
        Objects.equals(this.blockedAuthMethods, searchAccountWebResponse.blockedAuthMethods) &&
        Objects.equals(this.verificationType, searchAccountWebResponse.verificationType) &&
        Objects.equals(this.verificationStatus, searchAccountWebResponse.verificationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hprId, hprIdNumber, authMethods, tags, blockedAuthMethods, verificationType, verificationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAccountWebResponse {\n");
    sb.append("    hprId: ").append(toIndentedString(hprId)).append("\n");
    sb.append("    hprIdNumber: ").append(toIndentedString(hprIdNumber)).append("\n");
    sb.append("    authMethods: ").append(toIndentedString(authMethods)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    blockedAuthMethods: ").append(toIndentedString(blockedAuthMethods)).append("\n");
    sb.append("    verificationType: ").append(toIndentedString(verificationType)).append("\n");
    sb.append("    verificationStatus: ").append(toIndentedString(verificationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hprId");
    openapiFields.add("hprIdNumber");
    openapiFields.add("authMethods");
    openapiFields.add("tags");
    openapiFields.add("blockedAuthMethods");
    openapiFields.add("verificationType");
    openapiFields.add("verificationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAccountWebResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAccountWebResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAccountWebResponse is not found in the empty JSON string", SearchAccountWebResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAccountWebResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAccountWebResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hprId") != null && !jsonObj.get("hprId").isJsonNull()) && !jsonObj.get("hprId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hprId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hprId").toString()));
      }
      if ((jsonObj.get("hprIdNumber") != null && !jsonObj.get("hprIdNumber").isJsonNull()) && !jsonObj.get("hprIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hprIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hprIdNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authMethods") != null && !jsonObj.get("authMethods").isJsonNull() && !jsonObj.get("authMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedAuthMethods") != null && !jsonObj.get("blockedAuthMethods").isJsonNull() && !jsonObj.get("blockedAuthMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedAuthMethods` to be an array in the JSON string but got `%s`", jsonObj.get("blockedAuthMethods").toString()));
      }
      if ((jsonObj.get("verificationType") != null && !jsonObj.get("verificationType").isJsonNull()) && !jsonObj.get("verificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationType").toString()));
      }
      if ((jsonObj.get("verificationStatus") != null && !jsonObj.get("verificationStatus").isJsonNull()) && !jsonObj.get("verificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAccountWebResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAccountWebResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAccountWebResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAccountWebResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAccountWebResponse>() {
           @Override
           public void write(JsonWriter out, SearchAccountWebResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAccountWebResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAccountWebResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAccountWebResponse
   * @throws IOException if the JSON string is invalid with respect to SearchAccountWebResponse
   */
  public static SearchAccountWebResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAccountWebResponse.class);
  }

  /**
   * Convert an instance of SearchAccountWebResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

