/*
 * User Initiated Linking Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * In the request body, either ‘patient’ or ‘error’ must be included.&lt;br&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;Incase of success scenario, patient is mandatory and error is optional&lt;/li&gt; &lt;li&gt;In case of failure scenario, error is mandatory and patient is optional&lt;/li&gt; &lt;li&gt;response is mandatory object in both the cases&lt;/li&gt; &lt;/ol&gt; 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T17:25:36.087359+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmUserInitiatedLinking2Request {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nonnull
  private UUID transactionId;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  @javax.annotation.Nonnull
  private List<AbdmUserInitiatedLinking2RequestPatientInner> patient = new ArrayList<>();

  /**
   * Allows alpha numeric characters and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;&#39;:|()/]{0,255}$\&quot;
   */
  @JsonAdapter(MatchedByEnum.Adapter.class)
  public enum MatchedByEnum {
    MR("MR"),
    
    MOBILE("MOBILE"),
    
    ABHA_NUMBER("ABHA_NUMBER"),
    
    ABHA_ADDRESS("ABHA_ADDRESS");

    private String value;

    MatchedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchedByEnum fromValue(String value) {
      for (MatchedByEnum b : MatchedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHED_BY = "matchedBy";
  @SerializedName(SERIALIZED_NAME_MATCHED_BY)
  @javax.annotation.Nonnull
  private List<MatchedByEnum> matchedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private AbdmUserInitiatedLinking2RequestError error;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  @javax.annotation.Nonnull
  private AbdmUserInitiatedLinking2RequestResponse response;

  public AbdmUserInitiatedLinking2Request() {
  }

  public AbdmUserInitiatedLinking2Request transactionId(@javax.annotation.Nonnull UUID transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * UUID from discover request callback to track the entire user link flow
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public UUID getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nonnull UUID transactionId) {
    this.transactionId = transactionId;
  }


  public AbdmUserInitiatedLinking2Request patient(@javax.annotation.Nonnull List<AbdmUserInitiatedLinking2RequestPatientInner> patient) {
    this.patient = patient;
    return this;
  }

  public AbdmUserInitiatedLinking2Request addPatientItem(AbdmUserInitiatedLinking2RequestPatientInner patientItem) {
    if (this.patient == null) {
      this.patient = new ArrayList<>();
    }
    this.patient.add(patientItem);
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nonnull
  public List<AbdmUserInitiatedLinking2RequestPatientInner> getPatient() {
    return patient;
  }

  public void setPatient(@javax.annotation.Nonnull List<AbdmUserInitiatedLinking2RequestPatientInner> patient) {
    this.patient = patient;
  }


  public AbdmUserInitiatedLinking2Request matchedBy(@javax.annotation.Nonnull List<MatchedByEnum> matchedBy) {
    this.matchedBy = matchedBy;
    return this;
  }

  public AbdmUserInitiatedLinking2Request addMatchedByItem(MatchedByEnum matchedByItem) {
    if (this.matchedBy == null) {
      this.matchedBy = new ArrayList<>();
    }
    this.matchedBy.add(matchedByItem);
    return this;
  }

  /**
   * Get matchedBy
   * @return matchedBy
   */
  @javax.annotation.Nonnull
  public List<MatchedByEnum> getMatchedBy() {
    return matchedBy;
  }

  public void setMatchedBy(@javax.annotation.Nonnull List<MatchedByEnum> matchedBy) {
    this.matchedBy = matchedBy;
  }


  public AbdmUserInitiatedLinking2Request error(@javax.annotation.Nullable AbdmUserInitiatedLinking2RequestError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public AbdmUserInitiatedLinking2RequestError getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable AbdmUserInitiatedLinking2RequestError error) {
    this.error = error;
  }


  public AbdmUserInitiatedLinking2Request response(@javax.annotation.Nonnull AbdmUserInitiatedLinking2RequestResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public AbdmUserInitiatedLinking2RequestResponse getResponse() {
    return response;
  }

  public void setResponse(@javax.annotation.Nonnull AbdmUserInitiatedLinking2RequestResponse response) {
    this.response = response;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmUserInitiatedLinking2Request abdmUserInitiatedLinking2Request = (AbdmUserInitiatedLinking2Request) o;
    return Objects.equals(this.transactionId, abdmUserInitiatedLinking2Request.transactionId) &&
        Objects.equals(this.patient, abdmUserInitiatedLinking2Request.patient) &&
        Objects.equals(this.matchedBy, abdmUserInitiatedLinking2Request.matchedBy) &&
        Objects.equals(this.error, abdmUserInitiatedLinking2Request.error) &&
        Objects.equals(this.response, abdmUserInitiatedLinking2Request.response);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, patient, matchedBy, error, response);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmUserInitiatedLinking2Request {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    matchedBy: ").append(toIndentedString(matchedBy)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("patient");
    openapiFields.add("matchedBy");
    openapiFields.add("error");
    openapiFields.add("response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("patient");
    openapiRequiredFields.add("matchedBy");
    openapiRequiredFields.add("response");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmUserInitiatedLinking2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmUserInitiatedLinking2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmUserInitiatedLinking2Request is not found in the empty JSON string", AbdmUserInitiatedLinking2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmUserInitiatedLinking2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmUserInitiatedLinking2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmUserInitiatedLinking2Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("patient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patient` to be an array in the JSON string but got `%s`", jsonObj.get("patient").toString()));
      }

      JsonArray jsonArraypatient = jsonObj.getAsJsonArray("patient");
      // validate the required field `patient` (array)
      for (int i = 0; i < jsonArraypatient.size(); i++) {
        AbdmUserInitiatedLinking2RequestPatientInner.validateJsonElement(jsonArraypatient.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("matchedBy") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("matchedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedBy` to be an array in the JSON string but got `%s`", jsonObj.get("matchedBy").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        AbdmUserInitiatedLinking2RequestError.validateJsonElement(jsonObj.get("error"));
      }
      // validate the required field `response`
      AbdmUserInitiatedLinking2RequestResponse.validateJsonElement(jsonObj.get("response"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmUserInitiatedLinking2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmUserInitiatedLinking2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmUserInitiatedLinking2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmUserInitiatedLinking2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmUserInitiatedLinking2Request>() {
           @Override
           public void write(JsonWriter out, AbdmUserInitiatedLinking2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmUserInitiatedLinking2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmUserInitiatedLinking2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmUserInitiatedLinking2Request
   * @throws IOException if the JSON string is invalid with respect to AbdmUserInitiatedLinking2Request
   */
  public static AbdmUserInitiatedLinking2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmUserInitiatedLinking2Request.class);
  }

  /**
   * Convert an instance of AbdmUserInitiatedLinking2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

