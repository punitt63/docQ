/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * ConsentManagement6RequestNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ConsentManagement6RequestNotification {
  public static final String SERIALIZED_NAME_CONSENT_REQUEST_ID = "consentRequestId";
  @SerializedName(SERIALIZED_NAME_CONSENT_REQUEST_ID)
  @javax.annotation.Nonnull
  private UUID consentRequestId;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    GRANTED("GRANTED"),
    
    EXPIRED("EXPIRED"),
    
    DENIED("DENIED"),
    
    REQUESTED("REQUESTED"),
    
    REVOKED("REVOKED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private String reason;

  public static final String SERIALIZED_NAME_CONSENT_ARTEFACTS = "consentArtefacts";
  @SerializedName(SERIALIZED_NAME_CONSENT_ARTEFACTS)
  @javax.annotation.Nonnull
  private List<ConsentManagement6RequestNotificationConsentArtefactsInner> consentArtefacts = new ArrayList<>();

  public ConsentManagement6RequestNotification() {
  }

  public ConsentManagement6RequestNotification consentRequestId(@javax.annotation.Nonnull UUID consentRequestId) {
    this.consentRequestId = consentRequestId;
    return this;
  }

  /**
   * The consent request id from a consent. Allows alpha numeric character and special characters like \&quot;^[a-zA-Z0-9_\\-@,. \&quot;:/]{0,255}$\&quot;
   * @return consentRequestId
   */
  @javax.annotation.Nonnull
  public UUID getConsentRequestId() {
    return consentRequestId;
  }

  public void setConsentRequestId(@javax.annotation.Nonnull UUID consentRequestId) {
    this.consentRequestId = consentRequestId;
  }


  public ConsentManagement6RequestNotification status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public ConsentManagement6RequestNotification reason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
  }


  public ConsentManagement6RequestNotification consentArtefacts(@javax.annotation.Nonnull List<ConsentManagement6RequestNotificationConsentArtefactsInner> consentArtefacts) {
    this.consentArtefacts = consentArtefacts;
    return this;
  }

  public ConsentManagement6RequestNotification addConsentArtefactsItem(ConsentManagement6RequestNotificationConsentArtefactsInner consentArtefactsItem) {
    if (this.consentArtefacts == null) {
      this.consentArtefacts = new ArrayList<>();
    }
    this.consentArtefacts.add(consentArtefactsItem);
    return this;
  }

  /**
   * Get consentArtefacts
   * @return consentArtefacts
   */
  @javax.annotation.Nonnull
  public List<ConsentManagement6RequestNotificationConsentArtefactsInner> getConsentArtefacts() {
    return consentArtefacts;
  }

  public void setConsentArtefacts(@javax.annotation.Nonnull List<ConsentManagement6RequestNotificationConsentArtefactsInner> consentArtefacts) {
    this.consentArtefacts = consentArtefacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentManagement6RequestNotification consentManagement6RequestNotification = (ConsentManagement6RequestNotification) o;
    return Objects.equals(this.consentRequestId, consentManagement6RequestNotification.consentRequestId) &&
        Objects.equals(this.status, consentManagement6RequestNotification.status) &&
        Objects.equals(this.reason, consentManagement6RequestNotification.reason) &&
        Objects.equals(this.consentArtefacts, consentManagement6RequestNotification.consentArtefacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentRequestId, status, reason, consentArtefacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentManagement6RequestNotification {\n");
    sb.append("    consentRequestId: ").append(toIndentedString(consentRequestId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    consentArtefacts: ").append(toIndentedString(consentArtefacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentRequestId");
    openapiFields.add("status");
    openapiFields.add("reason");
    openapiFields.add("consentArtefacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consentRequestId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("consentArtefacts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsentManagement6RequestNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsentManagement6RequestNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsentManagement6RequestNotification is not found in the empty JSON string", ConsentManagement6RequestNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsentManagement6RequestNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsentManagement6RequestNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsentManagement6RequestNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("consentRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentRequestId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("consentArtefacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentArtefacts` to be an array in the JSON string but got `%s`", jsonObj.get("consentArtefacts").toString()));
      }

      JsonArray jsonArrayconsentArtefacts = jsonObj.getAsJsonArray("consentArtefacts");
      // validate the required field `consentArtefacts` (array)
      for (int i = 0; i < jsonArrayconsentArtefacts.size(); i++) {
        ConsentManagement6RequestNotificationConsentArtefactsInner.validateJsonElement(jsonArrayconsentArtefacts.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsentManagement6RequestNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsentManagement6RequestNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsentManagement6RequestNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsentManagement6RequestNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsentManagement6RequestNotification>() {
           @Override
           public void write(JsonWriter out, ConsentManagement6RequestNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsentManagement6RequestNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsentManagement6RequestNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsentManagement6RequestNotification
   * @throws IOException if the JSON string is invalid with respect to ConsentManagement6RequestNotification
   */
  public static ConsentManagement6RequestNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsentManagement6RequestNotification.class);
  }

  /**
   * Convert an instance of ConsentManagement6RequestNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

