/*
 * Health Facility Registry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * HiecmDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-04T14:58:27.910059+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class HiecmDetails {
  public static final String SERIALIZED_NAME_HIECM_SOFTWARE = "hiecmSoftware";
  @SerializedName(SERIALIZED_NAME_HIECM_SOFTWARE)
  @javax.annotation.Nullable
  private String hiecmSoftware;

  public static final String SERIALIZED_NAME_IS_ACTIVE_HIECM = "isActiveHiecm";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE_HIECM)
  @javax.annotation.Nullable
  private String isActiveHiecm;

  public static final String SERIALIZED_NAME_HIPNAME = "hipname";
  @SerializedName(SERIALIZED_NAME_HIPNAME)
  @javax.annotation.Nullable
  private String hipname;

  public static final String SERIALIZED_NAME_HIPID = "hipid";
  @SerializedName(SERIALIZED_NAME_HIPID)
  @javax.annotation.Nullable
  private String hipid;

  public HiecmDetails() {
  }

  public HiecmDetails hiecmSoftware(@javax.annotation.Nullable String hiecmSoftware) {
    this.hiecmSoftware = hiecmSoftware;
    return this;
  }

  /**
   * Get hiecmSoftware
   * @return hiecmSoftware
   */
  @javax.annotation.Nullable
  public String getHiecmSoftware() {
    return hiecmSoftware;
  }

  public void setHiecmSoftware(@javax.annotation.Nullable String hiecmSoftware) {
    this.hiecmSoftware = hiecmSoftware;
  }


  public HiecmDetails isActiveHiecm(@javax.annotation.Nullable String isActiveHiecm) {
    this.isActiveHiecm = isActiveHiecm;
    return this;
  }

  /**
   * Get isActiveHiecm
   * @return isActiveHiecm
   */
  @javax.annotation.Nullable
  public String getIsActiveHiecm() {
    return isActiveHiecm;
  }

  public void setIsActiveHiecm(@javax.annotation.Nullable String isActiveHiecm) {
    this.isActiveHiecm = isActiveHiecm;
  }


  public HiecmDetails hipname(@javax.annotation.Nullable String hipname) {
    this.hipname = hipname;
    return this;
  }

  /**
   * Get hipname
   * @return hipname
   */
  @javax.annotation.Nullable
  public String getHipname() {
    return hipname;
  }

  public void setHipname(@javax.annotation.Nullable String hipname) {
    this.hipname = hipname;
  }


  public HiecmDetails hipid(@javax.annotation.Nullable String hipid) {
    this.hipid = hipid;
    return this;
  }

  /**
   * Get hipid
   * @return hipid
   */
  @javax.annotation.Nullable
  public String getHipid() {
    return hipid;
  }

  public void setHipid(@javax.annotation.Nullable String hipid) {
    this.hipid = hipid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HiecmDetails hiecmDetails = (HiecmDetails) o;
    return Objects.equals(this.hiecmSoftware, hiecmDetails.hiecmSoftware) &&
        Objects.equals(this.isActiveHiecm, hiecmDetails.isActiveHiecm) &&
        Objects.equals(this.hipname, hiecmDetails.hipname) &&
        Objects.equals(this.hipid, hiecmDetails.hipid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hiecmSoftware, isActiveHiecm, hipname, hipid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HiecmDetails {\n");
    sb.append("    hiecmSoftware: ").append(toIndentedString(hiecmSoftware)).append("\n");
    sb.append("    isActiveHiecm: ").append(toIndentedString(isActiveHiecm)).append("\n");
    sb.append("    hipname: ").append(toIndentedString(hipname)).append("\n");
    sb.append("    hipid: ").append(toIndentedString(hipid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hiecmSoftware");
    openapiFields.add("isActiveHiecm");
    openapiFields.add("hipname");
    openapiFields.add("hipid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HiecmDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HiecmDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HiecmDetails is not found in the empty JSON string", HiecmDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HiecmDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HiecmDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hiecmSoftware") != null && !jsonObj.get("hiecmSoftware").isJsonNull()) && !jsonObj.get("hiecmSoftware").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiecmSoftware` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiecmSoftware").toString()));
      }
      if ((jsonObj.get("isActiveHiecm") != null && !jsonObj.get("isActiveHiecm").isJsonNull()) && !jsonObj.get("isActiveHiecm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isActiveHiecm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isActiveHiecm").toString()));
      }
      if ((jsonObj.get("hipname") != null && !jsonObj.get("hipname").isJsonNull()) && !jsonObj.get("hipname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipname").toString()));
      }
      if ((jsonObj.get("hipid") != null && !jsonObj.get("hipid").isJsonNull()) && !jsonObj.get("hipid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HiecmDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HiecmDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HiecmDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HiecmDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<HiecmDetails>() {
           @Override
           public void write(JsonWriter out, HiecmDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HiecmDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HiecmDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HiecmDetails
   * @throws IOException if the JSON string is invalid with respect to HiecmDetails
   */
  public static HiecmDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HiecmDetails.class);
  }

  /**
   * Convert an instance of HiecmDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

