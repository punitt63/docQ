/*
 * User Initiated Linking Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * AbdmUserInitiatedLinkingPhr3Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T17:25:36.087359+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmUserInitiatedLinkingPhr3Request {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nonnull
  private UUID transactionId;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  @javax.annotation.Nonnull
  private List<AbdmUserInitiatedLinkingPhr3RequestPatientInner> patient = new ArrayList<>();

  public AbdmUserInitiatedLinkingPhr3Request() {
  }

  public AbdmUserInitiatedLinkingPhr3Request transactionId(@javax.annotation.Nonnull UUID transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * UUID from discover request callback to track the entire user link flow
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public UUID getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nonnull UUID transactionId) {
    this.transactionId = transactionId;
  }


  public AbdmUserInitiatedLinkingPhr3Request patient(@javax.annotation.Nonnull List<AbdmUserInitiatedLinkingPhr3RequestPatientInner> patient) {
    this.patient = patient;
    return this;
  }

  public AbdmUserInitiatedLinkingPhr3Request addPatientItem(AbdmUserInitiatedLinkingPhr3RequestPatientInner patientItem) {
    if (this.patient == null) {
      this.patient = new ArrayList<>();
    }
    this.patient.add(patientItem);
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nonnull
  public List<AbdmUserInitiatedLinkingPhr3RequestPatientInner> getPatient() {
    return patient;
  }

  public void setPatient(@javax.annotation.Nonnull List<AbdmUserInitiatedLinkingPhr3RequestPatientInner> patient) {
    this.patient = patient;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmUserInitiatedLinkingPhr3Request abdmUserInitiatedLinkingPhr3Request = (AbdmUserInitiatedLinkingPhr3Request) o;
    return Objects.equals(this.transactionId, abdmUserInitiatedLinkingPhr3Request.transactionId) &&
        Objects.equals(this.patient, abdmUserInitiatedLinkingPhr3Request.patient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, patient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmUserInitiatedLinkingPhr3Request {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("patient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("patient");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmUserInitiatedLinkingPhr3Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmUserInitiatedLinkingPhr3Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmUserInitiatedLinkingPhr3Request is not found in the empty JSON string", AbdmUserInitiatedLinkingPhr3Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmUserInitiatedLinkingPhr3Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmUserInitiatedLinkingPhr3Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmUserInitiatedLinkingPhr3Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("patient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patient` to be an array in the JSON string but got `%s`", jsonObj.get("patient").toString()));
      }

      JsonArray jsonArraypatient = jsonObj.getAsJsonArray("patient");
      // validate the required field `patient` (array)
      for (int i = 0; i < jsonArraypatient.size(); i++) {
        AbdmUserInitiatedLinkingPhr3RequestPatientInner.validateJsonElement(jsonArraypatient.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmUserInitiatedLinkingPhr3Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmUserInitiatedLinkingPhr3Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmUserInitiatedLinkingPhr3Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmUserInitiatedLinkingPhr3Request.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmUserInitiatedLinkingPhr3Request>() {
           @Override
           public void write(JsonWriter out, AbdmUserInitiatedLinkingPhr3Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmUserInitiatedLinkingPhr3Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmUserInitiatedLinkingPhr3Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmUserInitiatedLinkingPhr3Request
   * @throws IOException if the JSON string is invalid with respect to AbdmUserInitiatedLinkingPhr3Request
   */
  public static AbdmUserInitiatedLinkingPhr3Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmUserInitiatedLinkingPhr3Request.class);
  }

  /**
   * Convert an instance of AbdmUserInitiatedLinkingPhr3Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

