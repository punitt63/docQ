/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AbdmConsentManagement12RequestIncludedSourcesInnerPurpose
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement12RequestIncludedSourcesInnerPurpose {
  /**
   * Gets or Sets text
   */
  @JsonAdapter(TextEnum.Adapter.class)
  public enum TextEnum {
    CARE_MANAGEMENT("Care Management"),
    
    BREAK_THE_GLASS("Break the Glass"),
    
    PUBLIC_HEALTH("Public Health"),
    
    HEALTHCARE_PAYMENT("Healthcare Payment"),
    
    DISEASE_SPECIFIC_HEALTHCARE_RESEARCH("Disease Specific Healthcare Research"),
    
    SELF_REQUESTED("Self Requested");

    private String value;

    TextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextEnum fromValue(String value) {
      for (TextEnum b : TextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nonnull
  private TextEnum text;

  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    CAREMGT("CAREMGT"),
    
    BTG("BTG"),
    
    PUBHLTH("PUBHLTH"),
    
    HPAYMT("HPAYMT"),
    
    DSRCH("DSRCH"),
    
    PATRQT("PATRQT");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private CodeEnum code;

  public static final String SERIALIZED_NAME_REF_URI = "refUri";
  @SerializedName(SERIALIZED_NAME_REF_URI)
  @javax.annotation.Nonnull
  private String refUri;

  public AbdmConsentManagement12RequestIncludedSourcesInnerPurpose() {
  }

  public AbdmConsentManagement12RequestIncludedSourcesInnerPurpose text(@javax.annotation.Nonnull TextEnum text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public TextEnum getText() {
    return text;
  }

  public void setText(@javax.annotation.Nonnull TextEnum text) {
    this.text = text;
  }


  public AbdmConsentManagement12RequestIncludedSourcesInnerPurpose code(@javax.annotation.Nonnull CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull CodeEnum code) {
    this.code = code;
  }


  public AbdmConsentManagement12RequestIncludedSourcesInnerPurpose refUri(@javax.annotation.Nonnull String refUri) {
    this.refUri = refUri;
    return this;
  }

  /**
   * The reference URL. Should be a valid URL. Allows alpha numeric character and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;:/]{0,255}$\&quot;
   * @return refUri
   */
  @javax.annotation.Nonnull
  public String getRefUri() {
    return refUri;
  }

  public void setRefUri(@javax.annotation.Nonnull String refUri) {
    this.refUri = refUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement12RequestIncludedSourcesInnerPurpose abdmConsentManagement12RequestIncludedSourcesInnerPurpose = (AbdmConsentManagement12RequestIncludedSourcesInnerPurpose) o;
    return Objects.equals(this.text, abdmConsentManagement12RequestIncludedSourcesInnerPurpose.text) &&
        Objects.equals(this.code, abdmConsentManagement12RequestIncludedSourcesInnerPurpose.code) &&
        Objects.equals(this.refUri, abdmConsentManagement12RequestIncludedSourcesInnerPurpose.refUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, code, refUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement12RequestIncludedSourcesInnerPurpose {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    refUri: ").append(toIndentedString(refUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("text");
    openapiFields.add("code");
    openapiFields.add("refUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("refUri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement12RequestIncludedSourcesInnerPurpose
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement12RequestIncludedSourcesInnerPurpose is not found in the empty JSON string", AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement12RequestIncludedSourcesInnerPurpose` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the required field `text`
      TextEnum.validateJsonElement(jsonObj.get("text"));
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if (!jsonObj.get("refUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement12RequestIncludedSourcesInnerPurpose' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement12RequestIncludedSourcesInnerPurpose> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement12RequestIncludedSourcesInnerPurpose>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement12RequestIncludedSourcesInnerPurpose value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement12RequestIncludedSourcesInnerPurpose read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement12RequestIncludedSourcesInnerPurpose given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement12RequestIncludedSourcesInnerPurpose
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement12RequestIncludedSourcesInnerPurpose
   */
  public static AbdmConsentManagement12RequestIncludedSourcesInnerPurpose fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement12RequestIncludedSourcesInnerPurpose.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement12RequestIncludedSourcesInnerPurpose to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

