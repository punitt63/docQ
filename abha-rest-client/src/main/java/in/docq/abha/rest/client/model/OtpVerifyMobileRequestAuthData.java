/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * OtpVerifyMobileRequestAuthData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T18:02:09.764020+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class OtpVerifyMobileRequestAuthData {
  public static final String SERIALIZED_NAME_AUTH_METHODS = "authMethods";
  @SerializedName(SERIALIZED_NAME_AUTH_METHODS)
  @javax.annotation.Nonnull
  private List<String> authMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTP = "otp";
  @SerializedName(SERIALIZED_NAME_OTP)
  @javax.annotation.Nonnull
  private OtpVerifyMobileRequestAuthDataOtp otp;

  public OtpVerifyMobileRequestAuthData() {
  }

  public OtpVerifyMobileRequestAuthData authMethods(@javax.annotation.Nonnull List<String> authMethods) {
    this.authMethods = authMethods;
    return this;
  }

  public OtpVerifyMobileRequestAuthData addAuthMethodsItem(String authMethodsItem) {
    if (this.authMethods == null) {
      this.authMethods = new ArrayList<>();
    }
    this.authMethods.add(authMethodsItem);
    return this;
  }

  /**
   * Get authMethods
   * @return authMethods
   */
  @javax.annotation.Nonnull
  public List<String> getAuthMethods() {
    return authMethods;
  }

  public void setAuthMethods(@javax.annotation.Nonnull List<String> authMethods) {
    this.authMethods = authMethods;
  }


  public OtpVerifyMobileRequestAuthData otp(@javax.annotation.Nonnull OtpVerifyMobileRequestAuthDataOtp otp) {
    this.otp = otp;
    return this;
  }

  /**
   * Get otp
   * @return otp
   */
  @javax.annotation.Nonnull
  public OtpVerifyMobileRequestAuthDataOtp getOtp() {
    return otp;
  }

  public void setOtp(@javax.annotation.Nonnull OtpVerifyMobileRequestAuthDataOtp otp) {
    this.otp = otp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtpVerifyMobileRequestAuthData otpVerifyMobileRequestAuthData = (OtpVerifyMobileRequestAuthData) o;
    return Objects.equals(this.authMethods, otpVerifyMobileRequestAuthData.authMethods) &&
        Objects.equals(this.otp, otpVerifyMobileRequestAuthData.otp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMethods, otp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtpVerifyMobileRequestAuthData {\n");
    sb.append("    authMethods: ").append(toIndentedString(authMethods)).append("\n");
    sb.append("    otp: ").append(toIndentedString(otp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authMethods");
    openapiFields.add("otp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authMethods");
    openapiRequiredFields.add("otp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtpVerifyMobileRequestAuthData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtpVerifyMobileRequestAuthData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtpVerifyMobileRequestAuthData is not found in the empty JSON string", OtpVerifyMobileRequestAuthData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtpVerifyMobileRequestAuthData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtpVerifyMobileRequestAuthData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OtpVerifyMobileRequestAuthData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("authMethods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("authMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authMethods").toString()));
      }
      // validate the required field `otp`
      OtpVerifyMobileRequestAuthDataOtp.validateJsonElement(jsonObj.get("otp"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtpVerifyMobileRequestAuthData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtpVerifyMobileRequestAuthData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtpVerifyMobileRequestAuthData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtpVerifyMobileRequestAuthData.class));

       return (TypeAdapter<T>) new TypeAdapter<OtpVerifyMobileRequestAuthData>() {
           @Override
           public void write(JsonWriter out, OtpVerifyMobileRequestAuthData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtpVerifyMobileRequestAuthData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtpVerifyMobileRequestAuthData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtpVerifyMobileRequestAuthData
   * @throws IOException if the JSON string is invalid with respect to OtpVerifyMobileRequestAuthData
   */
  public static OtpVerifyMobileRequestAuthData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtpVerifyMobileRequestAuthData.class);
  }

  /**
   * Convert an instance of OtpVerifyMobileRequestAuthData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

