/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * FacilityBloodBankDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityBloodBankDetails {
  public static final String SERIALIZED_NAME_IS_FACILITY_REGISTERED_IN_E_RAKTKOSH = "isFacilityRegisteredInERaktkosh";
  @SerializedName(SERIALIZED_NAME_IS_FACILITY_REGISTERED_IN_E_RAKTKOSH)
  @javax.annotation.Nullable
  private String isFacilityRegisteredInERaktkosh;

  public static final String SERIALIZED_NAME_E_RAKTOSH_ID = "eRaktoshId";
  @SerializedName(SERIALIZED_NAME_E_RAKTOSH_ID)
  @javax.annotation.Nullable
  private String eRaktoshId;

  public static final String SERIALIZED_NAME_BLOOD_BANK_LICENSE_NUMBER = "bloodBankLicenseNumber";
  @SerializedName(SERIALIZED_NAME_BLOOD_BANK_LICENSE_NUMBER)
  @javax.annotation.Nullable
  private String bloodBankLicenseNumber;

  public static final String SERIALIZED_NAME_BLOOD_STORAGE_CENTERS = "bloodStorageCenters";
  @SerializedName(SERIALIZED_NAME_BLOOD_STORAGE_CENTERS)
  @javax.annotation.Nullable
  private String bloodStorageCenters;

  public static final String SERIALIZED_NAME_STORAGE_CENTERS_COUNT = "storageCentersCount";
  @SerializedName(SERIALIZED_NAME_STORAGE_CENTERS_COUNT)
  @javax.annotation.Nullable
  private Integer storageCentersCount;

  public static final String SERIALIZED_NAME_BLOOD_COLLECTED_PER_ANNUM = "bloodCollectedPerAnnum";
  @SerializedName(SERIALIZED_NAME_BLOOD_COLLECTED_PER_ANNUM)
  @javax.annotation.Nullable
  private String bloodCollectedPerAnnum;

  public static final String SERIALIZED_NAME_BLOOD_REQUIRED_PER_ANNUM = "bloodRequiredPerAnnum";
  @SerializedName(SERIALIZED_NAME_BLOOD_REQUIRED_PER_ANNUM)
  @javax.annotation.Nullable
  private String bloodRequiredPerAnnum;

  public FacilityBloodBankDetails() {
  }

  public FacilityBloodBankDetails isFacilityRegisteredInERaktkosh(@javax.annotation.Nullable String isFacilityRegisteredInERaktkosh) {
    this.isFacilityRegisteredInERaktkosh = isFacilityRegisteredInERaktkosh;
    return this;
  }

  /**
   * Get isFacilityRegisteredInERaktkosh
   * @return isFacilityRegisteredInERaktkosh
   */
  @javax.annotation.Nullable
  public String getIsFacilityRegisteredInERaktkosh() {
    return isFacilityRegisteredInERaktkosh;
  }

  public void setIsFacilityRegisteredInERaktkosh(@javax.annotation.Nullable String isFacilityRegisteredInERaktkosh) {
    this.isFacilityRegisteredInERaktkosh = isFacilityRegisteredInERaktkosh;
  }


  public FacilityBloodBankDetails eRaktoshId(@javax.annotation.Nullable String eRaktoshId) {
    this.eRaktoshId = eRaktoshId;
    return this;
  }

  /**
   * Get eRaktoshId
   * @return eRaktoshId
   */
  @javax.annotation.Nullable
  public String geteRaktoshId() {
    return eRaktoshId;
  }

  public void seteRaktoshId(@javax.annotation.Nullable String eRaktoshId) {
    this.eRaktoshId = eRaktoshId;
  }


  public FacilityBloodBankDetails bloodBankLicenseNumber(@javax.annotation.Nullable String bloodBankLicenseNumber) {
    this.bloodBankLicenseNumber = bloodBankLicenseNumber;
    return this;
  }

  /**
   * Get bloodBankLicenseNumber
   * @return bloodBankLicenseNumber
   */
  @javax.annotation.Nullable
  public String getBloodBankLicenseNumber() {
    return bloodBankLicenseNumber;
  }

  public void setBloodBankLicenseNumber(@javax.annotation.Nullable String bloodBankLicenseNumber) {
    this.bloodBankLicenseNumber = bloodBankLicenseNumber;
  }


  public FacilityBloodBankDetails bloodStorageCenters(@javax.annotation.Nullable String bloodStorageCenters) {
    this.bloodStorageCenters = bloodStorageCenters;
    return this;
  }

  /**
   * Get bloodStorageCenters
   * @return bloodStorageCenters
   */
  @javax.annotation.Nullable
  public String getBloodStorageCenters() {
    return bloodStorageCenters;
  }

  public void setBloodStorageCenters(@javax.annotation.Nullable String bloodStorageCenters) {
    this.bloodStorageCenters = bloodStorageCenters;
  }


  public FacilityBloodBankDetails storageCentersCount(@javax.annotation.Nullable Integer storageCentersCount) {
    this.storageCentersCount = storageCentersCount;
    return this;
  }

  /**
   * Get storageCentersCount
   * @return storageCentersCount
   */
  @javax.annotation.Nullable
  public Integer getStorageCentersCount() {
    return storageCentersCount;
  }

  public void setStorageCentersCount(@javax.annotation.Nullable Integer storageCentersCount) {
    this.storageCentersCount = storageCentersCount;
  }


  public FacilityBloodBankDetails bloodCollectedPerAnnum(@javax.annotation.Nullable String bloodCollectedPerAnnum) {
    this.bloodCollectedPerAnnum = bloodCollectedPerAnnum;
    return this;
  }

  /**
   * Get bloodCollectedPerAnnum
   * @return bloodCollectedPerAnnum
   */
  @javax.annotation.Nullable
  public String getBloodCollectedPerAnnum() {
    return bloodCollectedPerAnnum;
  }

  public void setBloodCollectedPerAnnum(@javax.annotation.Nullable String bloodCollectedPerAnnum) {
    this.bloodCollectedPerAnnum = bloodCollectedPerAnnum;
  }


  public FacilityBloodBankDetails bloodRequiredPerAnnum(@javax.annotation.Nullable String bloodRequiredPerAnnum) {
    this.bloodRequiredPerAnnum = bloodRequiredPerAnnum;
    return this;
  }

  /**
   * Get bloodRequiredPerAnnum
   * @return bloodRequiredPerAnnum
   */
  @javax.annotation.Nullable
  public String getBloodRequiredPerAnnum() {
    return bloodRequiredPerAnnum;
  }

  public void setBloodRequiredPerAnnum(@javax.annotation.Nullable String bloodRequiredPerAnnum) {
    this.bloodRequiredPerAnnum = bloodRequiredPerAnnum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityBloodBankDetails facilityBloodBankDetails = (FacilityBloodBankDetails) o;
    return Objects.equals(this.isFacilityRegisteredInERaktkosh, facilityBloodBankDetails.isFacilityRegisteredInERaktkosh) &&
        Objects.equals(this.eRaktoshId, facilityBloodBankDetails.eRaktoshId) &&
        Objects.equals(this.bloodBankLicenseNumber, facilityBloodBankDetails.bloodBankLicenseNumber) &&
        Objects.equals(this.bloodStorageCenters, facilityBloodBankDetails.bloodStorageCenters) &&
        Objects.equals(this.storageCentersCount, facilityBloodBankDetails.storageCentersCount) &&
        Objects.equals(this.bloodCollectedPerAnnum, facilityBloodBankDetails.bloodCollectedPerAnnum) &&
        Objects.equals(this.bloodRequiredPerAnnum, facilityBloodBankDetails.bloodRequiredPerAnnum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isFacilityRegisteredInERaktkosh, eRaktoshId, bloodBankLicenseNumber, bloodStorageCenters, storageCentersCount, bloodCollectedPerAnnum, bloodRequiredPerAnnum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityBloodBankDetails {\n");
    sb.append("    isFacilityRegisteredInERaktkosh: ").append(toIndentedString(isFacilityRegisteredInERaktkosh)).append("\n");
    sb.append("    eRaktoshId: ").append(toIndentedString(eRaktoshId)).append("\n");
    sb.append("    bloodBankLicenseNumber: ").append(toIndentedString(bloodBankLicenseNumber)).append("\n");
    sb.append("    bloodStorageCenters: ").append(toIndentedString(bloodStorageCenters)).append("\n");
    sb.append("    storageCentersCount: ").append(toIndentedString(storageCentersCount)).append("\n");
    sb.append("    bloodCollectedPerAnnum: ").append(toIndentedString(bloodCollectedPerAnnum)).append("\n");
    sb.append("    bloodRequiredPerAnnum: ").append(toIndentedString(bloodRequiredPerAnnum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isFacilityRegisteredInERaktkosh");
    openapiFields.add("eRaktoshId");
    openapiFields.add("bloodBankLicenseNumber");
    openapiFields.add("bloodStorageCenters");
    openapiFields.add("storageCentersCount");
    openapiFields.add("bloodCollectedPerAnnum");
    openapiFields.add("bloodRequiredPerAnnum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityBloodBankDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityBloodBankDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityBloodBankDetails is not found in the empty JSON string", FacilityBloodBankDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityBloodBankDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityBloodBankDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("isFacilityRegisteredInERaktkosh") != null && !jsonObj.get("isFacilityRegisteredInERaktkosh").isJsonNull()) && !jsonObj.get("isFacilityRegisteredInERaktkosh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isFacilityRegisteredInERaktkosh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isFacilityRegisteredInERaktkosh").toString()));
      }
      if ((jsonObj.get("eRaktoshId") != null && !jsonObj.get("eRaktoshId").isJsonNull()) && !jsonObj.get("eRaktoshId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eRaktoshId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eRaktoshId").toString()));
      }
      if ((jsonObj.get("bloodBankLicenseNumber") != null && !jsonObj.get("bloodBankLicenseNumber").isJsonNull()) && !jsonObj.get("bloodBankLicenseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bloodBankLicenseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bloodBankLicenseNumber").toString()));
      }
      if ((jsonObj.get("bloodStorageCenters") != null && !jsonObj.get("bloodStorageCenters").isJsonNull()) && !jsonObj.get("bloodStorageCenters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bloodStorageCenters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bloodStorageCenters").toString()));
      }
      if ((jsonObj.get("bloodCollectedPerAnnum") != null && !jsonObj.get("bloodCollectedPerAnnum").isJsonNull()) && !jsonObj.get("bloodCollectedPerAnnum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bloodCollectedPerAnnum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bloodCollectedPerAnnum").toString()));
      }
      if ((jsonObj.get("bloodRequiredPerAnnum") != null && !jsonObj.get("bloodRequiredPerAnnum").isJsonNull()) && !jsonObj.get("bloodRequiredPerAnnum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bloodRequiredPerAnnum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bloodRequiredPerAnnum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityBloodBankDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityBloodBankDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityBloodBankDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityBloodBankDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityBloodBankDetails>() {
           @Override
           public void write(JsonWriter out, FacilityBloodBankDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityBloodBankDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityBloodBankDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityBloodBankDetails
   * @throws IOException if the JSON string is invalid with respect to FacilityBloodBankDetails
   */
  public static FacilityBloodBankDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityBloodBankDetails.class);
  }

  /**
   * Convert an instance of FacilityBloodBankDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

