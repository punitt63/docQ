/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * AbdmConsentManagement12Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement12Request {
  public static final String SERIALIZED_NAME_IS_APPLICABLE_FOR_ALL_H_I_PS = "isApplicableForAllHIPs";
  @SerializedName(SERIALIZED_NAME_IS_APPLICABLE_FOR_ALL_H_I_PS)
  @javax.annotation.Nonnull
  private Boolean isApplicableForAllHIPs;

  public static final String SERIALIZED_NAME_HIU = "hiu";
  @SerializedName(SERIALIZED_NAME_HIU)
  @javax.annotation.Nonnull
  private AbdmConsentManagement12RequestHiu hiu;

  public static final String SERIALIZED_NAME_INCLUDED_SOURCES = "includedSources";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SOURCES)
  @javax.annotation.Nonnull
  private List<AbdmConsentManagement12RequestIncludedSourcesInner> includedSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_SOURCES = "excludedSources";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_SOURCES)
  @javax.annotation.Nullable
  private List<AbdmConsentManagement12RequestExcludedSourcesInner> excludedSources = new ArrayList<>();

  public AbdmConsentManagement12Request() {
  }

  public AbdmConsentManagement12Request isApplicableForAllHIPs(@javax.annotation.Nonnull Boolean isApplicableForAllHIPs) {
    this.isApplicableForAllHIPs = isApplicableForAllHIPs;
    return this;
  }

  /**
   * A boolean value to denote if the policy is applicable to all the HIPs or only the specified HIP
   * @return isApplicableForAllHIPs
   */
  @javax.annotation.Nonnull
  public Boolean getIsApplicableForAllHIPs() {
    return isApplicableForAllHIPs;
  }

  public void setIsApplicableForAllHIPs(@javax.annotation.Nonnull Boolean isApplicableForAllHIPs) {
    this.isApplicableForAllHIPs = isApplicableForAllHIPs;
  }


  public AbdmConsentManagement12Request hiu(@javax.annotation.Nonnull AbdmConsentManagement12RequestHiu hiu) {
    this.hiu = hiu;
    return this;
  }

  /**
   * Get hiu
   * @return hiu
   */
  @javax.annotation.Nonnull
  public AbdmConsentManagement12RequestHiu getHiu() {
    return hiu;
  }

  public void setHiu(@javax.annotation.Nonnull AbdmConsentManagement12RequestHiu hiu) {
    this.hiu = hiu;
  }


  public AbdmConsentManagement12Request includedSources(@javax.annotation.Nonnull List<AbdmConsentManagement12RequestIncludedSourcesInner> includedSources) {
    this.includedSources = includedSources;
    return this;
  }

  public AbdmConsentManagement12Request addIncludedSourcesItem(AbdmConsentManagement12RequestIncludedSourcesInner includedSourcesItem) {
    if (this.includedSources == null) {
      this.includedSources = new ArrayList<>();
    }
    this.includedSources.add(includedSourcesItem);
    return this;
  }

  /**
   * Get includedSources
   * @return includedSources
   */
  @javax.annotation.Nonnull
  public List<AbdmConsentManagement12RequestIncludedSourcesInner> getIncludedSources() {
    return includedSources;
  }

  public void setIncludedSources(@javax.annotation.Nonnull List<AbdmConsentManagement12RequestIncludedSourcesInner> includedSources) {
    this.includedSources = includedSources;
  }


  public AbdmConsentManagement12Request excludedSources(@javax.annotation.Nullable List<AbdmConsentManagement12RequestExcludedSourcesInner> excludedSources) {
    this.excludedSources = excludedSources;
    return this;
  }

  public AbdmConsentManagement12Request addExcludedSourcesItem(AbdmConsentManagement12RequestExcludedSourcesInner excludedSourcesItem) {
    if (this.excludedSources == null) {
      this.excludedSources = new ArrayList<>();
    }
    this.excludedSources.add(excludedSourcesItem);
    return this;
  }

  /**
   * Get excludedSources
   * @return excludedSources
   */
  @javax.annotation.Nullable
  public List<AbdmConsentManagement12RequestExcludedSourcesInner> getExcludedSources() {
    return excludedSources;
  }

  public void setExcludedSources(@javax.annotation.Nullable List<AbdmConsentManagement12RequestExcludedSourcesInner> excludedSources) {
    this.excludedSources = excludedSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement12Request abdmConsentManagement12Request = (AbdmConsentManagement12Request) o;
    return Objects.equals(this.isApplicableForAllHIPs, abdmConsentManagement12Request.isApplicableForAllHIPs) &&
        Objects.equals(this.hiu, abdmConsentManagement12Request.hiu) &&
        Objects.equals(this.includedSources, abdmConsentManagement12Request.includedSources) &&
        Objects.equals(this.excludedSources, abdmConsentManagement12Request.excludedSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isApplicableForAllHIPs, hiu, includedSources, excludedSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement12Request {\n");
    sb.append("    isApplicableForAllHIPs: ").append(toIndentedString(isApplicableForAllHIPs)).append("\n");
    sb.append("    hiu: ").append(toIndentedString(hiu)).append("\n");
    sb.append("    includedSources: ").append(toIndentedString(includedSources)).append("\n");
    sb.append("    excludedSources: ").append(toIndentedString(excludedSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isApplicableForAllHIPs");
    openapiFields.add("hiu");
    openapiFields.add("includedSources");
    openapiFields.add("excludedSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isApplicableForAllHIPs");
    openapiRequiredFields.add("hiu");
    openapiRequiredFields.add("includedSources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement12Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement12Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement12Request is not found in the empty JSON string", AbdmConsentManagement12Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement12Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement12Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement12Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `hiu`
      AbdmConsentManagement12RequestHiu.validateJsonElement(jsonObj.get("hiu"));
      // ensure the json data is an array
      if (!jsonObj.get("includedSources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedSources` to be an array in the JSON string but got `%s`", jsonObj.get("includedSources").toString()));
      }

      JsonArray jsonArrayincludedSources = jsonObj.getAsJsonArray("includedSources");
      // validate the required field `includedSources` (array)
      for (int i = 0; i < jsonArrayincludedSources.size(); i++) {
        AbdmConsentManagement12RequestIncludedSourcesInner.validateJsonElement(jsonArrayincludedSources.get(i));
      };
      if (jsonObj.get("excludedSources") != null && !jsonObj.get("excludedSources").isJsonNull()) {
        JsonArray jsonArrayexcludedSources = jsonObj.getAsJsonArray("excludedSources");
        if (jsonArrayexcludedSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedSources` to be an array in the JSON string but got `%s`", jsonObj.get("excludedSources").toString()));
          }

          // validate the optional field `excludedSources` (array)
          for (int i = 0; i < jsonArrayexcludedSources.size(); i++) {
            AbdmConsentManagement12RequestExcludedSourcesInner.validateJsonElement(jsonArrayexcludedSources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement12Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement12Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement12Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement12Request.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement12Request>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement12Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement12Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement12Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement12Request
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement12Request
   */
  public static AbdmConsentManagement12Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement12Request.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement12Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

