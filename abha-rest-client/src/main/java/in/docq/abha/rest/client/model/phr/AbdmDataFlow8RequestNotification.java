/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AbdmDataFlow8RequestNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmDataFlow8RequestNotification {
  public static final String SERIALIZED_NAME_CONSENT_ID = "consentId";
  @SerializedName(SERIALIZED_NAME_CONSENT_ID)
  @javax.annotation.Nonnull
  private String consentId;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nonnull
  private String transactionId;

  public static final String SERIALIZED_NAME_DONE_AT = "doneAt";
  @SerializedName(SERIALIZED_NAME_DONE_AT)
  @javax.annotation.Nonnull
  private String doneAt;

  public static final String SERIALIZED_NAME_NOTIFIER = "notifier";
  @SerializedName(SERIALIZED_NAME_NOTIFIER)
  @javax.annotation.Nonnull
  private AbdmDataFlow8RequestNotificationNotifier notifier;

  public static final String SERIALIZED_NAME_STATUS_NOTIFICATION = "statusNotification";
  @SerializedName(SERIALIZED_NAME_STATUS_NOTIFICATION)
  @javax.annotation.Nonnull
  private AbdmDataFlow8RequestNotificationStatusNotification statusNotification;

  public AbdmDataFlow8RequestNotification() {
  }

  public AbdmDataFlow8RequestNotification consentId(@javax.annotation.Nonnull String consentId) {
    this.consentId = consentId;
    return this;
  }

  /**
   * The consent artefact id with which health information was requested.Allows alpha numeric character and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;:/]{0,255}$\&quot;
   * @return consentId
   */
  @javax.annotation.Nonnull
  public String getConsentId() {
    return consentId;
  }

  public void setConsentId(@javax.annotation.Nonnull String consentId) {
    this.consentId = consentId;
  }


  public AbdmDataFlow8RequestNotification transactionId(@javax.annotation.Nonnull String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The UUID generated when the health information request was initiated.Allows alpha numeric character and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;:/]{0,255}$\&quot;
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nonnull String transactionId) {
    this.transactionId = transactionId;
  }


  public AbdmDataFlow8RequestNotification doneAt(@javax.annotation.Nonnull String doneAt) {
    this.doneAt = doneAt;
    return this;
  }

  /**
   * The date at which the transaction was initiated. Should be a UTC date time in ISO format. Allows alpha numeric character and special characters like \&quot;\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}.\\\\d{3}Z$\&quot;
   * @return doneAt
   */
  @javax.annotation.Nonnull
  public String getDoneAt() {
    return doneAt;
  }

  public void setDoneAt(@javax.annotation.Nonnull String doneAt) {
    this.doneAt = doneAt;
  }


  public AbdmDataFlow8RequestNotification notifier(@javax.annotation.Nonnull AbdmDataFlow8RequestNotificationNotifier notifier) {
    this.notifier = notifier;
    return this;
  }

  /**
   * Get notifier
   * @return notifier
   */
  @javax.annotation.Nonnull
  public AbdmDataFlow8RequestNotificationNotifier getNotifier() {
    return notifier;
  }

  public void setNotifier(@javax.annotation.Nonnull AbdmDataFlow8RequestNotificationNotifier notifier) {
    this.notifier = notifier;
  }


  public AbdmDataFlow8RequestNotification statusNotification(@javax.annotation.Nonnull AbdmDataFlow8RequestNotificationStatusNotification statusNotification) {
    this.statusNotification = statusNotification;
    return this;
  }

  /**
   * Get statusNotification
   * @return statusNotification
   */
  @javax.annotation.Nonnull
  public AbdmDataFlow8RequestNotificationStatusNotification getStatusNotification() {
    return statusNotification;
  }

  public void setStatusNotification(@javax.annotation.Nonnull AbdmDataFlow8RequestNotificationStatusNotification statusNotification) {
    this.statusNotification = statusNotification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmDataFlow8RequestNotification abdmDataFlow8RequestNotification = (AbdmDataFlow8RequestNotification) o;
    return Objects.equals(this.consentId, abdmDataFlow8RequestNotification.consentId) &&
        Objects.equals(this.transactionId, abdmDataFlow8RequestNotification.transactionId) &&
        Objects.equals(this.doneAt, abdmDataFlow8RequestNotification.doneAt) &&
        Objects.equals(this.notifier, abdmDataFlow8RequestNotification.notifier) &&
        Objects.equals(this.statusNotification, abdmDataFlow8RequestNotification.statusNotification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentId, transactionId, doneAt, notifier, statusNotification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmDataFlow8RequestNotification {\n");
    sb.append("    consentId: ").append(toIndentedString(consentId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    doneAt: ").append(toIndentedString(doneAt)).append("\n");
    sb.append("    notifier: ").append(toIndentedString(notifier)).append("\n");
    sb.append("    statusNotification: ").append(toIndentedString(statusNotification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentId");
    openapiFields.add("transactionId");
    openapiFields.add("doneAt");
    openapiFields.add("notifier");
    openapiFields.add("statusNotification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consentId");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("doneAt");
    openapiRequiredFields.add("notifier");
    openapiRequiredFields.add("statusNotification");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmDataFlow8RequestNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmDataFlow8RequestNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmDataFlow8RequestNotification is not found in the empty JSON string", AbdmDataFlow8RequestNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmDataFlow8RequestNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmDataFlow8RequestNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmDataFlow8RequestNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("consentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentId").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("doneAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doneAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doneAt").toString()));
      }
      // validate the required field `notifier`
      AbdmDataFlow8RequestNotificationNotifier.validateJsonElement(jsonObj.get("notifier"));
      // validate the required field `statusNotification`
      AbdmDataFlow8RequestNotificationStatusNotification.validateJsonElement(jsonObj.get("statusNotification"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmDataFlow8RequestNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmDataFlow8RequestNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmDataFlow8RequestNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmDataFlow8RequestNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmDataFlow8RequestNotification>() {
           @Override
           public void write(JsonWriter out, AbdmDataFlow8RequestNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmDataFlow8RequestNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmDataFlow8RequestNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmDataFlow8RequestNotification
   * @throws IOException if the JSON string is invalid with respect to AbdmDataFlow8RequestNotification
   */
  public static AbdmDataFlow8RequestNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmDataFlow8RequestNotification.class);
  }

  /**
   * Convert an instance of AbdmDataFlow8RequestNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

