/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnboardingApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnboardingApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnboardingApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v15FacilityAdditionalInformationUsingPOST
     * @param authorization Authorization (required)
     * @param body body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15FacilityAdditionalInformationUsingPOSTCall(String authorization, FacilityAdditionalInformationRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1.5/facility/additional-information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v15FacilityAdditionalInformationUsingPOSTValidateBeforeCall(String authorization, FacilityAdditionalInformationRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v15FacilityAdditionalInformationUsingPOST(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v15FacilityAdditionalInformationUsingPOST(Async)");
        }

        return v15FacilityAdditionalInformationUsingPOSTCall(authorization, body, _callback);

    }

    /**
     * Additional Facility Information
     * 
     * @param authorization Authorization (required)
     * @param body body (required)
     * @return FacilityOnboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public FacilityOnboardResponse v15FacilityAdditionalInformationUsingPOST(String authorization, FacilityAdditionalInformationRequest body) throws ApiException {
        ApiResponse<FacilityOnboardResponse> localVarResp = v15FacilityAdditionalInformationUsingPOSTWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Additional Facility Information
     * 
     * @param authorization Authorization (required)
     * @param body body (required)
     * @return ApiResponse&lt;FacilityOnboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacilityOnboardResponse> v15FacilityAdditionalInformationUsingPOSTWithHttpInfo(String authorization, FacilityAdditionalInformationRequest body) throws ApiException {
        okhttp3.Call localVarCall = v15FacilityAdditionalInformationUsingPOSTValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<FacilityOnboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Additional Facility Information (asynchronously)
     * 
     * @param authorization Authorization (required)
     * @param body body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15FacilityAdditionalInformationUsingPOSTAsync(String authorization, FacilityAdditionalInformationRequest body, final ApiCallback<FacilityOnboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v15FacilityAdditionalInformationUsingPOSTValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<FacilityOnboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v15FacilityBasicInformationUsingPOST
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15FacilityBasicInformationUsingPOSTCall(String authorization, String xHpridAuth, FacilityBasicInformationRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1.5/facility/basic-information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xHpridAuth != null) {
            localVarHeaderParams.put("x-hprid-auth", localVarApiClient.parameterToString(xHpridAuth));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v15FacilityBasicInformationUsingPOSTValidateBeforeCall(String authorization, String xHpridAuth, FacilityBasicInformationRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v15FacilityBasicInformationUsingPOST(Async)");
        }

        // verify the required parameter 'xHpridAuth' is set
        if (xHpridAuth == null) {
            throw new ApiException("Missing the required parameter 'xHpridAuth' when calling v15FacilityBasicInformationUsingPOST(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v15FacilityBasicInformationUsingPOST(Async)");
        }

        return v15FacilityBasicInformationUsingPOSTCall(authorization, xHpridAuth, body, _callback);

    }

    /**
     * Basic Facility Information
     * 
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @return FacilityOnboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public FacilityOnboardResponse v15FacilityBasicInformationUsingPOST(String authorization, String xHpridAuth, FacilityBasicInformationRequest body) throws ApiException {
        ApiResponse<FacilityOnboardResponse> localVarResp = v15FacilityBasicInformationUsingPOSTWithHttpInfo(authorization, xHpridAuth, body);
        return localVarResp.getData();
    }

    /**
     * Basic Facility Information
     * 
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @return ApiResponse&lt;FacilityOnboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacilityOnboardResponse> v15FacilityBasicInformationUsingPOSTWithHttpInfo(String authorization, String xHpridAuth, FacilityBasicInformationRequest body) throws ApiException {
        okhttp3.Call localVarCall = v15FacilityBasicInformationUsingPOSTValidateBeforeCall(authorization, xHpridAuth, body, null);
        Type localVarReturnType = new TypeToken<FacilityOnboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Basic Facility Information (asynchronously)
     * 
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15FacilityBasicInformationUsingPOSTAsync(String authorization, String xHpridAuth, FacilityBasicInformationRequest body, final ApiCallback<FacilityOnboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v15FacilityBasicInformationUsingPOSTValidateBeforeCall(authorization, xHpridAuth, body, _callback);
        Type localVarReturnType = new TypeToken<FacilityOnboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v15FacilityDetailedInformationUsingPOST
     * @param authorization Authorization (required)
     * @param body body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15FacilityDetailedInformationUsingPOSTCall(String authorization, FacilityDetailedInformationRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1.5/facility/detailed-information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v15FacilityDetailedInformationUsingPOSTValidateBeforeCall(String authorization, FacilityDetailedInformationRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v15FacilityDetailedInformationUsingPOST(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v15FacilityDetailedInformationUsingPOST(Async)");
        }

        return v15FacilityDetailedInformationUsingPOSTCall(authorization, body, _callback);

    }

    /**
     * Detailed Facility Information
     * 
     * @param authorization Authorization (required)
     * @param body body (required)
     * @return FacilityOnboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public FacilityOnboardResponse v15FacilityDetailedInformationUsingPOST(String authorization, FacilityDetailedInformationRequest body) throws ApiException {
        ApiResponse<FacilityOnboardResponse> localVarResp = v15FacilityDetailedInformationUsingPOSTWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Detailed Facility Information
     * 
     * @param authorization Authorization (required)
     * @param body body (required)
     * @return ApiResponse&lt;FacilityOnboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacilityOnboardResponse> v15FacilityDetailedInformationUsingPOSTWithHttpInfo(String authorization, FacilityDetailedInformationRequest body) throws ApiException {
        okhttp3.Call localVarCall = v15FacilityDetailedInformationUsingPOSTValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<FacilityOnboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detailed Facility Information (asynchronously)
     * 
     * @param authorization Authorization (required)
     * @param body body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15FacilityDetailedInformationUsingPOSTAsync(String authorization, FacilityDetailedInformationRequest body, final ApiCallback<FacilityOnboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v15FacilityDetailedInformationUsingPOSTValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<FacilityOnboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v15SubmitFacilityDetailsUsingPOST
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @param xHpridAuthVerifier x-hprid-auth-verifier (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15SubmitFacilityDetailsUsingPOSTCall(String authorization, String xHpridAuth, FacilitySubmitDetails body, String xHpridAuthVerifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1.5/facility/submit-facility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xHpridAuth != null) {
            localVarHeaderParams.put("x-hprid-auth", localVarApiClient.parameterToString(xHpridAuth));
        }


        if (xHpridAuthVerifier != null) {
            localVarHeaderParams.put("x-hprid-auth-verifier", localVarApiClient.parameterToString(xHpridAuthVerifier));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v15SubmitFacilityDetailsUsingPOSTValidateBeforeCall(String authorization, String xHpridAuth, FacilitySubmitDetails body, String xHpridAuthVerifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v15SubmitFacilityDetailsUsingPOST(Async)");
        }

        // verify the required parameter 'xHpridAuth' is set
        if (xHpridAuth == null) {
            throw new ApiException("Missing the required parameter 'xHpridAuth' when calling v15SubmitFacilityDetailsUsingPOST(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v15SubmitFacilityDetailsUsingPOST(Async)");
        }

        return v15SubmitFacilityDetailsUsingPOSTCall(authorization, xHpridAuth, body, xHpridAuthVerifier, _callback);

    }

    /**
     * Submit Facility Details
     * 
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @param xHpridAuthVerifier x-hprid-auth-verifier (optional)
     * @return FacilitySubmitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public FacilitySubmitResponse v15SubmitFacilityDetailsUsingPOST(String authorization, String xHpridAuth, FacilitySubmitDetails body, String xHpridAuthVerifier) throws ApiException {
        ApiResponse<FacilitySubmitResponse> localVarResp = v15SubmitFacilityDetailsUsingPOSTWithHttpInfo(authorization, xHpridAuth, body, xHpridAuthVerifier);
        return localVarResp.getData();
    }

    /**
     * Submit Facility Details
     * 
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @param xHpridAuthVerifier x-hprid-auth-verifier (optional)
     * @return ApiResponse&lt;FacilitySubmitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacilitySubmitResponse> v15SubmitFacilityDetailsUsingPOSTWithHttpInfo(String authorization, String xHpridAuth, FacilitySubmitDetails body, String xHpridAuthVerifier) throws ApiException {
        okhttp3.Call localVarCall = v15SubmitFacilityDetailsUsingPOSTValidateBeforeCall(authorization, xHpridAuth, body, xHpridAuthVerifier, null);
        Type localVarReturnType = new TypeToken<FacilitySubmitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Facility Details (asynchronously)
     * 
     * @param authorization Authorization (required)
     * @param xHpridAuth x-hprid-auth (required)
     * @param body body (required)
     * @param xHpridAuthVerifier x-hprid-auth-verifier (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v15SubmitFacilityDetailsUsingPOSTAsync(String authorization, String xHpridAuth, FacilitySubmitDetails body, String xHpridAuthVerifier, final ApiCallback<FacilitySubmitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v15SubmitFacilityDetailsUsingPOSTValidateBeforeCall(authorization, xHpridAuth, body, xHpridAuthVerifier, _callback);
        Type localVarReturnType = new TypeToken<FacilitySubmitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
