/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;;

import java.io.IOException;
import java.util.*;

/**
 * FacilityUwinResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityUwinResponse {
  public static final String SERIALIZED_NAME_FACILITY = "facility";
  @SerializedName(SERIALIZED_NAME_FACILITY)
  @javax.annotation.Nullable
  private FacilityId facility;

  public static final String SERIALIZED_NAME_OTHER_INFORMATION = "otherInformation";
  @SerializedName(SERIALIZED_NAME_OTHER_INFORMATION)
  @javax.annotation.Nullable
  private OtherInfo otherInformation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_ERROR_STATUS = "errorStatus";
  @SerializedName(SERIALIZED_NAME_ERROR_STATUS)
  @javax.annotation.Nullable
  private List<ErrorStatus> errorStatus = new ArrayList<>();

  public FacilityUwinResponse() {
  }

  public FacilityUwinResponse facility(@javax.annotation.Nullable FacilityId facility) {
    this.facility = facility;
    return this;
  }

  /**
   * Get facility
   * @return facility
   */
  @javax.annotation.Nullable
  public FacilityId getFacility() {
    return facility;
  }

  public void setFacility(@javax.annotation.Nullable FacilityId facility) {
    this.facility = facility;
  }


  public FacilityUwinResponse otherInformation(@javax.annotation.Nullable OtherInfo otherInformation) {
    this.otherInformation = otherInformation;
    return this;
  }

  /**
   * Get otherInformation
   * @return otherInformation
   */
  @javax.annotation.Nullable
  public OtherInfo getOtherInformation() {
    return otherInformation;
  }

  public void setOtherInformation(@javax.annotation.Nullable OtherInfo otherInformation) {
    this.otherInformation = otherInformation;
  }


  public FacilityUwinResponse status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public FacilityUwinResponse message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public FacilityUwinResponse errorStatus(@javax.annotation.Nullable List<ErrorStatus> errorStatus) {
    this.errorStatus = errorStatus;
    return this;
  }

  public FacilityUwinResponse addErrorStatusItem(ErrorStatus errorStatusItem) {
    if (this.errorStatus == null) {
      this.errorStatus = new ArrayList<>();
    }
    this.errorStatus.add(errorStatusItem);
    return this;
  }

  /**
   * Get errorStatus
   * @return errorStatus
   */
  @javax.annotation.Nullable
  public List<ErrorStatus> getErrorStatus() {
    return errorStatus;
  }

  public void setErrorStatus(@javax.annotation.Nullable List<ErrorStatus> errorStatus) {
    this.errorStatus = errorStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityUwinResponse facilityUwinResponse = (FacilityUwinResponse) o;
    return Objects.equals(this.facility, facilityUwinResponse.facility) &&
        Objects.equals(this.otherInformation, facilityUwinResponse.otherInformation) &&
        Objects.equals(this.status, facilityUwinResponse.status) &&
        Objects.equals(this.message, facilityUwinResponse.message) &&
        Objects.equals(this.errorStatus, facilityUwinResponse.errorStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facility, otherInformation, status, message, errorStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityUwinResponse {\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    otherInformation: ").append(toIndentedString(otherInformation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    errorStatus: ").append(toIndentedString(errorStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facility");
    openapiFields.add("otherInformation");
    openapiFields.add("status");
    openapiFields.add("message");
    openapiFields.add("errorStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityUwinResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityUwinResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityUwinResponse is not found in the empty JSON string", FacilityUwinResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityUwinResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityUwinResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `facility`
      if (jsonObj.get("facility") != null && !jsonObj.get("facility").isJsonNull()) {
        FacilityId.validateJsonElement(jsonObj.get("facility"));
      }
      // validate the optional field `otherInformation`
      if (jsonObj.get("otherInformation") != null && !jsonObj.get("otherInformation").isJsonNull()) {
        OtherInfo.validateJsonElement(jsonObj.get("otherInformation"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("errorStatus") != null && !jsonObj.get("errorStatus").isJsonNull()) {
        JsonArray jsonArrayerrorStatus = jsonObj.getAsJsonArray("errorStatus");
        if (jsonArrayerrorStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorStatus` to be an array in the JSON string but got `%s`", jsonObj.get("errorStatus").toString()));
          }

          // validate the optional field `errorStatus` (array)
          for (int i = 0; i < jsonArrayerrorStatus.size(); i++) {
            ErrorStatus.validateJsonElement(jsonArrayerrorStatus.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityUwinResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityUwinResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityUwinResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityUwinResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityUwinResponse>() {
           @Override
           public void write(JsonWriter out, FacilityUwinResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityUwinResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityUwinResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityUwinResponse
   * @throws IOException if the JSON string is invalid with respect to FacilityUwinResponse
   */
  public static FacilityUwinResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityUwinResponse.class);
  }

  /**
   * Convert an instance of FacilityUwinResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

