/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Health information created between this date range is requested
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmDataFlow7RequestHiRequestDateRange {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nonnull
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private OffsetDateTime to;

  public AbdmDataFlow7RequestHiRequestDateRange() {
  }

  public AbdmDataFlow7RequestHiRequestDateRange from(@javax.annotation.Nonnull OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Should be a UTC date time in ISO Format.Allows alpha numeric character and special characters like ^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}.\\\\d{3}Z$
   * @return from
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nonnull OffsetDateTime from) {
    this.from = from;
  }


  public AbdmDataFlow7RequestHiRequestDateRange to(@javax.annotation.Nonnull OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * Should be a UTC date time in ISO Format.Allows alpha numeric character and special characters like ^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}.\\\\d{3}Z$
   * @return to
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull OffsetDateTime to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmDataFlow7RequestHiRequestDateRange abdmDataFlow7RequestHiRequestDateRange = (AbdmDataFlow7RequestHiRequestDateRange) o;
    return Objects.equals(this.from, abdmDataFlow7RequestHiRequestDateRange.from) &&
        Objects.equals(this.to, abdmDataFlow7RequestHiRequestDateRange.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmDataFlow7RequestHiRequestDateRange {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmDataFlow7RequestHiRequestDateRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmDataFlow7RequestHiRequestDateRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmDataFlow7RequestHiRequestDateRange is not found in the empty JSON string", AbdmDataFlow7RequestHiRequestDateRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmDataFlow7RequestHiRequestDateRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmDataFlow7RequestHiRequestDateRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmDataFlow7RequestHiRequestDateRange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmDataFlow7RequestHiRequestDateRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmDataFlow7RequestHiRequestDateRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmDataFlow7RequestHiRequestDateRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmDataFlow7RequestHiRequestDateRange.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmDataFlow7RequestHiRequestDateRange>() {
           @Override
           public void write(JsonWriter out, AbdmDataFlow7RequestHiRequestDateRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmDataFlow7RequestHiRequestDateRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmDataFlow7RequestHiRequestDateRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmDataFlow7RequestHiRequestDateRange
   * @throws IOException if the JSON string is invalid with respect to AbdmDataFlow7RequestHiRequestDateRange
   */
  public static AbdmDataFlow7RequestHiRequestDateRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmDataFlow7RequestHiRequestDateRange.class);
  }

  /**
   * Convert an instance of AbdmDataFlow7RequestHiRequestDateRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

