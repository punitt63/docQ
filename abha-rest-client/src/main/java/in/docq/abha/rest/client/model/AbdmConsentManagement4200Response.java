/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * AbdmConsentManagement4200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement4200Response {
  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  @javax.annotation.Nullable
  private String requestId;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  @javax.annotation.Nullable
  private AbdmConsentManagement4200ResponsePurpose purpose;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  @javax.annotation.Nullable
  private AbdmConsentManagement4200ResponsePatient patient;

  public static final String SERIALIZED_NAME_HIP = "hip";
  @SerializedName(SERIALIZED_NAME_HIP)
  @javax.annotation.Nullable
  private AbdmConsentManagement4200ResponseHip hip;

  public static final String SERIALIZED_NAME_HIU = "hiu";
  @SerializedName(SERIALIZED_NAME_HIU)
  @javax.annotation.Nullable
  private AbdmConsentManagement4200ResponseHiu hiu;

  public static final String SERIALIZED_NAME_CARE_CONTEXTS = "careContexts";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXTS)
  @javax.annotation.Nullable
  private List<AbdmConsentManagement4200ResponseCareContextsInner> careContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  @javax.annotation.Nullable
  private AbdmConsentManagement4200ResponseRequester requester;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    REQUESTED("REQUESTED"),
    
    EXPIRED("EXPIRED"),
    
    DENIED("DENIED"),
    
    GRANTED("GRANTED"),
    
    REVOKED("REVOKED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdated;

  /**
   * Gets or Sets hiType
   */
  @JsonAdapter(HiTypeEnum.Adapter.class)
  public enum HiTypeEnum {
    PRESCRIPTION("Prescription"),
    
    DIAGNOSTIC_REPORT("DiagnosticReport"),
    
    OP_CONSULTATION("OPConsultation"),
    
    DISCHARGE_SUMMARY("DischargeSummary"),
    
    IMMUNIZATION_RECORD("ImmunizationRecord"),
    
    HEALTH_DOCUMENT_RECORD("HealthDocumentRecord"),
    
    WELLNESS_RECORD("WellnessRecord"),
    
    INVOICE("Invoice");

    private String value;

    HiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HiTypeEnum fromValue(String value) {
      for (HiTypeEnum b : HiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HI_TYPE = "hiType";
  @SerializedName(SERIALIZED_NAME_HI_TYPE)
  @javax.annotation.Nullable
  private List<HiTypeEnum> hiType = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  @javax.annotation.Nullable
  private AbdmConsentManagement4200ResponsePermission permission;

  public AbdmConsentManagement4200Response() {
  }

  public AbdmConsentManagement4200Response requestId(@javax.annotation.Nullable String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(@javax.annotation.Nullable String requestId) {
    this.requestId = requestId;
  }


  public AbdmConsentManagement4200Response purpose(@javax.annotation.Nullable AbdmConsentManagement4200ResponsePurpose purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement4200ResponsePurpose getPurpose() {
    return purpose;
  }

  public void setPurpose(@javax.annotation.Nullable AbdmConsentManagement4200ResponsePurpose purpose) {
    this.purpose = purpose;
  }


  public AbdmConsentManagement4200Response patient(@javax.annotation.Nullable AbdmConsentManagement4200ResponsePatient patient) {
    this.patient = patient;
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement4200ResponsePatient getPatient() {
    return patient;
  }

  public void setPatient(@javax.annotation.Nullable AbdmConsentManagement4200ResponsePatient patient) {
    this.patient = patient;
  }


  public AbdmConsentManagement4200Response hip(@javax.annotation.Nullable AbdmConsentManagement4200ResponseHip hip) {
    this.hip = hip;
    return this;
  }

  /**
   * Get hip
   * @return hip
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement4200ResponseHip getHip() {
    return hip;
  }

  public void setHip(@javax.annotation.Nullable AbdmConsentManagement4200ResponseHip hip) {
    this.hip = hip;
  }


  public AbdmConsentManagement4200Response hiu(@javax.annotation.Nullable AbdmConsentManagement4200ResponseHiu hiu) {
    this.hiu = hiu;
    return this;
  }

  /**
   * Get hiu
   * @return hiu
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement4200ResponseHiu getHiu() {
    return hiu;
  }

  public void setHiu(@javax.annotation.Nullable AbdmConsentManagement4200ResponseHiu hiu) {
    this.hiu = hiu;
  }


  public AbdmConsentManagement4200Response careContexts(@javax.annotation.Nullable List<AbdmConsentManagement4200ResponseCareContextsInner> careContexts) {
    this.careContexts = careContexts;
    return this;
  }

  public AbdmConsentManagement4200Response addCareContextsItem(AbdmConsentManagement4200ResponseCareContextsInner careContextsItem) {
    if (this.careContexts == null) {
      this.careContexts = new ArrayList<>();
    }
    this.careContexts.add(careContextsItem);
    return this;
  }

  /**
   * Get careContexts
   * @return careContexts
   */
  @javax.annotation.Nullable
  public List<AbdmConsentManagement4200ResponseCareContextsInner> getCareContexts() {
    return careContexts;
  }

  public void setCareContexts(@javax.annotation.Nullable List<AbdmConsentManagement4200ResponseCareContextsInner> careContexts) {
    this.careContexts = careContexts;
  }


  public AbdmConsentManagement4200Response requester(@javax.annotation.Nullable AbdmConsentManagement4200ResponseRequester requester) {
    this.requester = requester;
    return this;
  }

  /**
   * Get requester
   * @return requester
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement4200ResponseRequester getRequester() {
    return requester;
  }

  public void setRequester(@javax.annotation.Nullable AbdmConsentManagement4200ResponseRequester requester) {
    this.requester = requester;
  }


  public AbdmConsentManagement4200Response status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public AbdmConsentManagement4200Response createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AbdmConsentManagement4200Response lastUpdated(@javax.annotation.Nullable OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nullable OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AbdmConsentManagement4200Response hiType(@javax.annotation.Nullable List<HiTypeEnum> hiType) {
    this.hiType = hiType;
    return this;
  }

  public AbdmConsentManagement4200Response addHiTypeItem(HiTypeEnum hiTypeItem) {
    if (this.hiType == null) {
      this.hiType = new ArrayList<>();
    }
    this.hiType.add(hiTypeItem);
    return this;
  }

  /**
   * Get hiType
   * @return hiType
   */
  @javax.annotation.Nullable
  public List<HiTypeEnum> getHiType() {
    return hiType;
  }

  public void setHiType(@javax.annotation.Nullable List<HiTypeEnum> hiType) {
    this.hiType = hiType;
  }


  public AbdmConsentManagement4200Response permission(@javax.annotation.Nullable AbdmConsentManagement4200ResponsePermission permission) {
    this.permission = permission;
    return this;
  }

  /**
   * Get permission
   * @return permission
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement4200ResponsePermission getPermission() {
    return permission;
  }

  public void setPermission(@javax.annotation.Nullable AbdmConsentManagement4200ResponsePermission permission) {
    this.permission = permission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement4200Response abdmConsentManagement4200Response = (AbdmConsentManagement4200Response) o;
    return Objects.equals(this.requestId, abdmConsentManagement4200Response.requestId) &&
        Objects.equals(this.purpose, abdmConsentManagement4200Response.purpose) &&
        Objects.equals(this.patient, abdmConsentManagement4200Response.patient) &&
        Objects.equals(this.hip, abdmConsentManagement4200Response.hip) &&
        Objects.equals(this.hiu, abdmConsentManagement4200Response.hiu) &&
        Objects.equals(this.careContexts, abdmConsentManagement4200Response.careContexts) &&
        Objects.equals(this.requester, abdmConsentManagement4200Response.requester) &&
        Objects.equals(this.status, abdmConsentManagement4200Response.status) &&
        Objects.equals(this.createdAt, abdmConsentManagement4200Response.createdAt) &&
        Objects.equals(this.lastUpdated, abdmConsentManagement4200Response.lastUpdated) &&
        Objects.equals(this.hiType, abdmConsentManagement4200Response.hiType) &&
        Objects.equals(this.permission, abdmConsentManagement4200Response.permission);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, purpose, patient, hip, hiu, careContexts, requester, status, createdAt, lastUpdated, hiType, permission);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement4200Response {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    hip: ").append(toIndentedString(hip)).append("\n");
    sb.append("    hiu: ").append(toIndentedString(hiu)).append("\n");
    sb.append("    careContexts: ").append(toIndentedString(careContexts)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    hiType: ").append(toIndentedString(hiType)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestId");
    openapiFields.add("purpose");
    openapiFields.add("patient");
    openapiFields.add("hip");
    openapiFields.add("hiu");
    openapiFields.add("careContexts");
    openapiFields.add("requester");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("lastUpdated");
    openapiFields.add("hiType");
    openapiFields.add("permission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement4200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement4200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement4200Response is not found in the empty JSON string", AbdmConsentManagement4200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement4200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement4200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the optional field `purpose`
      if (jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) {
        AbdmConsentManagement4200ResponsePurpose.validateJsonElement(jsonObj.get("purpose"));
      }
      // validate the optional field `patient`
      if (jsonObj.get("patient") != null && !jsonObj.get("patient").isJsonNull()) {
        AbdmConsentManagement4200ResponsePatient.validateJsonElement(jsonObj.get("patient"));
      }
      // validate the optional field `hip`
      if (jsonObj.get("hip") != null && !jsonObj.get("hip").isJsonNull()) {
        AbdmConsentManagement4200ResponseHip.validateJsonElement(jsonObj.get("hip"));
      }
      // validate the optional field `hiu`
      if (jsonObj.get("hiu") != null && !jsonObj.get("hiu").isJsonNull()) {
        AbdmConsentManagement4200ResponseHiu.validateJsonElement(jsonObj.get("hiu"));
      }
      if (jsonObj.get("careContexts") != null && !jsonObj.get("careContexts").isJsonNull()) {
        JsonArray jsonArraycareContexts = jsonObj.getAsJsonArray("careContexts");
        if (jsonArraycareContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("careContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `careContexts` to be an array in the JSON string but got `%s`", jsonObj.get("careContexts").toString()));
          }

          // validate the optional field `careContexts` (array)
          for (int i = 0; i < jsonArraycareContexts.size(); i++) {
            AbdmConsentManagement4200ResponseCareContextsInner.validateJsonElement(jsonArraycareContexts.get(i));
          };
        }
      }
      // validate the optional field `requester`
      if (jsonObj.get("requester") != null && !jsonObj.get("requester").isJsonNull()) {
        AbdmConsentManagement4200ResponseRequester.validateJsonElement(jsonObj.get("requester"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hiType") != null && !jsonObj.get("hiType").isJsonNull() && !jsonObj.get("hiType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiType` to be an array in the JSON string but got `%s`", jsonObj.get("hiType").toString()));
      }
      // validate the optional field `permission`
      if (jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) {
        AbdmConsentManagement4200ResponsePermission.validateJsonElement(jsonObj.get("permission"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement4200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement4200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement4200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement4200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement4200Response>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement4200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement4200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement4200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement4200Response
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement4200Response
   */
  public static AbdmConsentManagement4200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement4200Response.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement4200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

