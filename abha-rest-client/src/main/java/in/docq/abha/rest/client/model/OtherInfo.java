/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * OtherInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class OtherInfo {
  public static final String SERIALIZED_NAME_FACILITY_OWNERSHIP = "facilityOwnership";
  @SerializedName(SERIALIZED_NAME_FACILITY_OWNERSHIP)
  @javax.annotation.Nullable
  private String facilityOwnership;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  @javax.annotation.Nullable
  private String stateCode;

  public static final String SERIALIZED_NAME_DISTRICT_CODE = "districtCode";
  @SerializedName(SERIALIZED_NAME_DISTRICT_CODE)
  @javax.annotation.Nullable
  private String districtCode;

  public static final String SERIALIZED_NAME_FACILITY_REGION = "facilityRegion";
  @SerializedName(SERIALIZED_NAME_FACILITY_REGION)
  @javax.annotation.Nullable
  private String facilityRegion;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  @javax.annotation.Nullable
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  @javax.annotation.Nullable
  private String addressLine2;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  @javax.annotation.Nullable
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  @javax.annotation.Nullable
  private String longitude;

  public static final String SERIALIZED_NAME_NIN = "nin";
  @SerializedName(SERIALIZED_NAME_NIN)
  @javax.annotation.Nullable
  private String nin;

  public static final String SERIALIZED_NAME_PINCODE = "pincode";
  @SerializedName(SERIALIZED_NAME_PINCODE)
  @javax.annotation.Nullable
  private String pincode;

  public static final String SERIALIZED_NAME_SUB_DISTRICT = "subDistrict";
  @SerializedName(SERIALIZED_NAME_SUB_DISTRICT)
  @javax.annotation.Nullable
  private String subDistrict;

  public static final String SERIALIZED_NAME_FACILITY_TYPE = "facilityType";
  @SerializedName(SERIALIZED_NAME_FACILITY_TYPE)
  @javax.annotation.Nullable
  private String facilityType;

  public static final String SERIALIZED_NAME_OWNER_SUBTYPE = "ownerSubtype";
  @SerializedName(SERIALIZED_NAME_OWNER_SUBTYPE)
  @javax.annotation.Nullable
  private String ownerSubtype;

  public OtherInfo() {
  }

  public OtherInfo facilityOwnership(@javax.annotation.Nullable String facilityOwnership) {
    this.facilityOwnership = facilityOwnership;
    return this;
  }

  /**
   * Get facilityOwnership
   * @return facilityOwnership
   */
  @javax.annotation.Nullable
  public String getFacilityOwnership() {
    return facilityOwnership;
  }

  public void setFacilityOwnership(@javax.annotation.Nullable String facilityOwnership) {
    this.facilityOwnership = facilityOwnership;
  }


  public OtherInfo stateCode(@javax.annotation.Nullable String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * Get stateCode
   * @return stateCode
   */
  @javax.annotation.Nullable
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(@javax.annotation.Nullable String stateCode) {
    this.stateCode = stateCode;
  }


  public OtherInfo districtCode(@javax.annotation.Nullable String districtCode) {
    this.districtCode = districtCode;
    return this;
  }

  /**
   * Get districtCode
   * @return districtCode
   */
  @javax.annotation.Nullable
  public String getDistrictCode() {
    return districtCode;
  }

  public void setDistrictCode(@javax.annotation.Nullable String districtCode) {
    this.districtCode = districtCode;
  }


  public OtherInfo facilityRegion(@javax.annotation.Nullable String facilityRegion) {
    this.facilityRegion = facilityRegion;
    return this;
  }

  /**
   * Get facilityRegion
   * @return facilityRegion
   */
  @javax.annotation.Nullable
  public String getFacilityRegion() {
    return facilityRegion;
  }

  public void setFacilityRegion(@javax.annotation.Nullable String facilityRegion) {
    this.facilityRegion = facilityRegion;
  }


  public OtherInfo addressLine1(@javax.annotation.Nullable String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(@javax.annotation.Nullable String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public OtherInfo addressLine2(@javax.annotation.Nullable String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(@javax.annotation.Nullable String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public OtherInfo latitude(@javax.annotation.Nullable String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(@javax.annotation.Nullable String latitude) {
    this.latitude = latitude;
  }


  public OtherInfo longitude(@javax.annotation.Nullable String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(@javax.annotation.Nullable String longitude) {
    this.longitude = longitude;
  }


  public OtherInfo nin(@javax.annotation.Nullable String nin) {
    this.nin = nin;
    return this;
  }

  /**
   * Get nin
   * @return nin
   */
  @javax.annotation.Nullable
  public String getNin() {
    return nin;
  }

  public void setNin(@javax.annotation.Nullable String nin) {
    this.nin = nin;
  }


  public OtherInfo pincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
    return this;
  }

  /**
   * Get pincode
   * @return pincode
   */
  @javax.annotation.Nullable
  public String getPincode() {
    return pincode;
  }

  public void setPincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
  }


  public OtherInfo subDistrict(@javax.annotation.Nullable String subDistrict) {
    this.subDistrict = subDistrict;
    return this;
  }

  /**
   * Get subDistrict
   * @return subDistrict
   */
  @javax.annotation.Nullable
  public String getSubDistrict() {
    return subDistrict;
  }

  public void setSubDistrict(@javax.annotation.Nullable String subDistrict) {
    this.subDistrict = subDistrict;
  }


  public OtherInfo facilityType(@javax.annotation.Nullable String facilityType) {
    this.facilityType = facilityType;
    return this;
  }

  /**
   * Get facilityType
   * @return facilityType
   */
  @javax.annotation.Nullable
  public String getFacilityType() {
    return facilityType;
  }

  public void setFacilityType(@javax.annotation.Nullable String facilityType) {
    this.facilityType = facilityType;
  }


  public OtherInfo ownerSubtype(@javax.annotation.Nullable String ownerSubtype) {
    this.ownerSubtype = ownerSubtype;
    return this;
  }

  /**
   * Get ownerSubtype
   * @return ownerSubtype
   */
  @javax.annotation.Nullable
  public String getOwnerSubtype() {
    return ownerSubtype;
  }

  public void setOwnerSubtype(@javax.annotation.Nullable String ownerSubtype) {
    this.ownerSubtype = ownerSubtype;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtherInfo otherInfo = (OtherInfo) o;
    return Objects.equals(this.facilityOwnership, otherInfo.facilityOwnership) &&
        Objects.equals(this.stateCode, otherInfo.stateCode) &&
        Objects.equals(this.districtCode, otherInfo.districtCode) &&
        Objects.equals(this.facilityRegion, otherInfo.facilityRegion) &&
        Objects.equals(this.addressLine1, otherInfo.addressLine1) &&
        Objects.equals(this.addressLine2, otherInfo.addressLine2) &&
        Objects.equals(this.latitude, otherInfo.latitude) &&
        Objects.equals(this.longitude, otherInfo.longitude) &&
        Objects.equals(this.nin, otherInfo.nin) &&
        Objects.equals(this.pincode, otherInfo.pincode) &&
        Objects.equals(this.subDistrict, otherInfo.subDistrict) &&
        Objects.equals(this.facilityType, otherInfo.facilityType) &&
        Objects.equals(this.ownerSubtype, otherInfo.ownerSubtype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facilityOwnership, stateCode, districtCode, facilityRegion, addressLine1, addressLine2, latitude, longitude, nin, pincode, subDistrict, facilityType, ownerSubtype);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtherInfo {\n");
    sb.append("    facilityOwnership: ").append(toIndentedString(facilityOwnership)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    districtCode: ").append(toIndentedString(districtCode)).append("\n");
    sb.append("    facilityRegion: ").append(toIndentedString(facilityRegion)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    nin: ").append(toIndentedString(nin)).append("\n");
    sb.append("    pincode: ").append(toIndentedString(pincode)).append("\n");
    sb.append("    subDistrict: ").append(toIndentedString(subDistrict)).append("\n");
    sb.append("    facilityType: ").append(toIndentedString(facilityType)).append("\n");
    sb.append("    ownerSubtype: ").append(toIndentedString(ownerSubtype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facilityOwnership");
    openapiFields.add("stateCode");
    openapiFields.add("districtCode");
    openapiFields.add("facilityRegion");
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("nin");
    openapiFields.add("pincode");
    openapiFields.add("subDistrict");
    openapiFields.add("facilityType");
    openapiFields.add("ownerSubtype");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtherInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtherInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtherInfo is not found in the empty JSON string", OtherInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtherInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtherInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("facilityOwnership") != null && !jsonObj.get("facilityOwnership").isJsonNull()) && !jsonObj.get("facilityOwnership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityOwnership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityOwnership").toString()));
      }
      if ((jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if ((jsonObj.get("districtCode") != null && !jsonObj.get("districtCode").isJsonNull()) && !jsonObj.get("districtCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtCode").toString()));
      }
      if ((jsonObj.get("facilityRegion") != null && !jsonObj.get("facilityRegion").isJsonNull()) && !jsonObj.get("facilityRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityRegion").toString()));
      }
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("addressLine2") != null && !jsonObj.get("addressLine2").isJsonNull()) && !jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("nin") != null && !jsonObj.get("nin").isJsonNull()) && !jsonObj.get("nin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nin").toString()));
      }
      if ((jsonObj.get("pincode") != null && !jsonObj.get("pincode").isJsonNull()) && !jsonObj.get("pincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pincode").toString()));
      }
      if ((jsonObj.get("subDistrict") != null && !jsonObj.get("subDistrict").isJsonNull()) && !jsonObj.get("subDistrict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subDistrict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subDistrict").toString()));
      }
      if ((jsonObj.get("facilityType") != null && !jsonObj.get("facilityType").isJsonNull()) && !jsonObj.get("facilityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityType").toString()));
      }
      if ((jsonObj.get("ownerSubtype") != null && !jsonObj.get("ownerSubtype").isJsonNull()) && !jsonObj.get("ownerSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerSubtype").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtherInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtherInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtherInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtherInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OtherInfo>() {
           @Override
           public void write(JsonWriter out, OtherInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtherInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtherInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtherInfo
   * @throws IOException if the JSON string is invalid with respect to OtherInfo
   */
  public static OtherInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtherInfo.class);
  }

  /**
   * Convert an instance of OtherInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

