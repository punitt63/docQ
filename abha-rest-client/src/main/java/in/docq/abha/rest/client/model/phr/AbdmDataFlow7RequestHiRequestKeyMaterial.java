/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * The key and algorithm details that is used to encrypt/decrypt the data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmDataFlow7RequestHiRequestKeyMaterial {
  public static final String SERIALIZED_NAME_CRYPTO_ALG = "cryptoAlg";
  @SerializedName(SERIALIZED_NAME_CRYPTO_ALG)
  @javax.annotation.Nonnull
  private String cryptoAlg;

  public static final String SERIALIZED_NAME_CURVE = "curve";
  @SerializedName(SERIALIZED_NAME_CURVE)
  @javax.annotation.Nonnull
  private String curve;

  public static final String SERIALIZED_NAME_DH_PUBLIC_KEY = "dhPublicKey";
  @SerializedName(SERIALIZED_NAME_DH_PUBLIC_KEY)
  @javax.annotation.Nonnull
  private AbdmDataFlow7RequestHiRequestKeyMaterialDhPublicKey dhPublicKey;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  @javax.annotation.Nullable
  private UUID nonce;

  public AbdmDataFlow7RequestHiRequestKeyMaterial() {
  }

  public AbdmDataFlow7RequestHiRequestKeyMaterial cryptoAlg(@javax.annotation.Nonnull String cryptoAlg) {
    this.cryptoAlg = cryptoAlg;
    return this;
  }

  /**
   * Allows alpha numeric character and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;:/]{0,255}$\&quot;
   * @return cryptoAlg
   */
  @javax.annotation.Nonnull
  public String getCryptoAlg() {
    return cryptoAlg;
  }

  public void setCryptoAlg(@javax.annotation.Nonnull String cryptoAlg) {
    this.cryptoAlg = cryptoAlg;
  }


  public AbdmDataFlow7RequestHiRequestKeyMaterial curve(@javax.annotation.Nonnull String curve) {
    this.curve = curve;
    return this;
  }

  /**
   * Allows alpha numeric character and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;:/]{0,255}$\&quot;
   * @return curve
   */
  @javax.annotation.Nonnull
  public String getCurve() {
    return curve;
  }

  public void setCurve(@javax.annotation.Nonnull String curve) {
    this.curve = curve;
  }


  public AbdmDataFlow7RequestHiRequestKeyMaterial dhPublicKey(@javax.annotation.Nonnull AbdmDataFlow7RequestHiRequestKeyMaterialDhPublicKey dhPublicKey) {
    this.dhPublicKey = dhPublicKey;
    return this;
  }

  /**
   * Get dhPublicKey
   * @return dhPublicKey
   */
  @javax.annotation.Nonnull
  public AbdmDataFlow7RequestHiRequestKeyMaterialDhPublicKey getDhPublicKey() {
    return dhPublicKey;
  }

  public void setDhPublicKey(@javax.annotation.Nonnull AbdmDataFlow7RequestHiRequestKeyMaterialDhPublicKey dhPublicKey) {
    this.dhPublicKey = dhPublicKey;
  }


  public AbdmDataFlow7RequestHiRequestKeyMaterial nonce(@javax.annotation.Nullable UUID nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public UUID getNonce() {
    return nonce;
  }

  public void setNonce(@javax.annotation.Nullable UUID nonce) {
    this.nonce = nonce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmDataFlow7RequestHiRequestKeyMaterial abdmDataFlow7RequestHiRequestKeyMaterial = (AbdmDataFlow7RequestHiRequestKeyMaterial) o;
    return Objects.equals(this.cryptoAlg, abdmDataFlow7RequestHiRequestKeyMaterial.cryptoAlg) &&
        Objects.equals(this.curve, abdmDataFlow7RequestHiRequestKeyMaterial.curve) &&
        Objects.equals(this.dhPublicKey, abdmDataFlow7RequestHiRequestKeyMaterial.dhPublicKey) &&
        Objects.equals(this.nonce, abdmDataFlow7RequestHiRequestKeyMaterial.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cryptoAlg, curve, dhPublicKey, nonce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmDataFlow7RequestHiRequestKeyMaterial {\n");
    sb.append("    cryptoAlg: ").append(toIndentedString(cryptoAlg)).append("\n");
    sb.append("    curve: ").append(toIndentedString(curve)).append("\n");
    sb.append("    dhPublicKey: ").append(toIndentedString(dhPublicKey)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cryptoAlg");
    openapiFields.add("curve");
    openapiFields.add("dhPublicKey");
    openapiFields.add("nonce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cryptoAlg");
    openapiRequiredFields.add("curve");
    openapiRequiredFields.add("dhPublicKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmDataFlow7RequestHiRequestKeyMaterial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmDataFlow7RequestHiRequestKeyMaterial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmDataFlow7RequestHiRequestKeyMaterial is not found in the empty JSON string", AbdmDataFlow7RequestHiRequestKeyMaterial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmDataFlow7RequestHiRequestKeyMaterial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmDataFlow7RequestHiRequestKeyMaterial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmDataFlow7RequestHiRequestKeyMaterial.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cryptoAlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cryptoAlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cryptoAlg").toString()));
      }
      if (!jsonObj.get("curve").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `curve` to be a primitive type in the JSON string but got `%s`", jsonObj.get("curve").toString()));
      }
      // validate the required field `dhPublicKey`
      AbdmDataFlow7RequestHiRequestKeyMaterialDhPublicKey.validateJsonElement(jsonObj.get("dhPublicKey"));
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmDataFlow7RequestHiRequestKeyMaterial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmDataFlow7RequestHiRequestKeyMaterial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmDataFlow7RequestHiRequestKeyMaterial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmDataFlow7RequestHiRequestKeyMaterial.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmDataFlow7RequestHiRequestKeyMaterial>() {
           @Override
           public void write(JsonWriter out, AbdmDataFlow7RequestHiRequestKeyMaterial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmDataFlow7RequestHiRequestKeyMaterial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmDataFlow7RequestHiRequestKeyMaterial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmDataFlow7RequestHiRequestKeyMaterial
   * @throws IOException if the JSON string is invalid with respect to AbdmDataFlow7RequestHiRequestKeyMaterial
   */
  public static AbdmDataFlow7RequestHiRequestKeyMaterial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmDataFlow7RequestHiRequestKeyMaterial.class);
  }

  /**
   * Convert an instance of AbdmDataFlow7RequestHiRequestKeyMaterial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

