/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * AbdmConsentManagement7200ResponseInnerConsentDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement7200ResponseInnerConsentDetail {
  public static final String SERIALIZED_NAME_CONSENT_ID = "consentId";
  @SerializedName(SERIALIZED_NAME_CONSENT_ID)
  @javax.annotation.Nullable
  private String consentId;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  @javax.annotation.Nonnull
  private AbdmConsentManagement5200ResponseRequestsInnerPurpose purpose;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  @javax.annotation.Nonnull
  private AbdmConsentManagement4200ResponsePatient patient;

  public static final String SERIALIZED_NAME_HIP = "hip";
  @SerializedName(SERIALIZED_NAME_HIP)
  @javax.annotation.Nullable
  private ConsentManagement6Request1ConsentConsentDetailHip hip;

  public static final String SERIALIZED_NAME_HIU = "hiu";
  @SerializedName(SERIALIZED_NAME_HIU)
  @javax.annotation.Nonnull
  private ConsentManagement6Request1ConsentConsentDetailHiu hiu;

  public static final String SERIALIZED_NAME_CARE_CONTEXTS = "careContexts";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXTS)
  @javax.annotation.Nullable
  private List<AbdmConsentManagement4200ResponseCareContextsInner> careContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  @javax.annotation.Nullable
  private ConsentManagement6Request1ConsentConsentDetailRequester requester;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  @javax.annotation.Nullable
  private String schemaVersion;

  public static final String SERIALIZED_NAME_CONSENT_MANAGER = "consentManager";
  @SerializedName(SERIALIZED_NAME_CONSENT_MANAGER)
  @javax.annotation.Nullable
  private AbdmConsentManagement7200ResponseInnerConsentDetailConsentManager consentManager;

  /**
   * Gets or Sets hiTypes
   */
  @JsonAdapter(HiTypesEnum.Adapter.class)
  public enum HiTypesEnum {
    PRESCRIPTION("Prescription"),
    
    DIAGNOSTIC_REPORT("DiagnosticReport"),
    
    OP_CONSULTATION("OPConsultation"),
    
    DISCHARGE_SUMMARY("DischargeSummary"),
    
    IMMUNIZATION_RECORD("ImmunizationRecord"),
    
    HEALTH_DOCUMENT_RECORD("HealthDocumentRecord"),
    
    WELLNESS_RECORD("WellnessRecord"),
    
    INVOICE("Invoice");

    private String value;

    HiTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HiTypesEnum fromValue(String value) {
      for (HiTypesEnum b : HiTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HiTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HiTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HiTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HiTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HiTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HI_TYPES = "hiTypes";
  @SerializedName(SERIALIZED_NAME_HI_TYPES)
  @javax.annotation.Nonnull
  private List<HiTypesEnum> hiTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  @javax.annotation.Nonnull
  private AbdmConsentManagement4200ResponsePermission permission;

  public AbdmConsentManagement7200ResponseInnerConsentDetail() {
  }

  public AbdmConsentManagement7200ResponseInnerConsentDetail consentId(@javax.annotation.Nullable String consentId) {
    this.consentId = consentId;
    return this;
  }

  /**
   * Allows alpha numeric character and special characters like \&quot;^[0-9a-fA-F]{8}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{12}$\&quot;;
   * @return consentId
   */
  @javax.annotation.Nullable
  public String getConsentId() {
    return consentId;
  }

  public void setConsentId(@javax.annotation.Nullable String consentId) {
    this.consentId = consentId;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail purpose(@javax.annotation.Nonnull AbdmConsentManagement5200ResponseRequestsInnerPurpose purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @javax.annotation.Nonnull
  public AbdmConsentManagement5200ResponseRequestsInnerPurpose getPurpose() {
    return purpose;
  }

  public void setPurpose(@javax.annotation.Nonnull AbdmConsentManagement5200ResponseRequestsInnerPurpose purpose) {
    this.purpose = purpose;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail patient(@javax.annotation.Nonnull AbdmConsentManagement4200ResponsePatient patient) {
    this.patient = patient;
    return this;
  }

  /**
   * Get patient
   * @return patient
   */
  @javax.annotation.Nonnull
  public AbdmConsentManagement4200ResponsePatient getPatient() {
    return patient;
  }

  public void setPatient(@javax.annotation.Nonnull AbdmConsentManagement4200ResponsePatient patient) {
    this.patient = patient;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail hip(@javax.annotation.Nullable ConsentManagement6Request1ConsentConsentDetailHip hip) {
    this.hip = hip;
    return this;
  }

  /**
   * Get hip
   * @return hip
   */
  @javax.annotation.Nullable
  public ConsentManagement6Request1ConsentConsentDetailHip getHip() {
    return hip;
  }

  public void setHip(@javax.annotation.Nullable ConsentManagement6Request1ConsentConsentDetailHip hip) {
    this.hip = hip;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail hiu(@javax.annotation.Nonnull ConsentManagement6Request1ConsentConsentDetailHiu hiu) {
    this.hiu = hiu;
    return this;
  }

  /**
   * Get hiu
   * @return hiu
   */
  @javax.annotation.Nonnull
  public ConsentManagement6Request1ConsentConsentDetailHiu getHiu() {
    return hiu;
  }

  public void setHiu(@javax.annotation.Nonnull ConsentManagement6Request1ConsentConsentDetailHiu hiu) {
    this.hiu = hiu;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail careContexts(@javax.annotation.Nullable List<AbdmConsentManagement4200ResponseCareContextsInner> careContexts) {
    this.careContexts = careContexts;
    return this;
  }

  public AbdmConsentManagement7200ResponseInnerConsentDetail addCareContextsItem(AbdmConsentManagement4200ResponseCareContextsInner careContextsItem) {
    if (this.careContexts == null) {
      this.careContexts = new ArrayList<>();
    }
    this.careContexts.add(careContextsItem);
    return this;
  }

  /**
   * Get careContexts
   * @return careContexts
   */
  @javax.annotation.Nullable
  public List<AbdmConsentManagement4200ResponseCareContextsInner> getCareContexts() {
    return careContexts;
  }

  public void setCareContexts(@javax.annotation.Nullable List<AbdmConsentManagement4200ResponseCareContextsInner> careContexts) {
    this.careContexts = careContexts;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail requester(@javax.annotation.Nullable ConsentManagement6Request1ConsentConsentDetailRequester requester) {
    this.requester = requester;
    return this;
  }

  /**
   * Get requester
   * @return requester
   */
  @javax.annotation.Nullable
  public ConsentManagement6Request1ConsentConsentDetailRequester getRequester() {
    return requester;
  }

  public void setRequester(@javax.annotation.Nullable ConsentManagement6Request1ConsentConsentDetailRequester requester) {
    this.requester = requester;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail lastUpdated(@javax.annotation.Nullable OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(@javax.annotation.Nullable OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail schemaVersion(@javax.annotation.Nullable String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(@javax.annotation.Nullable String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail consentManager(@javax.annotation.Nullable AbdmConsentManagement7200ResponseInnerConsentDetailConsentManager consentManager) {
    this.consentManager = consentManager;
    return this;
  }

  /**
   * Get consentManager
   * @return consentManager
   */
  @javax.annotation.Nullable
  public AbdmConsentManagement7200ResponseInnerConsentDetailConsentManager getConsentManager() {
    return consentManager;
  }

  public void setConsentManager(@javax.annotation.Nullable AbdmConsentManagement7200ResponseInnerConsentDetailConsentManager consentManager) {
    this.consentManager = consentManager;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail hiTypes(@javax.annotation.Nonnull List<HiTypesEnum> hiTypes) {
    this.hiTypes = hiTypes;
    return this;
  }

  public AbdmConsentManagement7200ResponseInnerConsentDetail addHiTypesItem(HiTypesEnum hiTypesItem) {
    if (this.hiTypes == null) {
      this.hiTypes = new ArrayList<>();
    }
    this.hiTypes.add(hiTypesItem);
    return this;
  }

  /**
   * Get hiTypes
   * @return hiTypes
   */
  @javax.annotation.Nonnull
  public List<HiTypesEnum> getHiTypes() {
    return hiTypes;
  }

  public void setHiTypes(@javax.annotation.Nonnull List<HiTypesEnum> hiTypes) {
    this.hiTypes = hiTypes;
  }


  public AbdmConsentManagement7200ResponseInnerConsentDetail permission(@javax.annotation.Nonnull AbdmConsentManagement4200ResponsePermission permission) {
    this.permission = permission;
    return this;
  }

  /**
   * Get permission
   * @return permission
   */
  @javax.annotation.Nonnull
  public AbdmConsentManagement4200ResponsePermission getPermission() {
    return permission;
  }

  public void setPermission(@javax.annotation.Nonnull AbdmConsentManagement4200ResponsePermission permission) {
    this.permission = permission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement7200ResponseInnerConsentDetail abdmConsentManagement7200ResponseInnerConsentDetail = (AbdmConsentManagement7200ResponseInnerConsentDetail) o;
    return Objects.equals(this.consentId, abdmConsentManagement7200ResponseInnerConsentDetail.consentId) &&
        Objects.equals(this.purpose, abdmConsentManagement7200ResponseInnerConsentDetail.purpose) &&
        Objects.equals(this.patient, abdmConsentManagement7200ResponseInnerConsentDetail.patient) &&
        Objects.equals(this.hip, abdmConsentManagement7200ResponseInnerConsentDetail.hip) &&
        Objects.equals(this.hiu, abdmConsentManagement7200ResponseInnerConsentDetail.hiu) &&
        Objects.equals(this.careContexts, abdmConsentManagement7200ResponseInnerConsentDetail.careContexts) &&
        Objects.equals(this.requester, abdmConsentManagement7200ResponseInnerConsentDetail.requester) &&
        Objects.equals(this.createdAt, abdmConsentManagement7200ResponseInnerConsentDetail.createdAt) &&
        Objects.equals(this.lastUpdated, abdmConsentManagement7200ResponseInnerConsentDetail.lastUpdated) &&
        Objects.equals(this.schemaVersion, abdmConsentManagement7200ResponseInnerConsentDetail.schemaVersion) &&
        Objects.equals(this.consentManager, abdmConsentManagement7200ResponseInnerConsentDetail.consentManager) &&
        Objects.equals(this.hiTypes, abdmConsentManagement7200ResponseInnerConsentDetail.hiTypes) &&
        Objects.equals(this.permission, abdmConsentManagement7200ResponseInnerConsentDetail.permission);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentId, purpose, patient, hip, hiu, careContexts, requester, createdAt, lastUpdated, schemaVersion, consentManager, hiTypes, permission);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement7200ResponseInnerConsentDetail {\n");
    sb.append("    consentId: ").append(toIndentedString(consentId)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    hip: ").append(toIndentedString(hip)).append("\n");
    sb.append("    hiu: ").append(toIndentedString(hiu)).append("\n");
    sb.append("    careContexts: ").append(toIndentedString(careContexts)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    consentManager: ").append(toIndentedString(consentManager)).append("\n");
    sb.append("    hiTypes: ").append(toIndentedString(hiTypes)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentId");
    openapiFields.add("purpose");
    openapiFields.add("patient");
    openapiFields.add("hip");
    openapiFields.add("hiu");
    openapiFields.add("careContexts");
    openapiFields.add("requester");
    openapiFields.add("createdAt");
    openapiFields.add("lastUpdated");
    openapiFields.add("schemaVersion");
    openapiFields.add("consentManager");
    openapiFields.add("hiTypes");
    openapiFields.add("permission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("purpose");
    openapiRequiredFields.add("patient");
    openapiRequiredFields.add("hiu");
    openapiRequiredFields.add("requester");
    openapiRequiredFields.add("hiTypes");
    openapiRequiredFields.add("permission");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement7200ResponseInnerConsentDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement7200ResponseInnerConsentDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement7200ResponseInnerConsentDetail is not found in the empty JSON string", AbdmConsentManagement7200ResponseInnerConsentDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement7200ResponseInnerConsentDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement7200ResponseInnerConsentDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement7200ResponseInnerConsentDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consentId") != null && !jsonObj.get("consentId").isJsonNull()) && !jsonObj.get("consentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentId").toString()));
      }
      // validate the required field `purpose`
      AbdmConsentManagement5200ResponseRequestsInnerPurpose.validateJsonElement(jsonObj.get("purpose"));
      // validate the required field `patient`
      AbdmConsentManagement4200ResponsePatient.validateJsonElement(jsonObj.get("patient"));
      // validate the optional field `hip`
      if (jsonObj.get("hip") != null && !jsonObj.get("hip").isJsonNull()) {
        ConsentManagement6Request1ConsentConsentDetailHip.validateJsonElement(jsonObj.get("hip"));
      }
      // validate the required field `hiu`
      ConsentManagement6Request1ConsentConsentDetailHiu.validateJsonElement(jsonObj.get("hiu"));
      if (jsonObj.get("careContexts") != null && !jsonObj.get("careContexts").isJsonNull()) {
        JsonArray jsonArraycareContexts = jsonObj.getAsJsonArray("careContexts");
        if (jsonArraycareContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("careContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `careContexts` to be an array in the JSON string but got `%s`", jsonObj.get("careContexts").toString()));
          }

          // validate the optional field `careContexts` (array)
          for (int i = 0; i < jsonArraycareContexts.size(); i++) {
            AbdmConsentManagement4200ResponseCareContextsInner.validateJsonElement(jsonArraycareContexts.get(i));
          };
        }
      }
      // validate the required field `requester`
      ConsentManagement6Request1ConsentConsentDetailRequester.validateJsonElement(jsonObj.get("requester"));
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      // validate the optional field `consentManager`
      if (jsonObj.get("consentManager") != null && !jsonObj.get("consentManager").isJsonNull()) {
        AbdmConsentManagement7200ResponseInnerConsentDetailConsentManager.validateJsonElement(jsonObj.get("consentManager"));
      }
      // ensure the required json array is present
      if (jsonObj.get("hiTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hiTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiTypes` to be an array in the JSON string but got `%s`", jsonObj.get("hiTypes").toString()));
      }
      // validate the required field `permission`
      AbdmConsentManagement4200ResponsePermission.validateJsonElement(jsonObj.get("permission"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement7200ResponseInnerConsentDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement7200ResponseInnerConsentDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement7200ResponseInnerConsentDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement7200ResponseInnerConsentDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement7200ResponseInnerConsentDetail>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement7200ResponseInnerConsentDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement7200ResponseInnerConsentDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement7200ResponseInnerConsentDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement7200ResponseInnerConsentDetail
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement7200ResponseInnerConsentDetail
   */
  public static AbdmConsentManagement7200ResponseInnerConsentDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement7200ResponseInnerConsentDetail.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement7200ResponseInnerConsentDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

