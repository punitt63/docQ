/*
 * HIE-CM Profile Share
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.*;

/**
 * PatientShare1RequestProfilePatient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T12:11:20.742865+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PatientShare1RequestProfilePatient {
  public static final String SERIALIZED_NAME_ABHA_NUMBER = "abhaNumber";
  @SerializedName(SERIALIZED_NAME_ABHA_NUMBER)
  @javax.annotation.Nullable
  private String abhaNumber;

  public static final String SERIALIZED_NAME_ABHA_ADDRESS = "abhaAddress";
  @SerializedName(SERIALIZED_NAME_ABHA_ADDRESS)
  @javax.annotation.Nonnull
  private String abhaAddress;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  /**
   * The gender of the patient
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    M("M"),
    
    F("F"),
    
    O("O"),
    
    D("D"),
    
    T("T"),
    
    U("U");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  @javax.annotation.Nonnull
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_DAY_OF_BIRTH = "dayOfBirth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_BIRTH)
  @javax.annotation.Nullable
  private BigDecimal dayOfBirth;

  public static final String SERIALIZED_NAME_MONTH_OF_BIRTH = "monthOfBirth";
  @SerializedName(SERIALIZED_NAME_MONTH_OF_BIRTH)
  @javax.annotation.Nullable
  private BigDecimal monthOfBirth;

  public static final String SERIALIZED_NAME_YEAR_OF_BIRTH = "yearOfBirth";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_BIRTH)
  @javax.annotation.Nonnull
  private BigDecimal yearOfBirth;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private PatientShare1RequestProfilePatientAddress address;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nullable
  private String phoneNumber;

  public PatientShare1RequestProfilePatient() {
  }

  public PatientShare1RequestProfilePatient abhaNumber(@javax.annotation.Nullable String abhaNumber) {
    this.abhaNumber = abhaNumber;
    return this;
  }

  /**
   * The abha number of the patient.It should be passed based on the X-AUTH-TOKEN. Should be only 14 digit. Allows alpha numeric character and special characters like ^(\\\\d+-?){13}\\\\d$
   * @return abhaNumber
   */
  @javax.annotation.Nullable
  public String getAbhaNumber() {
    return abhaNumber;
  }

  public void setAbhaNumber(@javax.annotation.Nullable String abhaNumber) {
    this.abhaNumber = abhaNumber;
  }


  public PatientShare1RequestProfilePatient abhaAddress(@javax.annotation.Nonnull String abhaAddress) {
    this.abhaAddress = abhaAddress;
    return this;
  }

  /**
   * The abha address of the patient. Should start with Alphanumeric . and  _  in the middle and must be ending with @abdm or @sbx and Allows alpha numeric character and special characters like ^[a-zA-Z0-9][a-zA-Z0-9_.\\-!]+[a-zA-Z0-9]@(abdm|sbx)$
   * @return abhaAddress
   */
  @javax.annotation.Nonnull
  public String getAbhaAddress() {
    return abhaAddress;
  }

  public void setAbhaAddress(@javax.annotation.Nonnull String abhaAddress) {
    this.abhaAddress = abhaAddress;
  }


  public PatientShare1RequestProfilePatient name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the patient. Allows alpha numeric character and special characters like ^[a-zA-Z0-9.-_,]+(([&#39;,. -][a-zA-Z0-9. ])?[a-zA-Z0-9. ]*)*$
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public PatientShare1RequestProfilePatient gender(@javax.annotation.Nonnull GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The gender of the patient
   * @return gender
   */
  @javax.annotation.Nonnull
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(@javax.annotation.Nonnull GenderEnum gender) {
    this.gender = gender;
  }


  public PatientShare1RequestProfilePatient dayOfBirth(@javax.annotation.Nullable BigDecimal dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
    return this;
  }

  /**
   * The day of birth of the patient. Only allows numeric values between 1 abd 31 and ^(?!\\\\s*$)(0?[1-9]|[12][0-9]|3[01])$
   * @return dayOfBirth
   */
  @javax.annotation.Nullable
  public BigDecimal getDayOfBirth() {
    return dayOfBirth;
  }

  public void setDayOfBirth(@javax.annotation.Nullable BigDecimal dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
  }


  public PatientShare1RequestProfilePatient monthOfBirth(@javax.annotation.Nullable BigDecimal monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
    return this;
  }

  /**
   * The month of birth of the patient. Only allows numeric values between 1 abd 12 and ^(?!\\\\s*$)(0?[1-9]|[1][0-2])$
   * @return monthOfBirth
   */
  @javax.annotation.Nullable
  public BigDecimal getMonthOfBirth() {
    return monthOfBirth;
  }

  public void setMonthOfBirth(@javax.annotation.Nullable BigDecimal monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
  }


  public PatientShare1RequestProfilePatient yearOfBirth(@javax.annotation.Nonnull BigDecimal yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
    return this;
  }

  /**
   * The month of birth of the patient. Only allows numeric values and must be 4 digit ranging between 1900 and 2200 and ^(?!\\\\s*$)(19|20|21|22)\\\\d{2}$
   * @return yearOfBirth
   */
  @javax.annotation.Nonnull
  public BigDecimal getYearOfBirth() {
    return yearOfBirth;
  }

  public void setYearOfBirth(@javax.annotation.Nonnull BigDecimal yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
  }


  public PatientShare1RequestProfilePatient address(@javax.annotation.Nonnull PatientShare1RequestProfilePatientAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public PatientShare1RequestProfilePatientAddress getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull PatientShare1RequestProfilePatientAddress address) {
    this.address = address;
  }


  public PatientShare1RequestProfilePatient phoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The mobile number of the patient. Must be 10 digit and contain only 0-9 and it allows only numbers like ^(\\+\\d{1,3}[- ]?)?\\d{10}$
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientShare1RequestProfilePatient patientShare1RequestProfilePatient = (PatientShare1RequestProfilePatient) o;
    return Objects.equals(this.abhaNumber, patientShare1RequestProfilePatient.abhaNumber) &&
        Objects.equals(this.abhaAddress, patientShare1RequestProfilePatient.abhaAddress) &&
        Objects.equals(this.name, patientShare1RequestProfilePatient.name) &&
        Objects.equals(this.gender, patientShare1RequestProfilePatient.gender) &&
        Objects.equals(this.dayOfBirth, patientShare1RequestProfilePatient.dayOfBirth) &&
        Objects.equals(this.monthOfBirth, patientShare1RequestProfilePatient.monthOfBirth) &&
        Objects.equals(this.yearOfBirth, patientShare1RequestProfilePatient.yearOfBirth) &&
        Objects.equals(this.address, patientShare1RequestProfilePatient.address) &&
        Objects.equals(this.phoneNumber, patientShare1RequestProfilePatient.phoneNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(abhaNumber, abhaAddress, name, gender, dayOfBirth, monthOfBirth, yearOfBirth, address, phoneNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientShare1RequestProfilePatient {\n");
    sb.append("    abhaNumber: ").append(toIndentedString(abhaNumber)).append("\n");
    sb.append("    abhaAddress: ").append(toIndentedString(abhaAddress)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    dayOfBirth: ").append(toIndentedString(dayOfBirth)).append("\n");
    sb.append("    monthOfBirth: ").append(toIndentedString(monthOfBirth)).append("\n");
    sb.append("    yearOfBirth: ").append(toIndentedString(yearOfBirth)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abhaNumber");
    openapiFields.add("abhaAddress");
    openapiFields.add("name");
    openapiFields.add("gender");
    openapiFields.add("dayOfBirth");
    openapiFields.add("monthOfBirth");
    openapiFields.add("yearOfBirth");
    openapiFields.add("address");
    openapiFields.add("phoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("abhaAddress");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("yearOfBirth");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("phoneNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientShare1RequestProfilePatient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientShare1RequestProfilePatient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientShare1RequestProfilePatient is not found in the empty JSON string", PatientShare1RequestProfilePatient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientShare1RequestProfilePatient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientShare1RequestProfilePatient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientShare1RequestProfilePatient.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abhaNumber") != null && !jsonObj.get("abhaNumber").isJsonNull()) && !jsonObj.get("abhaNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abhaNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abhaNumber").toString()));
      }
      if (!jsonObj.get("abhaAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abhaAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abhaAddress").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the required field `gender`
      GenderEnum.validateJsonElement(jsonObj.get("gender"));
      // validate the required field `address`
      PatientShare1RequestProfilePatientAddress.validateJsonElement(jsonObj.get("address"));
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientShare1RequestProfilePatient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientShare1RequestProfilePatient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientShare1RequestProfilePatient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientShare1RequestProfilePatient.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientShare1RequestProfilePatient>() {
           @Override
           public void write(JsonWriter out, PatientShare1RequestProfilePatient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientShare1RequestProfilePatient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientShare1RequestProfilePatient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientShare1RequestProfilePatient
   * @throws IOException if the JSON string is invalid with respect to PatientShare1RequestProfilePatient
   */
  public static PatientShare1RequestProfilePatient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientShare1RequestProfilePatient.class);
  }

  /**
   * Convert an instance of PatientShare1RequestProfilePatient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

