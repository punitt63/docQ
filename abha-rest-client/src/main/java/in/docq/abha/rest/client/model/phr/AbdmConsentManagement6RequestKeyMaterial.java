/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AbdmConsentManagement6RequestKeyMaterial
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement6RequestKeyMaterial {
  /**
   * Gets or Sets cryptoAlg
   */
  @JsonAdapter(CryptoAlgEnum.Adapter.class)
  public enum CryptoAlgEnum {
    ECDH("ECDH");

    private String value;

    CryptoAlgEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CryptoAlgEnum fromValue(String value) {
      for (CryptoAlgEnum b : CryptoAlgEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CryptoAlgEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CryptoAlgEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CryptoAlgEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CryptoAlgEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CryptoAlgEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRYPTO_ALG = "cryptoAlg";
  @SerializedName(SERIALIZED_NAME_CRYPTO_ALG)
  @javax.annotation.Nonnull
  private CryptoAlgEnum cryptoAlg;

  /**
   * Gets or Sets curve
   */
  @JsonAdapter(CurveEnum.Adapter.class)
  public enum CurveEnum {
    CURVE25519("Curve25519");

    private String value;

    CurveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurveEnum fromValue(String value) {
      for (CurveEnum b : CurveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurveEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurveEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURVE = "curve";
  @SerializedName(SERIALIZED_NAME_CURVE)
  @javax.annotation.Nonnull
  private CurveEnum curve;

  public static final String SERIALIZED_NAME_DH_PUBLIC_KEY = "dhPublicKey";
  @SerializedName(SERIALIZED_NAME_DH_PUBLIC_KEY)
  @javax.annotation.Nonnull
  private AbdmConsentManagement6RequestKeyMaterialDhPublicKey dhPublicKey;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  @javax.annotation.Nonnull
  private String nonce;

  public AbdmConsentManagement6RequestKeyMaterial() {
  }

  public AbdmConsentManagement6RequestKeyMaterial cryptoAlg(@javax.annotation.Nonnull CryptoAlgEnum cryptoAlg) {
    this.cryptoAlg = cryptoAlg;
    return this;
  }

  /**
   * Get cryptoAlg
   * @return cryptoAlg
   */
  @javax.annotation.Nonnull
  public CryptoAlgEnum getCryptoAlg() {
    return cryptoAlg;
  }

  public void setCryptoAlg(@javax.annotation.Nonnull CryptoAlgEnum cryptoAlg) {
    this.cryptoAlg = cryptoAlg;
  }


  public AbdmConsentManagement6RequestKeyMaterial curve(@javax.annotation.Nonnull CurveEnum curve) {
    this.curve = curve;
    return this;
  }

  /**
   * Get curve
   * @return curve
   */
  @javax.annotation.Nonnull
  public CurveEnum getCurve() {
    return curve;
  }

  public void setCurve(@javax.annotation.Nonnull CurveEnum curve) {
    this.curve = curve;
  }


  public AbdmConsentManagement6RequestKeyMaterial dhPublicKey(@javax.annotation.Nonnull AbdmConsentManagement6RequestKeyMaterialDhPublicKey dhPublicKey) {
    this.dhPublicKey = dhPublicKey;
    return this;
  }

  /**
   * Get dhPublicKey
   * @return dhPublicKey
   */
  @javax.annotation.Nonnull
  public AbdmConsentManagement6RequestKeyMaterialDhPublicKey getDhPublicKey() {
    return dhPublicKey;
  }

  public void setDhPublicKey(@javax.annotation.Nonnull AbdmConsentManagement6RequestKeyMaterialDhPublicKey dhPublicKey) {
    this.dhPublicKey = dhPublicKey;
  }


  public AbdmConsentManagement6RequestKeyMaterial nonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nonnull
  public String getNonce() {
    return nonce;
  }

  public void setNonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement6RequestKeyMaterial abdmConsentManagement6RequestKeyMaterial = (AbdmConsentManagement6RequestKeyMaterial) o;
    return Objects.equals(this.cryptoAlg, abdmConsentManagement6RequestKeyMaterial.cryptoAlg) &&
        Objects.equals(this.curve, abdmConsentManagement6RequestKeyMaterial.curve) &&
        Objects.equals(this.dhPublicKey, abdmConsentManagement6RequestKeyMaterial.dhPublicKey) &&
        Objects.equals(this.nonce, abdmConsentManagement6RequestKeyMaterial.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cryptoAlg, curve, dhPublicKey, nonce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement6RequestKeyMaterial {\n");
    sb.append("    cryptoAlg: ").append(toIndentedString(cryptoAlg)).append("\n");
    sb.append("    curve: ").append(toIndentedString(curve)).append("\n");
    sb.append("    dhPublicKey: ").append(toIndentedString(dhPublicKey)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cryptoAlg");
    openapiFields.add("curve");
    openapiFields.add("dhPublicKey");
    openapiFields.add("nonce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cryptoAlg");
    openapiRequiredFields.add("curve");
    openapiRequiredFields.add("dhPublicKey");
    openapiRequiredFields.add("nonce");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement6RequestKeyMaterial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement6RequestKeyMaterial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement6RequestKeyMaterial is not found in the empty JSON string", AbdmConsentManagement6RequestKeyMaterial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement6RequestKeyMaterial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement6RequestKeyMaterial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement6RequestKeyMaterial.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cryptoAlg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cryptoAlg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cryptoAlg").toString()));
      }
      // validate the required field `cryptoAlg`
      CryptoAlgEnum.validateJsonElement(jsonObj.get("cryptoAlg"));
      if (!jsonObj.get("curve").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `curve` to be a primitive type in the JSON string but got `%s`", jsonObj.get("curve").toString()));
      }
      // validate the required field `curve`
      CurveEnum.validateJsonElement(jsonObj.get("curve"));
      // validate the required field `dhPublicKey`
      AbdmConsentManagement6RequestKeyMaterialDhPublicKey.validateJsonElement(jsonObj.get("dhPublicKey"));
      if (!jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement6RequestKeyMaterial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement6RequestKeyMaterial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement6RequestKeyMaterial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement6RequestKeyMaterial.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement6RequestKeyMaterial>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement6RequestKeyMaterial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement6RequestKeyMaterial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement6RequestKeyMaterial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement6RequestKeyMaterial
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement6RequestKeyMaterial
   */
  public static AbdmConsentManagement6RequestKeyMaterial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement6RequestKeyMaterial.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement6RequestKeyMaterial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

