/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SuggestionApiRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T18:02:09.764020+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class SuggestionApiRequest {
  public static final String SERIALIZED_NAME_DAY_OF_BIRTH = "dayOfBirth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_BIRTH)
  @javax.annotation.Nullable
  private String dayOfBirth;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nonnull
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public static final String SERIALIZED_NAME_MONTH_OF_BIRTH = "monthOfBirth";
  @SerializedName(SERIALIZED_NAME_MONTH_OF_BIRTH)
  @javax.annotation.Nullable
  private String monthOfBirth;

  public static final String SERIALIZED_NAME_TXN_ID = "txnId";
  @SerializedName(SERIALIZED_NAME_TXN_ID)
  @javax.annotation.Nonnull
  private String txnId;

  public static final String SERIALIZED_NAME_YEAR_OF_BIRTH = "yearOfBirth";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_BIRTH)
  @javax.annotation.Nonnull
  private String yearOfBirth;

  public SuggestionApiRequest() {
  }

  public SuggestionApiRequest dayOfBirth(@javax.annotation.Nullable String dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
    return this;
  }

  /**
   * Get dayOfBirth
   * @return dayOfBirth
   */
  @javax.annotation.Nullable
  public String getDayOfBirth() {
    return dayOfBirth;
  }

  public void setDayOfBirth(@javax.annotation.Nullable String dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
  }


  public SuggestionApiRequest firstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
  }


  public SuggestionApiRequest lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }


  public SuggestionApiRequest monthOfBirth(@javax.annotation.Nullable String monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
    return this;
  }

  /**
   * Get monthOfBirth
   * @return monthOfBirth
   */
  @javax.annotation.Nullable
  public String getMonthOfBirth() {
    return monthOfBirth;
  }

  public void setMonthOfBirth(@javax.annotation.Nullable String monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
  }


  public SuggestionApiRequest txnId(@javax.annotation.Nonnull String txnId) {
    this.txnId = txnId;
    return this;
  }

  /**
   * Get txnId
   * @return txnId
   */
  @javax.annotation.Nonnull
  public String getTxnId() {
    return txnId;
  }

  public void setTxnId(@javax.annotation.Nonnull String txnId) {
    this.txnId = txnId;
  }


  public SuggestionApiRequest yearOfBirth(@javax.annotation.Nonnull String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
    return this;
  }

  /**
   * Get yearOfBirth
   * @return yearOfBirth
   */
  @javax.annotation.Nonnull
  public String getYearOfBirth() {
    return yearOfBirth;
  }

  public void setYearOfBirth(@javax.annotation.Nonnull String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestionApiRequest suggestionApiRequest = (SuggestionApiRequest) o;
    return Objects.equals(this.dayOfBirth, suggestionApiRequest.dayOfBirth) &&
        Objects.equals(this.firstName, suggestionApiRequest.firstName) &&
        Objects.equals(this.lastName, suggestionApiRequest.lastName) &&
        Objects.equals(this.monthOfBirth, suggestionApiRequest.monthOfBirth) &&
        Objects.equals(this.txnId, suggestionApiRequest.txnId) &&
        Objects.equals(this.yearOfBirth, suggestionApiRequest.yearOfBirth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfBirth, firstName, lastName, monthOfBirth, txnId, yearOfBirth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestionApiRequest {\n");
    sb.append("    dayOfBirth: ").append(toIndentedString(dayOfBirth)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    monthOfBirth: ").append(toIndentedString(monthOfBirth)).append("\n");
    sb.append("    txnId: ").append(toIndentedString(txnId)).append("\n");
    sb.append("    yearOfBirth: ").append(toIndentedString(yearOfBirth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfBirth");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("monthOfBirth");
    openapiFields.add("txnId");
    openapiFields.add("yearOfBirth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("txnId");
    openapiRequiredFields.add("yearOfBirth");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestionApiRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestionApiRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestionApiRequest is not found in the empty JSON string", SuggestionApiRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestionApiRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestionApiRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuggestionApiRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dayOfBirth") != null && !jsonObj.get("dayOfBirth").isJsonNull()) && !jsonObj.get("dayOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfBirth").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("monthOfBirth") != null && !jsonObj.get("monthOfBirth").isJsonNull()) && !jsonObj.get("monthOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthOfBirth").toString()));
      }
      if (!jsonObj.get("txnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txnId").toString()));
      }
      if (!jsonObj.get("yearOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearOfBirth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestionApiRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestionApiRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestionApiRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestionApiRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestionApiRequest>() {
           @Override
           public void write(JsonWriter out, SuggestionApiRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestionApiRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestionApiRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestionApiRequest
   * @throws IOException if the JSON string is invalid with respect to SuggestionApiRequest
   */
  public static SuggestionApiRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestionApiRequest.class);
  }

  /**
   * Convert an instance of SuggestionApiRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

