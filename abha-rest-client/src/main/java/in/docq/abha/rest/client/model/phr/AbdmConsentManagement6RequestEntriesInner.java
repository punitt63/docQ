/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AbdmConsentManagement6RequestEntriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement6RequestEntriesInner {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  @javax.annotation.Nonnull
  private String content;

  /**
   * Gets or Sets media
   */
  @JsonAdapter(MediaEnum.Adapter.class)
  public enum MediaEnum {
    APPLICATION_FHIR_JSON("application/fhir+json");

    private String value;

    MediaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediaEnum fromValue(String value) {
      for (MediaEnum b : MediaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MediaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  @javax.annotation.Nonnull
  private MediaEnum media;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  @javax.annotation.Nonnull
  private String checksum;

  public static final String SERIALIZED_NAME_CARE_CONTEXT_REFERENCE = "careContextReference";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXT_REFERENCE)
  @javax.annotation.Nonnull
  private String careContextReference;

  public AbdmConsentManagement6RequestEntriesInner() {
  }

  public AbdmConsentManagement6RequestEntriesInner content(@javax.annotation.Nonnull String content) {
    this.content = content;
    return this;
  }

  /**
   * Encrypted content
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(@javax.annotation.Nonnull String content) {
    this.content = content;
  }


  public AbdmConsentManagement6RequestEntriesInner media(@javax.annotation.Nonnull MediaEnum media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public MediaEnum getMedia() {
    return media;
  }

  public void setMedia(@javax.annotation.Nonnull MediaEnum media) {
    this.media = media;
  }


  public AbdmConsentManagement6RequestEntriesInner checksum(@javax.annotation.Nonnull String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Md5 checksum of the content before encryption
   * @return checksum
   */
  @javax.annotation.Nonnull
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(@javax.annotation.Nonnull String checksum) {
    this.checksum = checksum;
  }


  public AbdmConsentManagement6RequestEntriesInner careContextReference(@javax.annotation.Nonnull String careContextReference) {
    this.careContextReference = careContextReference;
    return this;
  }

  /**
   * Get careContextReference
   * @return careContextReference
   */
  @javax.annotation.Nonnull
  public String getCareContextReference() {
    return careContextReference;
  }

  public void setCareContextReference(@javax.annotation.Nonnull String careContextReference) {
    this.careContextReference = careContextReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement6RequestEntriesInner abdmConsentManagement6RequestEntriesInner = (AbdmConsentManagement6RequestEntriesInner) o;
    return Objects.equals(this.content, abdmConsentManagement6RequestEntriesInner.content) &&
        Objects.equals(this.media, abdmConsentManagement6RequestEntriesInner.media) &&
        Objects.equals(this.checksum, abdmConsentManagement6RequestEntriesInner.checksum) &&
        Objects.equals(this.careContextReference, abdmConsentManagement6RequestEntriesInner.careContextReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, media, checksum, careContextReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement6RequestEntriesInner {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    careContextReference: ").append(toIndentedString(careContextReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("media");
    openapiFields.add("checksum");
    openapiFields.add("careContextReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("media");
    openapiRequiredFields.add("checksum");
    openapiRequiredFields.add("careContextReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement6RequestEntriesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement6RequestEntriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement6RequestEntriesInner is not found in the empty JSON string", AbdmConsentManagement6RequestEntriesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement6RequestEntriesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement6RequestEntriesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement6RequestEntriesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("media").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media").toString()));
      }
      // validate the required field `media`
      MediaEnum.validateJsonElement(jsonObj.get("media"));
      if (!jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      if (!jsonObj.get("careContextReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `careContextReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("careContextReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement6RequestEntriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement6RequestEntriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement6RequestEntriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement6RequestEntriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement6RequestEntriesInner>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement6RequestEntriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement6RequestEntriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement6RequestEntriesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement6RequestEntriesInner
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement6RequestEntriesInner
   */
  public static AbdmConsentManagement6RequestEntriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement6RequestEntriesInner.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement6RequestEntriesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

