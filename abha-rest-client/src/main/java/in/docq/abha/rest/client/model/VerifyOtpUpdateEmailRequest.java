/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * VerifyOtpUpdateEmailRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T18:02:09.764020+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class VerifyOtpUpdateEmailRequest {
  public static final String SERIALIZED_NAME_AUTH_DATA = "authData";
  @SerializedName(SERIALIZED_NAME_AUTH_DATA)
  @javax.annotation.Nonnull
  private OtpVerifyMobileRequestAuthData authData;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nonnull
  private List<String> scope = new ArrayList<>();

  public VerifyOtpUpdateEmailRequest() {
  }

  public VerifyOtpUpdateEmailRequest authData(@javax.annotation.Nonnull OtpVerifyMobileRequestAuthData authData) {
    this.authData = authData;
    return this;
  }

  /**
   * Get authData
   * @return authData
   */
  @javax.annotation.Nonnull
  public OtpVerifyMobileRequestAuthData getAuthData() {
    return authData;
  }

  public void setAuthData(@javax.annotation.Nonnull OtpVerifyMobileRequestAuthData authData) {
    this.authData = authData;
  }


  public VerifyOtpUpdateEmailRequest scope(@javax.annotation.Nonnull List<String> scope) {
    this.scope = scope;
    return this;
  }

  public VerifyOtpUpdateEmailRequest addScopeItem(String scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<>();
    }
    this.scope.add(scopeItem);
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nonnull
  public List<String> getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nonnull List<String> scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyOtpUpdateEmailRequest verifyOtpUpdateEmailRequest = (VerifyOtpUpdateEmailRequest) o;
    return Objects.equals(this.authData, verifyOtpUpdateEmailRequest.authData) &&
        Objects.equals(this.scope, verifyOtpUpdateEmailRequest.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authData, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyOtpUpdateEmailRequest {\n");
    sb.append("    authData: ").append(toIndentedString(authData)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authData");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authData");
    openapiRequiredFields.add("scope");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyOtpUpdateEmailRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyOtpUpdateEmailRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyOtpUpdateEmailRequest is not found in the empty JSON string", VerifyOtpUpdateEmailRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyOtpUpdateEmailRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyOtpUpdateEmailRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerifyOtpUpdateEmailRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `authData`
      OtpVerifyMobileRequestAuthData.validateJsonElement(jsonObj.get("authData"));
      // ensure the required json array is present
      if (jsonObj.get("scope") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be an array in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyOtpUpdateEmailRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyOtpUpdateEmailRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyOtpUpdateEmailRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyOtpUpdateEmailRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyOtpUpdateEmailRequest>() {
           @Override
           public void write(JsonWriter out, VerifyOtpUpdateEmailRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyOtpUpdateEmailRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyOtpUpdateEmailRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyOtpUpdateEmailRequest
   * @throws IOException if the JSON string is invalid with respect to VerifyOtpUpdateEmailRequest
   */
  public static VerifyOtpUpdateEmailRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyOtpUpdateEmailRequest.class);
  }

  /**
   * Convert an instance of VerifyOtpUpdateEmailRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

