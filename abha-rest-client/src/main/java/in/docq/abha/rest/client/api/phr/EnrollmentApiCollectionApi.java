/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api.phr;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletionStage;

public class EnrollmentApiCollectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnrollmentApiCollectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnrollmentApiCollectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enrollAbhaAddress
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param enrollAbhaAddressRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;abhaAddress &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The desired ABHA address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;address &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s residential address&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;dayOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The day of the user’s birth &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtCode&lt;/td&gt; &lt;td&gt;The code of the user’s district.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtName&lt;/td&gt; &lt;td&gt;The name of the user’s district&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;email &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted email address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gender &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s gender.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s last name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;middleName&lt;/td&gt; &lt;td&gt;The user’s middle name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;mobile &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted mobile number.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;password &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted password.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pinCode&lt;/td&gt; &lt;td&gt;The user’s postal code.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateCode &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The code of the user’s state.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The name of the user’s state..&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;txnId&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;--&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;phrDetails&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the personal health record details of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt; The desired ABHA address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;hemant.bodhai@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;address:(required)&lt;/strong&gt; The user’s residential address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Street number 4, Sector 12&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;dayOfBirth:&lt;/strong&gt; The day of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtCode:(required)&lt;/strong&gt; The code of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtName:(required)&lt;/strong&gt; The name of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;email:&lt;/strong&gt; The user’s encrypted email address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;firstName:(required)&lt;/strong&gt; The user’s first name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;gender:(required)&lt;/strong&gt; The user’s gender. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;lastName:&lt;/strong&gt; The user’s last name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;middleName:&lt;/strong&gt; The user’s middle name (optional). &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;mobile:(required)&lt;/strong&gt; The user’s encrypted mobile number. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted mobile}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;monthOfBirth:&lt;/strong&gt; The month of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;password:(required)&lt;/strong&gt; The user’s encrypted password. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted Password}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;pinCode:(required)&lt;/strong&gt; The user’s postal code. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;421003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateCode:(required)&lt;/strong&gt; The code of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateName:(required)&lt;/strong&gt; The name of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;yearOfBirth:(required)&lt;/strong&gt; The year of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;br&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Enroll ABHA Address API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Enroll ABHA Address API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Enroll ABHA Address Errors:&lt;/strong&gt;&lt;/p&gt;    &lt;ol&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid First Name:&lt;/strong&gt; This error occurs when the first name provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Day and Month Of Birth:&lt;/strong&gt; This error occurs when the day and month of birth provided for enrolling an ABHA address are invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - ABHA Address already exists:&lt;/strong&gt; This error occurs when the ABHA address provided for enrollment already exists in the system.&lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call enrollAbhaAddressCall(String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enrollAbhaAddressRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/enrol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollAbhaAddressValidateBeforeCall(String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling enrollAbhaAddress(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling enrollAbhaAddress(Async)");
        }

        return enrollAbhaAddressCall(REQUEST_ID, TIMESTAMP, enrollAbhaAddressRequest, _callback);

    }

    /**
     * Enroll ABHA Address
     * This API endpoint is used to enroll a new ABHA (Ayushman Bharat Health Account) address. It collects and processes the user’s personal and contact information to create a unique ABHA address.
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param enrollAbhaAddressRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;abhaAddress &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The desired ABHA address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;address &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s residential address&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;dayOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The day of the user’s birth &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtCode&lt;/td&gt; &lt;td&gt;The code of the user’s district.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtName&lt;/td&gt; &lt;td&gt;The name of the user’s district&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;email &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted email address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gender &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s gender.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s last name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;middleName&lt;/td&gt; &lt;td&gt;The user’s middle name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;mobile &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted mobile number.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;password &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted password.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pinCode&lt;/td&gt; &lt;td&gt;The user’s postal code.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateCode &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The code of the user’s state.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The name of the user’s state..&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;txnId&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;--&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;phrDetails&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the personal health record details of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt; The desired ABHA address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;hemant.bodhai@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;address:(required)&lt;/strong&gt; The user’s residential address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Street number 4, Sector 12&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;dayOfBirth:&lt;/strong&gt; The day of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtCode:(required)&lt;/strong&gt; The code of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtName:(required)&lt;/strong&gt; The name of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;email:&lt;/strong&gt; The user’s encrypted email address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;firstName:(required)&lt;/strong&gt; The user’s first name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;gender:(required)&lt;/strong&gt; The user’s gender. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;lastName:&lt;/strong&gt; The user’s last name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;middleName:&lt;/strong&gt; The user’s middle name (optional). &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;mobile:(required)&lt;/strong&gt; The user’s encrypted mobile number. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted mobile}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;monthOfBirth:&lt;/strong&gt; The month of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;password:(required)&lt;/strong&gt; The user’s encrypted password. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted Password}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;pinCode:(required)&lt;/strong&gt; The user’s postal code. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;421003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateCode:(required)&lt;/strong&gt; The code of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateName:(required)&lt;/strong&gt; The name of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;yearOfBirth:(required)&lt;/strong&gt; The year of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;br&gt; (optional)
     * @return EnrollAbhaAddress200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Enroll ABHA Address API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Enroll ABHA Address API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Enroll ABHA Address Errors:&lt;/strong&gt;&lt;/p&gt;    &lt;ol&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid First Name:&lt;/strong&gt; This error occurs when the first name provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Day and Month Of Birth:&lt;/strong&gt; This error occurs when the day and month of birth provided for enrolling an ABHA address are invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - ABHA Address already exists:&lt;/strong&gt; This error occurs when the ABHA address provided for enrollment already exists in the system.&lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public EnrollAbhaAddress200Response enrollAbhaAddress(String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest) throws ApiException {
        ApiResponse<EnrollAbhaAddress200Response> localVarResp = enrollAbhaAddressWithHttpInfo(REQUEST_ID, TIMESTAMP, enrollAbhaAddressRequest);
        return localVarResp.getData();
    }

    /**
     * Enroll ABHA Address
     * This API endpoint is used to enroll a new ABHA (Ayushman Bharat Health Account) address. It collects and processes the user’s personal and contact information to create a unique ABHA address.
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param enrollAbhaAddressRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;abhaAddress &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The desired ABHA address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;address &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s residential address&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;dayOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The day of the user’s birth &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtCode&lt;/td&gt; &lt;td&gt;The code of the user’s district.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtName&lt;/td&gt; &lt;td&gt;The name of the user’s district&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;email &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted email address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gender &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s gender.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s last name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;middleName&lt;/td&gt; &lt;td&gt;The user’s middle name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;mobile &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted mobile number.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;password &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted password.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pinCode&lt;/td&gt; &lt;td&gt;The user’s postal code.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateCode &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The code of the user’s state.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The name of the user’s state..&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;txnId&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;--&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;phrDetails&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the personal health record details of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt; The desired ABHA address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;hemant.bodhai@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;address:(required)&lt;/strong&gt; The user’s residential address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Street number 4, Sector 12&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;dayOfBirth:&lt;/strong&gt; The day of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtCode:(required)&lt;/strong&gt; The code of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtName:(required)&lt;/strong&gt; The name of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;email:&lt;/strong&gt; The user’s encrypted email address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;firstName:(required)&lt;/strong&gt; The user’s first name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;gender:(required)&lt;/strong&gt; The user’s gender. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;lastName:&lt;/strong&gt; The user’s last name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;middleName:&lt;/strong&gt; The user’s middle name (optional). &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;mobile:(required)&lt;/strong&gt; The user’s encrypted mobile number. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted mobile}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;monthOfBirth:&lt;/strong&gt; The month of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;password:(required)&lt;/strong&gt; The user’s encrypted password. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted Password}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;pinCode:(required)&lt;/strong&gt; The user’s postal code. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;421003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateCode:(required)&lt;/strong&gt; The code of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateName:(required)&lt;/strong&gt; The name of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;yearOfBirth:(required)&lt;/strong&gt; The year of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;br&gt; (optional)
     * @return ApiResponse&lt;EnrollAbhaAddress200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Enroll ABHA Address API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Enroll ABHA Address API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Enroll ABHA Address Errors:&lt;/strong&gt;&lt;/p&gt;    &lt;ol&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid First Name:&lt;/strong&gt; This error occurs when the first name provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Day and Month Of Birth:&lt;/strong&gt; This error occurs when the day and month of birth provided for enrolling an ABHA address are invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - ABHA Address already exists:&lt;/strong&gt; This error occurs when the ABHA address provided for enrollment already exists in the system.&lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<EnrollAbhaAddress200Response> enrollAbhaAddressWithHttpInfo(String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = enrollAbhaAddressValidateBeforeCall(REQUEST_ID, TIMESTAMP, enrollAbhaAddressRequest, null);
        Type localVarReturnType = new TypeToken<EnrollAbhaAddress200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enroll ABHA Address (asynchronously)
     * This API endpoint is used to enroll a new ABHA (Ayushman Bharat Health Account) address. It collects and processes the user’s personal and contact information to create a unique ABHA address.
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param enrollAbhaAddressRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;abhaAddress &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The desired ABHA address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;address &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s residential address&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;dayOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The day of the user’s birth &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtCode&lt;/td&gt; &lt;td&gt;The code of the user’s district.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;districtName&lt;/td&gt; &lt;td&gt;The name of the user’s district&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;email &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted email address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gender &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s gender.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s last name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;middleName&lt;/td&gt; &lt;td&gt;The user’s middle name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;mobile &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted mobile number.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;password &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The user’s encrypted password.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pinCode&lt;/td&gt; &lt;td&gt;The user’s postal code.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateCode &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The code of the user’s state.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;stateName &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The name of the user’s state..&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;txnId&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;--&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;phrDetails&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the personal health record details of the user.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;abhaAddress (required):&lt;/strong&gt; The desired ABHA address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;hemant.bodhai@sbx&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;address:(required)&lt;/strong&gt; The user’s residential address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Street number 4, Sector 12&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;dayOfBirth:&lt;/strong&gt; The day of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtCode:(required)&lt;/strong&gt; The code of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;districtName:(required)&lt;/strong&gt; The name of the user’s district. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Nashik&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;email:&lt;/strong&gt; The user’s encrypted email address. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted email}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;firstName:(required)&lt;/strong&gt; The user’s first name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;gender:(required)&lt;/strong&gt; The user’s gender. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;M&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;lastName:&lt;/strong&gt; The user’s last name. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;middleName:&lt;/strong&gt; The user’s middle name (optional). &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;mobile:(required)&lt;/strong&gt; The user’s encrypted mobile number. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted mobile}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;monthOfBirth:&lt;/strong&gt; The month of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;password:(required)&lt;/strong&gt; The user’s encrypted password. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{Encrypted Password}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;pinCode:(required)&lt;/strong&gt; The user’s postal code. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;421003&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateCode:(required)&lt;/strong&gt; The code of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;27&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;stateName:(required)&lt;/strong&gt; The name of the user’s state. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Maharashtra&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;yearOfBirth:(required)&lt;/strong&gt; The year of the user’s birth. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;1998&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;br&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Enroll ABHA Address API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Enroll ABHA Address API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Enroll ABHA Address Errors:&lt;/strong&gt;&lt;/p&gt;    &lt;ol&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid First Name:&lt;/strong&gt; This error occurs when the first name provided for enrolling an ABHA address is invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - Invalid Day and Month Of Birth:&lt;/strong&gt; This error occurs when the day and month of birth provided for enrolling an ABHA address are invalid.&lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;&lt;strong&gt;Enroll ABHA Address - ABHA Address already exists:&lt;/strong&gt; This error occurs when the ABHA address provided for enrollment already exists in the system.&lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call enrollAbhaAddressAsync(String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest, final ApiCallback<EnrollAbhaAddress200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollAbhaAddressValidateBeforeCall(REQUEST_ID, TIMESTAMP, enrollAbhaAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<EnrollAbhaAddress200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<EnrollAbhaAddress200Response> enrollAbhaAddressAsyncCall(String token, String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest) throws ApiException {
        FutureApiCallBack<EnrollAbhaAddress200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = enrollAbhaAddressValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, enrollAbhaAddressRequest, callback);
        Type localVarReturnType = new TypeToken<EnrollAbhaAddress200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollAbhaAddressValidateBeforeCall(String token, String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling enrollAbhaAddress(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling enrollAbhaAddress(Async)");
        }

        return enrollAbhaAddressCall(token, REQUEST_ID, TIMESTAMP, enrollAbhaAddressRequest, _callback);

    }

    public okhttp3.Call enrollAbhaAddressCall(String token, String REQUEST_ID, Object TIMESTAMP, EnrollAbhaAddressRequest enrollAbhaAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enrollAbhaAddressRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/enroll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for isexistsApi
     * @param abhaAddress  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the isExists API. isExists API - ABHA address not exist: This response indicates that the ABHA (Ayushman Bharat Health Account) address does not exist in the system. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the isExists API. isExists API - Invalid ABHA Address: This error occurs when the ABHA (Ayushman Bharat Health Account) address provided is invalid. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates an unauthorized request. In this context, it refers to the lack of proper authentication during the operation of the isExists API. isExists API. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call isexistsApiCall(String abhaAddress, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/isExists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (abhaAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("abhaAddress", abhaAddress));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isexistsApiValidateBeforeCall(String abhaAddress, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'abhaAddress' is set
        if (abhaAddress == null) {
            throw new ApiException("Missing the required parameter 'abhaAddress' when calling isexistsApi(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling isexistsApi(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling isexistsApi(Async)");
        }

        return isexistsApiCall(abhaAddress, REQUEST_ID, TIMESTAMP, _callback);

    }

    /**
     * isExists API
     * This API endpoint checks if a given ABHA address already exists. It helps users determine the availability of their desired ABHA address before proceeding with registration.
     * @param abhaAddress  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the isExists API. isExists API - ABHA address not exist: This response indicates that the ABHA (Ayushman Bharat Health Account) address does not exist in the system. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the isExists API. isExists API - Invalid ABHA Address: This error occurs when the ABHA (Ayushman Bharat Health Account) address provided is invalid. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates an unauthorized request. In this context, it refers to the lack of proper authentication during the operation of the isExists API. isExists API. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
     </table>
     */
    public void isexistsApi(String abhaAddress, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        isexistsApiWithHttpInfo(abhaAddress, REQUEST_ID, TIMESTAMP);
    }

    /**
     * isExists API
     * This API endpoint checks if a given ABHA address already exists. It helps users determine the availability of their desired ABHA address before proceeding with registration.
     * @param abhaAddress  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the isExists API. isExists API - ABHA address not exist: This response indicates that the ABHA (Ayushman Bharat Health Account) address does not exist in the system. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the isExists API. isExists API - Invalid ABHA Address: This error occurs when the ABHA (Ayushman Bharat Health Account) address provided is invalid. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates an unauthorized request. In this context, it refers to the lack of proper authentication during the operation of the isExists API. isExists API. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> isexistsApiWithHttpInfo(String abhaAddress, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        okhttp3.Call localVarCall = isexistsApiValidateBeforeCall(abhaAddress, REQUEST_ID, TIMESTAMP, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * isExists API (asynchronously)
     * This API endpoint checks if a given ABHA address already exists. It helps users determine the availability of their desired ABHA address before proceeding with registration.
     * @param abhaAddress  (required)
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the isExists API. isExists API - ABHA address not exist: This response indicates that the ABHA (Ayushman Bharat Health Account) address does not exist in the system. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the isExists API. isExists API - Invalid ABHA Address: This error occurs when the ABHA (Ayushman Bharat Health Account) address provided is invalid. </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
        <tr><td> 401 </td><td> The 401 response code indicates an unauthorized request. In this context, it refers to the lack of proper authentication during the operation of the isExists API. isExists API. </td><td>  * Transfer-Encoding -  <br>  * accept-encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * date -  <br>  * postman-token -  <br>  * request-id -  <br>  * timestamp -  <br>  * www-authenticate -  <br>  * x-b3-sampled -  <br>  * x-b3-spanid -  <br>  * x-b3-traceid -  <br>  * x-envoy-attempt-count -  <br>  * x-envoy-upstream-service-time -  <br>  * x-forwarded-proto -  <br>  * x-request-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call isexistsApiAsync(String abhaAddress, String REQUEST_ID, String TIMESTAMP, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = isexistsApiValidateBeforeCall(abhaAddress, REQUEST_ID, TIMESTAMP, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public CompletionStage<Void> isexistsApiAsyncCall(String token, String abhaAddress, String REQUEST_ID, String TIMESTAMP) throws ApiException {
        FutureApiCallBack<Void> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = isexistsApiValidateBeforeCall(token, abhaAddress, REQUEST_ID, TIMESTAMP, callback);
        localVarApiClient.executeAsync(localVarCall, callback);
        return callback.getFuture();
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isexistsApiValidateBeforeCall(String token, String abhaAddress, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'abhaAddress' is set
        if (abhaAddress == null) {
            throw new ApiException("Missing the required parameter 'abhaAddress' when calling isexistsApi(Async)");
        }

        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling isexistsApi(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling isexistsApi(Async)");
        }

        return isexistsApiCall(token, abhaAddress, REQUEST_ID, TIMESTAMP, _callback);

    }

    public okhttp3.Call isexistsApiCall(String token, String abhaAddress, String REQUEST_ID, String TIMESTAMP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/isExists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        if (abhaAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("abhaAddress", abhaAddress));
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for otpRequestMobile
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpRequestMobileRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt;  &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/mobile number}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and delivery of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Responses:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;AADHAAR OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt; &lt;/ol&gt;  &lt;ol start &#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;ABHA OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system&lt;/li&gt; &lt;/ol&gt;  &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;Mobile OTP Response.&lt;/strong&gt; This OTP is generated for general mobile number verification purposes, such as logging into an account, completing a transaction, or verifying identity&lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) generation or validation process.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Response Errors:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Mobile&lt;/strong&gt;: The mobile number provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Scope&lt;/strong&gt;: The scope of the OTP response is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid LoginId&lt;/strong&gt;: The login ID provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for AADHAAR is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid LoginId&lt;/strong&gt;: The login ID provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for ABHA is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call otpRequestMobileCall(String token, String REQUEST_ID, String TIMESTAMP, OtpRequestMobileRequest otpRequestMobileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = otpRequestMobileRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/request/otp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call otpRequestMobileValidateBeforeCall(String token, String REQUEST_ID, String TIMESTAMP, OtpRequestMobileRequest otpRequestMobileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling otpRequestMobile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling otpRequestMobile(Async)");
        }

        return otpRequestMobileCall(token, REQUEST_ID, TIMESTAMP, otpRequestMobileRequest, _callback);

    }

    /**
     * OTP Request
     * This API endpoint is used to generate an OTP (One-Time Password) for the purpose of starting a registration transaction. Depending on the type of identifier provided ( ABHA Number, or Mobile Number), the OTP will be generated and sent to the corresponding registered mobile number. This is essential for verifying the user’s identity and ensuring secure access to the registration process.&lt;br&gt; &lt;br&gt;**Example of OTP Request**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP:** When the user wants to enroll using their ABHA Number, an OTP is sent to the mobile number registered with their Aadhaar linked mobile number. For this pass loginHint as \&quot;abha-number\&quot;.   &lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** When the user wants to enroll using their ABHA Number, an OTP is sent to the mobile number registered with their ABHA Number. For this pass loginHint as \&quot;abha-number\&quot;. &lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Mobile OTP:** When the user wants to enroll using their Mobile Number, an OTP is sent to the provided mobile number. For this pass loginHint as \&quot;mobile-number\&quot;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpRequestMobileRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt;  &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/mobile number}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @return OtpRequestMobile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and delivery of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Responses:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;AADHAAR OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt; &lt;/ol&gt;  &lt;ol start &#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;ABHA OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system&lt;/li&gt; &lt;/ol&gt;  &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;Mobile OTP Response.&lt;/strong&gt; This OTP is generated for general mobile number verification purposes, such as logging into an account, completing a transaction, or verifying identity&lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) generation or validation process.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Response Errors:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Mobile&lt;/strong&gt;: The mobile number provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Scope&lt;/strong&gt;: The scope of the OTP response is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid LoginId&lt;/strong&gt;: The login ID provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for AADHAAR is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid LoginId&lt;/strong&gt;: The login ID provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for ABHA is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public OtpRequestMobile200Response otpRequestMobile(String REQUEST_ID, String TIMESTAMP, OtpRequestMobileRequest otpRequestMobileRequest) throws ApiException {
        ApiResponse<OtpRequestMobile200Response> localVarResp = otpRequestMobileWithHttpInfo(REQUEST_ID, TIMESTAMP, otpRequestMobileRequest);
        return localVarResp.getData();
    }

    /**
     * OTP Request
     * This API endpoint is used to generate an OTP (One-Time Password) for the purpose of starting a registration transaction. Depending on the type of identifier provided ( ABHA Number, or Mobile Number), the OTP will be generated and sent to the corresponding registered mobile number. This is essential for verifying the user’s identity and ensuring secure access to the registration process.&lt;br&gt; &lt;br&gt;**Example of OTP Request**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP:** When the user wants to enroll using their ABHA Number, an OTP is sent to the mobile number registered with their Aadhaar linked mobile number. For this pass loginHint as \&quot;abha-number\&quot;.   &lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** When the user wants to enroll using their ABHA Number, an OTP is sent to the mobile number registered with their ABHA Number. For this pass loginHint as \&quot;abha-number\&quot;. &lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Mobile OTP:** When the user wants to enroll using their Mobile Number, an OTP is sent to the provided mobile number. For this pass loginHint as \&quot;mobile-number\&quot;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpRequestMobileRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt;  &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/mobile number}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @return ApiResponse&lt;OtpRequestMobile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and delivery of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Responses:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;AADHAAR OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt; &lt;/ol&gt;  &lt;ol start &#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;ABHA OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system&lt;/li&gt; &lt;/ol&gt;  &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;Mobile OTP Response.&lt;/strong&gt; This OTP is generated for general mobile number verification purposes, such as logging into an account, completing a transaction, or verifying identity&lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) generation or validation process.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Response Errors:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Mobile&lt;/strong&gt;: The mobile number provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Scope&lt;/strong&gt;: The scope of the OTP response is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid LoginId&lt;/strong&gt;: The login ID provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for AADHAAR is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid LoginId&lt;/strong&gt;: The login ID provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for ABHA is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<OtpRequestMobile200Response> otpRequestMobileWithHttpInfo(String REQUEST_ID, String TIMESTAMP, OtpRequestMobileRequest otpRequestMobileRequest) throws ApiException {
        okhttp3.Call localVarCall = otpRequestMobileValidateBeforeCall(null, REQUEST_ID, TIMESTAMP, otpRequestMobileRequest, null);
        Type localVarReturnType = new TypeToken<OtpRequestMobile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OTP Request (asynchronously)
     * This API endpoint is used to generate an OTP (One-Time Password) for the purpose of starting a registration transaction. Depending on the type of identifier provided ( ABHA Number, or Mobile Number), the OTP will be generated and sent to the corresponding registered mobile number. This is essential for verifying the user’s identity and ensuring secure access to the registration process.&lt;br&gt; &lt;br&gt;**Example of OTP Request**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP:** When the user wants to enroll using their ABHA Number, an OTP is sent to the mobile number registered with their Aadhaar linked mobile number. For this pass loginHint as \&quot;abha-number\&quot;.   &lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** When the user wants to enroll using their ABHA Number, an OTP is sent to the mobile number registered with their ABHA Number. For this pass loginHint as \&quot;abha-number\&quot;. &lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Mobile OTP:** When the user wants to enroll using their Mobile Number, an OTP is sent to the provided mobile number. For this pass loginHint as \&quot;mobile-number\&quot;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt; **1.** OTP will be valid for 10 minute only &lt;br&gt;&lt;br&gt;
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpRequestMobileRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt;  &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginHint&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Indicates the type of identifier being used for the OTP request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abha-number&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt;&lt;code&gt;abha-number&lt;/code&gt;, &lt;code&gt;mobile-number&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;loginId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The encrypted identifier (ABHA Number, or Mobile Number) for which the OTP is being requested.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted abha number/mobile number}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;otpSystem&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the system used for OTP generation.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abdm&lt;/code&gt;, &lt;code&gt;aadhaar&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful generation and delivery of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Responses:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;AADHAAR OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt; &lt;/ol&gt;  &lt;ol start &#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;ABHA OTP Response:&lt;/strong&gt; This OTP is generated for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system&lt;/li&gt; &lt;/ol&gt;  &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;Mobile OTP Response.&lt;/strong&gt; This OTP is generated for general mobile number verification purposes, such as logging into an account, completing a transaction, or verifying identity&lt;/li&gt; &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) generation or validation process.&lt;br&gt;&lt;br&gt; &lt;strong&gt;Types of OTP Response Errors:&lt;/strong&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Mobile&lt;/strong&gt;: The mobile number provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;2\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid Scope&lt;/strong&gt;: The scope of the OTP response is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;3\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - Invalid LoginId&lt;/strong&gt;: The login ID provided is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;4\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;5\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for AADHAAR is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;6\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - AADHAAR OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for AADHAAR OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;7\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid ABHA Number&lt;/strong&gt;: The ABHA number provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;8\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid LoginId&lt;/strong&gt;: The login ID provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;9\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid OTP System&lt;/strong&gt;: The OTP system for ABHA is invalid.&lt;/li&gt; &lt;/ol&gt; &lt;ol start&#x3D;\&quot;10\&quot;&gt; &lt;li&gt;&lt;strong&gt;OTP Response - ABHA OTP - Invalid Login Hint&lt;/strong&gt;: The login hint provided for ABHA OTP is invalid.&lt;/li&gt; &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call otpRequestMobileAsync(String REQUEST_ID, String TIMESTAMP, OtpRequestMobileRequest otpRequestMobileRequest, final ApiCallback<OtpRequestMobile200Response> _callback) throws ApiException {
        okhttp3.Call localVarCall = otpRequestMobileValidateBeforeCall(null, REQUEST_ID, TIMESTAMP, otpRequestMobileRequest, _callback);
        Type localVarReturnType = new TypeToken<OtpRequestMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<OtpRequestMobile200Response> otpRequestMobileAsyncCall(String token, String REQUEST_ID, String TIMESTAMP, OtpRequestMobileRequest otpRequestMobileRequest) throws ApiException {
        FutureApiCallBack<OtpRequestMobile200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = otpRequestMobileValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, otpRequestMobileRequest, callback);
        Type localVarReturnType = new TypeToken<OtpRequestMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }

    /**
     * Build call for otpVerifyMobile
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpVerifyMobileRequest &lt;b&gt;Below is the Request Body description:&lt;br&gt;&lt;/b&gt;&lt;br&gt; &lt;!--&lt;br&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods:&lt;/strong&gt; Specifies the method of authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp:&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue:&lt;/strong&gt; The encrypted OTP provided by the user. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId:&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt;   &lt;strong&gt;Types of OTP Verifications:&lt;/strong&gt;  &lt;ol&gt;  &lt;li&gt;&lt;strong&gt;AADHAAR OTP verify: &lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start &#x3D;\&quot;2\&quot;&gt;  &lt;li&gt;&lt;strong&gt;ABHA OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;  &lt;li&gt;&lt;strong&gt;Mobile OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent to a mobile number for purposes such as logging into an account, completing a transaction, or verifying identity.&lt;/li&gt;  &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process.&lt;br&gt;&lt;br&gt;    &lt;ol&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for AADHAAR OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;5\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for AADHAAR verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;6\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for AADHAAR OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;7\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the AADHAAR OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;8\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for ABHA OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;9\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for ABHA verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;10\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for ABHA OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;11&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the ABHA OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call otpVerifyMobileCall(String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = otpVerifyMobileRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call otpVerifyMobileValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling otpVerifyMobile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling otpVerifyMobile(Async)");
        }

        return otpVerifyMobileCall(REQUEST_ID, TIMESTAMP, otpVerifyMobileRequest, _callback);

    }

    /**
     * OTP Verify
     * This API endpoint is used to verify the OTP (One-Time Password) provided by the user during the registration process. The OTP verification ensures that the user has access to the mobile number associated with their Aadhaar Number, ABHA Number, or Mobile Number, thereby confirming their identity.&lt;br&gt;&lt;br&gt;**Example of OTP Verify**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP:** Verifies the OTP sent to the mobile number registered with the user’s Aadhaar.&lt;br&gt;&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** Verifies the OTP sent to the mobile number registered with the user’s ABHA.&lt;br&gt;&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Mobile OTP:** Verifies the OTP sent to the provided mobile number.&lt;br&gt;&lt;br&gt;Note:&lt;br&gt;**1. OTP will be valid for 10 minute only**
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpVerifyMobileRequest &lt;b&gt;Below is the Request Body description:&lt;br&gt;&lt;/b&gt;&lt;br&gt; &lt;!--&lt;br&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods:&lt;/strong&gt; Specifies the method of authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp:&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue:&lt;/strong&gt; The encrypted OTP provided by the user. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId:&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return OtpVerifyMobile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt;   &lt;strong&gt;Types of OTP Verifications:&lt;/strong&gt;  &lt;ol&gt;  &lt;li&gt;&lt;strong&gt;AADHAAR OTP verify: &lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start &#x3D;\&quot;2\&quot;&gt;  &lt;li&gt;&lt;strong&gt;ABHA OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;  &lt;li&gt;&lt;strong&gt;Mobile OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent to a mobile number for purposes such as logging into an account, completing a transaction, or verifying identity.&lt;/li&gt;  &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process.&lt;br&gt;&lt;br&gt;    &lt;ol&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for AADHAAR OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;5\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for AADHAAR verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;6\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for AADHAAR OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;7\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the AADHAAR OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;8\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for ABHA OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;9\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for ABHA verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;10\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for ABHA OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;11&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the ABHA OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public OtpVerifyMobile200Response otpVerifyMobile(String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest) throws ApiException {
        ApiResponse<OtpVerifyMobile200Response> localVarResp = otpVerifyMobileWithHttpInfo(REQUEST_ID, TIMESTAMP, otpVerifyMobileRequest);
        return localVarResp.getData();
    }

    /**
     * OTP Verify
     * This API endpoint is used to verify the OTP (One-Time Password) provided by the user during the registration process. The OTP verification ensures that the user has access to the mobile number associated with their Aadhaar Number, ABHA Number, or Mobile Number, thereby confirming their identity.&lt;br&gt;&lt;br&gt;**Example of OTP Verify**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP:** Verifies the OTP sent to the mobile number registered with the user’s Aadhaar.&lt;br&gt;&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** Verifies the OTP sent to the mobile number registered with the user’s ABHA.&lt;br&gt;&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Mobile OTP:** Verifies the OTP sent to the provided mobile number.&lt;br&gt;&lt;br&gt;Note:&lt;br&gt;**1. OTP will be valid for 10 minute only**
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpVerifyMobileRequest &lt;b&gt;Below is the Request Body description:&lt;br&gt;&lt;/b&gt;&lt;br&gt; &lt;!--&lt;br&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods:&lt;/strong&gt; Specifies the method of authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp:&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue:&lt;/strong&gt; The encrypted OTP provided by the user. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId:&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return ApiResponse&lt;OtpVerifyMobile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt;   &lt;strong&gt;Types of OTP Verifications:&lt;/strong&gt;  &lt;ol&gt;  &lt;li&gt;&lt;strong&gt;AADHAAR OTP verify: &lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start &#x3D;\&quot;2\&quot;&gt;  &lt;li&gt;&lt;strong&gt;ABHA OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;  &lt;li&gt;&lt;strong&gt;Mobile OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent to a mobile number for purposes such as logging into an account, completing a transaction, or verifying identity.&lt;/li&gt;  &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process.&lt;br&gt;&lt;br&gt;    &lt;ol&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for AADHAAR OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;5\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for AADHAAR verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;6\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for AADHAAR OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;7\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the AADHAAR OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;8\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for ABHA OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;9\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for ABHA verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;10\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for ABHA OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;11&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the ABHA OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<OtpVerifyMobile200Response> otpVerifyMobileWithHttpInfo(String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest) throws ApiException {
        okhttp3.Call localVarCall = otpVerifyMobileValidateBeforeCall(REQUEST_ID, TIMESTAMP, otpVerifyMobileRequest, null);
        Type localVarReturnType = new TypeToken<OtpVerifyMobile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OTP Verify (asynchronously)
     * This API endpoint is used to verify the OTP (One-Time Password) provided by the user during the registration process. The OTP verification ensures that the user has access to the mobile number associated with their Aadhaar Number, ABHA Number, or Mobile Number, thereby confirming their identity.&lt;br&gt;&lt;br&gt;**Example of OTP Verify**&lt;br&gt; &lt;br&gt;Example1:&lt;br&gt; **AADHAAR OTP:** Verifies the OTP sent to the mobile number registered with the user’s Aadhaar.&lt;br&gt;&lt;br&gt; &lt;br&gt;Example2:&lt;br&gt; **ABHA OTP:** Verifies the OTP sent to the mobile number registered with the user’s ABHA.&lt;br&gt;&lt;br&gt; &lt;br&gt;Example3:&lt;br&gt; **Mobile OTP:** Verifies the OTP sent to the provided mobile number.&lt;br&gt;&lt;br&gt;Note:&lt;br&gt;**1. OTP will be valid for 10 minute only**
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param otpVerifyMobileRequest &lt;b&gt;Below is the Request Body description:&lt;br&gt;&lt;/b&gt;&lt;br&gt; &lt;!--&lt;br&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;loginHint &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;Aadhaar,Abha And Mobile Number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;loginId &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;encrypted mobile-number&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;otpSystem &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;abdm/aadhaar&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;scope &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;Aadhaar/Abha/mobile&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;authData&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Contains the authentication methods and OTP details.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;authMethods:&lt;/strong&gt; Specifies the method of authentication. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;OTP\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;otp:&lt;/strong&gt; Contains the OTP value and transaction ID. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Properties:&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;otpValue:&lt;/strong&gt; The encrypted OTP provided by the user. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{encrypted OTP}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;txnId:&lt;/strong&gt; The transaction ID associated with the OTP request. &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;{{transactionId}}&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Specifies the scope of the OTP verification.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Array of strings&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;[\&quot;abha-login\&quot;, \&quot;mobile-verify\&quot;]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Possible Values:&lt;/strong&gt; &lt;code&gt;abha-login&lt;/code&gt;, &lt;code&gt;mobile-verify&lt;/code&gt;, &lt;code&gt;aadhaar-verify&lt;/code&gt;, &lt;code&gt;abha-address-enroll&lt;/code&gt;etc.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful verification of an OTP (One-Time Password) for various services.&lt;br&gt;&lt;br&gt;   &lt;strong&gt;Types of OTP Verifications:&lt;/strong&gt;  &lt;ol&gt;  &lt;li&gt;&lt;strong&gt;AADHAAR OTP verify: &lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to AADHAAR, the unique identification number issued by the Indian government.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start &#x3D;\&quot;2\&quot;&gt;  &lt;li&gt;&lt;strong&gt;ABHA OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent for authentication or verification purposes related to ABHA (Ayushman Bharat Health Account), which is part of India’s health ID system.&lt;/li&gt;  &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;  &lt;li&gt;&lt;strong&gt;Mobile OTP Verify:&lt;/strong&gt; This verification confirms the OTP sent to a mobile number for purposes such as logging into an account, completing a transaction, or verifying identity.&lt;/li&gt;  &lt;/ol&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the OTP (One-Time Password) verification process.&lt;br&gt;&lt;br&gt;    &lt;ol&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;2\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid OTP:&lt;/strong&gt; This error occurs when the OTP provided for verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;3\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;4\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for AADHAAR OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;5\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for AADHAAR verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;6\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for AADHAAR OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;7\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - AADHAAR OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the AADHAAR OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;8\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for ABHA OTP verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;9\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid OTP Request:&lt;/strong&gt; This error occurs when the OTP request for ABHA verification is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;\&quot;10\&quot;&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Auth Methods:&lt;/strong&gt; This error occurs when the authentication methods used for ABHA OTP verification are invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;    &lt;ol start&#x3D;11&gt;    &lt;li&gt;    &lt;p&gt;&lt;strong&gt;OTP Verify - ABHA OTP - Invalid Scope:&lt;/strong&gt; This error occurs when the scope of the ABHA OTP verification request is invalid.&lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call otpVerifyMobileAsync(String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest, final ApiCallback<OtpVerifyMobile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = otpVerifyMobileValidateBeforeCall(REQUEST_ID, TIMESTAMP, otpVerifyMobileRequest, _callback);
        Type localVarReturnType = new TypeToken<OtpVerifyMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<OtpVerifyMobile200Response> otpVerifyMobileAsyncCall(String token, String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest) throws ApiException {
        FutureApiCallBack<OtpVerifyMobile200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = otpVerifyMobileValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, otpVerifyMobileRequest, callback);
        Type localVarReturnType = new TypeToken<OtpVerifyMobile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call otpVerifyMobileValidateBeforeCall(String token, String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling otpVerifyMobile(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling otpVerifyMobile(Async)");
        }

        return otpVerifyMobileCall(token, REQUEST_ID, TIMESTAMP, otpVerifyMobileRequest, _callback);

    }

    public okhttp3.Call otpVerifyMobileCall(String token, String REQUEST_ID, String TIMESTAMP, OtpVerifyMobileRequest otpVerifyMobileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = otpVerifyMobileRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    /**
     * Build call for suggestionApi
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param suggestionApiRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;dateOfBirth &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The day of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName&lt;/td&gt; &lt;td&gt;The user’s last name &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;tr&gt; &lt;td&gt;txnId &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr width&#x3D;\&quot;100%\&quot; size&#x3D;\&quot;2\&quot;&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;4765527e-898b-4a62-91ec-be039fbf60f8&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;2025&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Suggestion API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Suggestion API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Suggestion API Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call suggestionApiCall(String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = suggestionApiRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/suggestion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestionApiValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling suggestionApi(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling suggestionApi(Async)");
        }

        return suggestionApiCall(REQUEST_ID, TIMESTAMP, suggestionApiRequest, _callback);

    }

    /**
     * Suggestion API
     * This API endpoint is used to provide suggestions for ABHA addresses based on the user’s personal information. It helps users find suitable ABHA addresses by generating a list of suggestions.
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param suggestionApiRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;dateOfBirth &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The day of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName&lt;/td&gt; &lt;td&gt;The user’s last name &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;tr&gt; &lt;td&gt;txnId &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr width&#x3D;\&quot;100%\&quot; size&#x3D;\&quot;2\&quot;&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;4765527e-898b-4a62-91ec-be039fbf60f8&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;2025&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return SuggestionApi200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Suggestion API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Suggestion API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Suggestion API Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public SuggestionApi200Response suggestionApi(String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest) throws ApiException {
        ApiResponse<SuggestionApi200Response> localVarResp = suggestionApiWithHttpInfo(REQUEST_ID, TIMESTAMP, suggestionApiRequest);
        return localVarResp.getData();
    }

    /**
     * Suggestion API
     * This API endpoint is used to provide suggestions for ABHA addresses based on the user’s personal information. It helps users find suitable ABHA addresses by generating a list of suggestions.
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param suggestionApiRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;dateOfBirth &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The day of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName&lt;/td&gt; &lt;td&gt;The user’s last name &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;tr&gt; &lt;td&gt;txnId &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr width&#x3D;\&quot;100%\&quot; size&#x3D;\&quot;2\&quot;&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;4765527e-898b-4a62-91ec-be039fbf60f8&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;2025&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @return ApiResponse&lt;SuggestionApi200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Suggestion API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Suggestion API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Suggestion API Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<SuggestionApi200Response> suggestionApiWithHttpInfo(String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest) throws ApiException {
        okhttp3.Call localVarCall = suggestionApiValidateBeforeCall(REQUEST_ID, TIMESTAMP, suggestionApiRequest, null);
        Type localVarReturnType = new TypeToken<SuggestionApi200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suggestion API (asynchronously)
     * This API endpoint is used to provide suggestions for ABHA addresses based on the user’s personal information. It helps users find suitable ABHA addresses by generating a list of suggestions.
     * @param REQUEST_ID  (required)
     * @param TIMESTAMP  (required)
     * @param suggestionApiRequest &lt;b&gt;Below is the Request Body description:&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;!--&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Attributes&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;dateOfBirth &lt;sup&gt; * required&lt;/td&gt; &lt;td&gt;The day of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;firstName &lt;sup&gt;* required &lt;/sup&gt;&lt;/td&gt; &lt;td&gt;The user’s first name.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;lastName&lt;/td&gt; &lt;td&gt;The user’s last name &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;monthOfBirth&lt;/td&gt; &lt;td&gt;The month of the user’s birth.&lt;/td&gt; &lt;tr&gt; &lt;td&gt;txnId &lt;sup&gt;* required&lt;/td&gt; &lt;td&gt;The transaction ID associated with the request.&lt;/td&gt; &lt;/tr&gt; &lt;td&gt;yearOfBirth&lt;/td&gt; &lt;td&gt;The year of the user’s birth.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;hr width&#x3D;\&quot;100%\&quot; size&#x3D;\&quot;2\&quot;&gt; --&gt; &lt;b&gt;Note:&lt;/b&gt; Mandatory fields can&#39;t be null. &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dayOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The day of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;14&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firstName&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s first name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;John&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lastName&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The user’s last name.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Doe&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;monthOfBirth&lt;/strong&gt; (optional):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The month of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;txnId&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The transaction ID associated with the request.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;4765527e-898b-4a62-91ec-be039fbf60f8&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;yearOfBirth&lt;/strong&gt; (required):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; The year of the user’s birth.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; String&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;2025&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ol&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The 200 response code indicates a successful request. In this context, it refers to the successful operation of the Suggestion API. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The 400 response code indicates a bad request. In this context, it refers to various errors encountered during the operation of the Suggestion API.&lt;br&gt;&lt;br&gt; &lt;p&gt;&lt;strong&gt;Types of Suggestion API Errors:&lt;/strong&gt;&lt;/p&gt;   &lt;ol&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;2\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;3\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;4\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;5\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;6\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;7\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;8\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;9\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;10\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;11\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Transaction Id:&lt;/strong&gt; This error occurs when the transaction ID provided for the Suggestion API is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;12\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Blank FirstName:&lt;/strong&gt; This error occurs when the first name field is left blank in the Suggestion API request.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;13\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Day Of Birth:&lt;/strong&gt; This error occurs when the day of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;14\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Month Of Birth:&lt;/strong&gt; This error occurs when the month of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt;   &lt;ol start&#x3D;\&quot;15\&quot;&gt;   &lt;li&gt;&lt;strong&gt;Suggestion API - Invalid Year Of Birth:&lt;/strong&gt; This error occurs when the year of birth provided in the Suggestion API request is invalid.&lt;/li&gt;   &lt;/ol&gt; </td><td>  * Transfer-Encoding -  <br>  * access-control-allow-headers -  <br>  * access-control-allow-methods -  <br>  * activityid -  <br>  * cache-control -  <br>  * content-security-policy -  <br>  * date -  <br>  * expires -  <br>  * permissions-policy -  <br>  * pragma -  <br>  * referrer-policy -  <br>  * strict-transport-security -  <br>  * vary -  <br>  * x-content-type-options -  <br>  * x-envoy-upstream-service-time -  <br>  * x-frame-options -  <br>  * x-xss-protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call suggestionApiAsync(String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest, final ApiCallback<SuggestionApi200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestionApiValidateBeforeCall(REQUEST_ID, TIMESTAMP, suggestionApiRequest, _callback);
        Type localVarReturnType = new TypeToken<SuggestionApi200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public CompletionStage<SuggestionApi200Response> suggestionApiAsyncCall(String token, String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest) throws ApiException {
        FutureApiCallBack<SuggestionApi200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = suggestionApiValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, suggestionApiRequest, callback);
        Type localVarReturnType = new TypeToken<SuggestionApi200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestionApiValidateBeforeCall(String token, String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling suggestionApi(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling suggestionApi(Async)");
        }

        return suggestionApiCall(token, REQUEST_ID, TIMESTAMP, suggestionApiRequest, _callback);

    }

    public okhttp3.Call suggestionApiCall(String token, String REQUEST_ID, String TIMESTAMP, SuggestionApiRequest suggestionApiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = suggestionApiRequest;

        // create path and map variables
        String localVarPath = "/abha/api/v3/phr/app/enrollment/suggestion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
}
