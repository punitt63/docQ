/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import in.docq.abha.rest.client.model.ConsentManagement1RequestNotificationConsentDetailPermissionFrequency;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AbdmConsentManagement4200ResponsePermission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement4200ResponsePermission {
  /**
   * Gets or Sets accessMode
   */
  @JsonAdapter(AccessModeEnum.Adapter.class)
  public enum AccessModeEnum {
    VIEW("VIEW"),
    
    STORE("STORE"),
    
    STREAM("STREAM"),
    
    QUERY("QUERY");

    private String value;

    AccessModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessModeEnum fromValue(String value) {
      for (AccessModeEnum b : AccessModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_MODE = "accessMode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  @javax.annotation.Nonnull
  private AccessModeEnum accessMode;

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  @javax.annotation.Nonnull
  private AbdmConsentManagement4200ResponsePermissionDateRange dateRange;

  public static final String SERIALIZED_NAME_DATA_ERASE_AT = "dataEraseAt";
  @SerializedName(SERIALIZED_NAME_DATA_ERASE_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime dataEraseAt;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  @javax.annotation.Nonnull
  private in.docq.abha.rest.client.model.ConsentManagement1RequestNotificationConsentDetailPermissionFrequency frequency;

  public AbdmConsentManagement4200ResponsePermission() {
  }

  public AbdmConsentManagement4200ResponsePermission accessMode(@javax.annotation.Nonnull AccessModeEnum accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Get accessMode
   * @return accessMode
   */
  @javax.annotation.Nonnull
  public AccessModeEnum getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(@javax.annotation.Nonnull AccessModeEnum accessMode) {
    this.accessMode = accessMode;
  }


  public AbdmConsentManagement4200ResponsePermission dateRange(@javax.annotation.Nonnull AbdmConsentManagement4200ResponsePermissionDateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nonnull
  public AbdmConsentManagement4200ResponsePermissionDateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(@javax.annotation.Nonnull AbdmConsentManagement4200ResponsePermissionDateRange dateRange) {
    this.dateRange = dateRange;
  }


  public AbdmConsentManagement4200ResponsePermission dataEraseAt(@javax.annotation.Nonnull OffsetDateTime dataEraseAt) {
    this.dataEraseAt = dataEraseAt;
    return this;
  }

  /**
   * The date at which the consent expire. Should be UTC date time in ISO format
   * @return dataEraseAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDataEraseAt() {
    return dataEraseAt;
  }

  public void setDataEraseAt(@javax.annotation.Nonnull OffsetDateTime dataEraseAt) {
    this.dataEraseAt = dataEraseAt;
  }


  public AbdmConsentManagement4200ResponsePermission frequency(@javax.annotation.Nonnull in.docq.abha.rest.client.model.ConsentManagement1RequestNotificationConsentDetailPermissionFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nonnull
  public in.docq.abha.rest.client.model.ConsentManagement1RequestNotificationConsentDetailPermissionFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(@javax.annotation.Nonnull in.docq.abha.rest.client.model.ConsentManagement1RequestNotificationConsentDetailPermissionFrequency frequency) {
    this.frequency = frequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement4200ResponsePermission abdmConsentManagement4200ResponsePermission = (AbdmConsentManagement4200ResponsePermission) o;
    return Objects.equals(this.accessMode, abdmConsentManagement4200ResponsePermission.accessMode) &&
        Objects.equals(this.dateRange, abdmConsentManagement4200ResponsePermission.dateRange) &&
        Objects.equals(this.dataEraseAt, abdmConsentManagement4200ResponsePermission.dataEraseAt) &&
        Objects.equals(this.frequency, abdmConsentManagement4200ResponsePermission.frequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessMode, dateRange, dataEraseAt, frequency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement4200ResponsePermission {\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    dataEraseAt: ").append(toIndentedString(dataEraseAt)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessMode");
    openapiFields.add("dateRange");
    openapiFields.add("dataEraseAt");
    openapiFields.add("frequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessMode");
    openapiRequiredFields.add("dateRange");
    openapiRequiredFields.add("dataEraseAt");
    openapiRequiredFields.add("frequency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement4200ResponsePermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement4200ResponsePermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement4200ResponsePermission is not found in the empty JSON string", AbdmConsentManagement4200ResponsePermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement4200ResponsePermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement4200ResponsePermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement4200ResponsePermission.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accessMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessMode").toString()));
      }
      // validate the required field `accessMode`
      AccessModeEnum.validateJsonElement(jsonObj.get("accessMode"));
      // validate the required field `dateRange`
      AbdmConsentManagement4200ResponsePermissionDateRange.validateJsonElement(jsonObj.get("dateRange"));
      // validate the required field `frequency`
      ConsentManagement1RequestNotificationConsentDetailPermissionFrequency.validateJsonElement(jsonObj.get("frequency"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement4200ResponsePermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement4200ResponsePermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement4200ResponsePermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement4200ResponsePermission.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement4200ResponsePermission>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement4200ResponsePermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement4200ResponsePermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement4200ResponsePermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement4200ResponsePermission
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement4200ResponsePermission
   */
  public static AbdmConsentManagement4200ResponsePermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement4200ResponsePermission.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement4200ResponsePermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

