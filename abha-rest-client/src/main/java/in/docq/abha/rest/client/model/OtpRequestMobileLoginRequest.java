/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * OtpRequestMobileLoginRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T18:02:09.764020+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class OtpRequestMobileLoginRequest {
  public static final String SERIALIZED_NAME_LOGIN_HINT = "loginHint";
  @SerializedName(SERIALIZED_NAME_LOGIN_HINT)
  @javax.annotation.Nonnull
  private String loginHint;

  public static final String SERIALIZED_NAME_LOGIN_ID = "loginId";
  @SerializedName(SERIALIZED_NAME_LOGIN_ID)
  @javax.annotation.Nonnull
  private String loginId;

  public static final String SERIALIZED_NAME_OTP_SYSTEM = "otpSystem";
  @SerializedName(SERIALIZED_NAME_OTP_SYSTEM)
  @javax.annotation.Nonnull
  private String otpSystem;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nonnull
  private List<String> scope = new ArrayList<>();

  public OtpRequestMobileLoginRequest() {
  }

  public OtpRequestMobileLoginRequest loginHint(@javax.annotation.Nonnull String loginHint) {
    this.loginHint = loginHint;
    return this;
  }

  /**
   * Get loginHint
   * @return loginHint
   */
  @javax.annotation.Nonnull
  public String getLoginHint() {
    return loginHint;
  }

  public void setLoginHint(@javax.annotation.Nonnull String loginHint) {
    this.loginHint = loginHint;
  }


  public OtpRequestMobileLoginRequest loginId(@javax.annotation.Nonnull String loginId) {
    this.loginId = loginId;
    return this;
  }

  /**
   * Get loginId
   * @return loginId
   */
  @javax.annotation.Nonnull
  public String getLoginId() {
    return loginId;
  }

  public void setLoginId(@javax.annotation.Nonnull String loginId) {
    this.loginId = loginId;
  }


  public OtpRequestMobileLoginRequest otpSystem(@javax.annotation.Nonnull String otpSystem) {
    this.otpSystem = otpSystem;
    return this;
  }

  /**
   * Get otpSystem
   * @return otpSystem
   */
  @javax.annotation.Nonnull
  public String getOtpSystem() {
    return otpSystem;
  }

  public void setOtpSystem(@javax.annotation.Nonnull String otpSystem) {
    this.otpSystem = otpSystem;
  }


  public OtpRequestMobileLoginRequest scope(@javax.annotation.Nonnull List<String> scope) {
    this.scope = scope;
    return this;
  }

  public OtpRequestMobileLoginRequest addScopeItem(String scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<>();
    }
    this.scope.add(scopeItem);
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nonnull
  public List<String> getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nonnull List<String> scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtpRequestMobileLoginRequest otpRequestMobileLoginRequest = (OtpRequestMobileLoginRequest) o;
    return Objects.equals(this.loginHint, otpRequestMobileLoginRequest.loginHint) &&
        Objects.equals(this.loginId, otpRequestMobileLoginRequest.loginId) &&
        Objects.equals(this.otpSystem, otpRequestMobileLoginRequest.otpSystem) &&
        Objects.equals(this.scope, otpRequestMobileLoginRequest.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginHint, loginId, otpSystem, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtpRequestMobileLoginRequest {\n");
    sb.append("    loginHint: ").append(toIndentedString(loginHint)).append("\n");
    sb.append("    loginId: ").append(toIndentedString(loginId)).append("\n");
    sb.append("    otpSystem: ").append(toIndentedString(otpSystem)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loginHint");
    openapiFields.add("loginId");
    openapiFields.add("otpSystem");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("loginHint");
    openapiRequiredFields.add("loginId");
    openapiRequiredFields.add("otpSystem");
    openapiRequiredFields.add("scope");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtpRequestMobileLoginRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtpRequestMobileLoginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtpRequestMobileLoginRequest is not found in the empty JSON string", OtpRequestMobileLoginRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtpRequestMobileLoginRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtpRequestMobileLoginRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OtpRequestMobileLoginRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("loginHint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginHint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginHint").toString()));
      }
      if (!jsonObj.get("loginId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginId").toString()));
      }
      if (!jsonObj.get("otpSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otpSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otpSystem").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scope") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be an array in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtpRequestMobileLoginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtpRequestMobileLoginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtpRequestMobileLoginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtpRequestMobileLoginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OtpRequestMobileLoginRequest>() {
           @Override
           public void write(JsonWriter out, OtpRequestMobileLoginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtpRequestMobileLoginRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtpRequestMobileLoginRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtpRequestMobileLoginRequest
   * @throws IOException if the JSON string is invalid with respect to OtpRequestMobileLoginRequest
   */
  public static OtpRequestMobileLoginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtpRequestMobileLoginRequest.class);
  }

  /**
   * Convert an instance of OtpRequestMobileLoginRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

