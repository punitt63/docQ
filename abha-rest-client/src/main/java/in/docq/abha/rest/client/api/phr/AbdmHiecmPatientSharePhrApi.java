/*
 * HIE-CM Profile Share
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api.phr;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.AbdmPatientShareHip1Request;
import in.docq.abha.rest.client.model.PatientShare2Request;
import in.docq.abha.rest.client.model.ProfileShare3200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletionStage;

public class AbdmHiecmPatientSharePhrApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AbdmHiecmPatientSharePhrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AbdmHiecmPatientSharePhrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for abdmPatientShareHip1
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmPatientShareHip1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmPatientShareHip1Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmPatientShareHip1Request;

        // create path and map variables
        String localVarPath = "/api/hiecm/patient-share/v3/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmPatientShareHip1ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'abdmPatientShareHip1Request' is set
        if (abdmPatientShareHip1Request == null) {
            throw new ApiException("Missing the required parameter 'abdmPatientShareHip1Request' when calling abdmPatientShareHip1(Async)");
        }

        return abdmPatientShareHip1Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmPatientShareHip1Request, _callback);

    }

    /**
     * This API will be invoked from the PHR-HIU application for sharing the patient/user profile with the HMIS/LIMS.
     * This is a API will be invoked from the &lt;b&gt;PHR-HIU&lt;/b&gt; to share the user/patient profile with HMIS/LIMS. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;Authorization will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;li&gt;X-AUTH-TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password[ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;X-CM-ID  consent manager ID[ Example: sbx ]&lt;/li&gt; &lt;li&gt;X-HIU-ID  HIU ID[ Example: HIU ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;li&gt; &lt;b&gt;Request Body&lt;/b&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;intent This is a key value pair  which contains the purpose [ Example: {purpose: PROFILE_SHARE } ]&lt;/li&gt; &lt;li&gt;metaData This is a key value pair which contains the location longitude and latitude[ Example: {hip_id: ABDM_HIP, context: 123, lat: 20.5937 long: 78.9629} ]&lt;/li&gt; &lt;li&gt;profile which contains user details.&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmPatientShareHip1Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void abdmPatientShareHip1(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request) throws ApiException {
        abdmPatientShareHip1WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmPatientShareHip1Request);
    }

    /**
     * This API will be invoked from the PHR-HIU application for sharing the patient/user profile with the HMIS/LIMS.
     * This is a API will be invoked from the &lt;b&gt;PHR-HIU&lt;/b&gt; to share the user/patient profile with HMIS/LIMS. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;Authorization will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;li&gt;X-AUTH-TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password[ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;X-CM-ID  consent manager ID[ Example: sbx ]&lt;/li&gt; &lt;li&gt;X-HIU-ID  HIU ID[ Example: HIU ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;li&gt; &lt;b&gt;Request Body&lt;/b&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;intent This is a key value pair  which contains the purpose [ Example: {purpose: PROFILE_SHARE } ]&lt;/li&gt; &lt;li&gt;metaData This is a key value pair which contains the location longitude and latitude[ Example: {hip_id: ABDM_HIP, context: 123, lat: 20.5937 long: 78.9629} ]&lt;/li&gt; &lt;li&gt;profile which contains user details.&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmPatientShareHip1Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmPatientShareHip1WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request) throws ApiException {
        okhttp3.Call localVarCall = abdmPatientShareHip1ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmPatientShareHip1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API will be invoked from the PHR-HIU application for sharing the patient/user profile with the HMIS/LIMS. (asynchronously)
     * This is a API will be invoked from the &lt;b&gt;PHR-HIU&lt;/b&gt; to share the user/patient profile with HMIS/LIMS. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;Authorization will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;li&gt;X-AUTH-TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password[ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;X-CM-ID  consent manager ID[ Example: sbx ]&lt;/li&gt; &lt;li&gt;X-HIU-ID  HIU ID[ Example: HIU ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;li&gt; &lt;b&gt;Request Body&lt;/b&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;intent This is a key value pair  which contains the purpose [ Example: {purpose: PROFILE_SHARE } ]&lt;/li&gt; &lt;li&gt;metaData This is a key value pair which contains the location longitude and latitude[ Example: {hip_id: ABDM_HIP, context: 123, lat: 20.5937 long: 78.9629} ]&lt;/li&gt; &lt;li&gt;profile which contains user details.&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmPatientShareHip1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmPatientShareHip1Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmPatientShareHip1ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmPatientShareHip1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for profileShare2
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param patientShare2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profileShare2Call(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientShare2Request;

        // create path and map variables
        String localVarPath = "/<callback_url>/api/v3/hiu/patient/on-share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profileShare2ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling profileShare2(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling profileShare2(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling profileShare2(Async)");
        }

        // verify the required parameter 'patientShare2Request' is set
        if (patientShare2Request == null) {
            throw new ApiException("Missing the required parameter 'patientShare2Request' when calling profileShare2(Async)");
        }

        return profileShare2Call(REQUEST_ID, TIMESTAMP, X_HIU_ID, patientShare2Request, _callback);

    }

    /**
     * This API will be invoked to the HIU for sharing the response of HIECM&#39;s /api/hiecm/patient-share/v3/on-share API
     * This is a API will be invoked by &lt;b&gt;HIU&lt;/b&gt; to share the response of HIECM&#39;s /api/hiecm/patient-share/v3/on-share API. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;Authorization will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;li&gt;X-HIU-ID  HIU ID[ Example: HIU ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;li&gt; &lt;b&gt;Request Body&lt;/b&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;Incase of success scenario,acknowledgement is mandatory and error is optional&lt;/li&gt; &lt;li&gt;Incase if failure scenario,error is mandatory and acknowledgment is optional&lt;/li&gt; &lt;li&gt;response is mandatory object in both the cases&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param patientShare2Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void profileShare2(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request) throws ApiException {
        profileShare2WithHttpInfo(REQUEST_ID, TIMESTAMP, X_HIU_ID, patientShare2Request);
    }

    /**
     * This API will be invoked to the HIU for sharing the response of HIECM&#39;s /api/hiecm/patient-share/v3/on-share API
     * This is a API will be invoked by &lt;b&gt;HIU&lt;/b&gt; to share the response of HIECM&#39;s /api/hiecm/patient-share/v3/on-share API. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;Authorization will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;li&gt;X-HIU-ID  HIU ID[ Example: HIU ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;li&gt; &lt;b&gt;Request Body&lt;/b&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;Incase of success scenario,acknowledgement is mandatory and error is optional&lt;/li&gt; &lt;li&gt;Incase if failure scenario,error is mandatory and acknowledgment is optional&lt;/li&gt; &lt;li&gt;response is mandatory object in both the cases&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param patientShare2Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> profileShare2WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request) throws ApiException {
        okhttp3.Call localVarCall = profileShare2ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, patientShare2Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API will be invoked to the HIU for sharing the response of HIECM&#39;s /api/hiecm/patient-share/v3/on-share API (asynchronously)
     * This is a API will be invoked by &lt;b&gt;HIU&lt;/b&gt; to share the response of HIECM&#39;s /api/hiecm/patient-share/v3/on-share API. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;Authorization will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;li&gt;X-HIU-ID  HIU ID[ Example: HIU ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;li&gt; &lt;b&gt;Request Body&lt;/b&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;Incase of success scenario,acknowledgement is mandatory and error is optional&lt;/li&gt; &lt;li&gt;Incase if failure scenario,error is mandatory and acknowledgment is optional&lt;/li&gt; &lt;li&gt;response is mandatory object in both the cases&lt;/li&gt; &lt;/ol&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param patientShare2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profileShare2Async(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = profileShare2ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, patientShare2Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for profileShare3
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The limit of data to be fetched (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profileShare3Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/patient-share/v3/profile/getTokenDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profileShare3ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling profileShare3(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling profileShare3(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling profileShare3(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling profileShare3(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling profileShare3(Async)");
        }

        return profileShare3Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, _callback);

    }

    /**
     * This API will be invoked to get the historical token numbers of the patient
     * This is a API will be invoked get the historical token numbers of the patient. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;AUTHORIZATION will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The limit of data to be fetched (required)
     * @return ProfileShare3200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ProfileShare3200Response profileShare3(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit) throws ApiException {
        ApiResponse<ProfileShare3200Response> localVarResp = profileShare3WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit);
        return localVarResp.getData();
    }

    /**
     * This API will be invoked to get the historical token numbers of the patient
     * This is a API will be invoked get the historical token numbers of the patient. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;AUTHORIZATION will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The limit of data to be fetched (required)
     * @return ApiResponse&lt;ProfileShare3200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileShare3200Response> profileShare3WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit) throws ApiException {
        okhttp3.Call localVarCall = profileShare3ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, null);
        Type localVarReturnType = new TypeToken<ProfileShare3200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API will be invoked to get the historical token numbers of the patient (asynchronously)
     * This is a API will be invoked get the historical token numbers of the patient. &lt;ol type&#x3D;&#39;1&#39;&gt; &lt;li&gt; &lt;b&gt;Header&lt;/b&gt;  &lt;ol type&#x3D;&#39;a&#39;&gt; &lt;br/&gt; &lt;li&gt;AUTHORIZATION will be provided by the gateway session API after the successful verification of client ID and Secret [ Example: eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJ2YXNhbnRoYWt1bWFyLmtlc2F2 ]&lt;/li&gt; &lt;li&gt;REQUEST-ID unique UUID[ Example: 18235d89-cb13-479d-ad71-7a57d5f669a8 ]&lt;/li&gt; &lt;li&gt;TIMESTAMP  actual time of the requested was initiated[ Example: 2022-10-06T10:10:00.587Z ]&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;br/&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param limit The limit of data to be fetched (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profileShare3Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit, final ApiCallback<ProfileShare3200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = profileShare3ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, _callback);
        Type localVarReturnType = new TypeToken<ProfileShare3200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    // CompletionStage wrapper methods

    private okhttp3.Call abdmPatientShareHip1ValidateBeforeCall(String token, String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmPatientShareHip1(Async)");
        }

        // verify the required parameter 'abdmPatientShareHip1Request' is set
        if (abdmPatientShareHip1Request == null) {
            throw new ApiException("Missing the required parameter 'abdmPatientShareHip1Request' when calling abdmPatientShareHip1(Async)");
        }

        return abdmPatientShareHip1Call(token, REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmPatientShareHip1Request, _callback);
    }

    private okhttp3.Call profileShare2ValidateBeforeCall(String token, String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling profileShare2(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling profileShare2(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling profileShare2(Async)");
        }

        // verify the required parameter 'patientShare2Request' is set
        if (patientShare2Request == null) {
            throw new ApiException("Missing the required parameter 'patientShare2Request' when calling profileShare2(Async)");
        }

        return profileShare2Call(token, REQUEST_ID, TIMESTAMP, X_HIU_ID, patientShare2Request, _callback);
    }

    private okhttp3.Call profileShare3ValidateBeforeCall(String token, String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling profileShare3(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling profileShare3(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling profileShare3(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling profileShare3(Async)");
        }

        return profileShare3Call(token, REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, _callback);
    }

    private okhttp3.Call abdmPatientShareHip1Call(String token, String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmPatientShareHip1Request;

        // create path and map variables
        String localVarPath = "/api/hiecm/patient-share/v3/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }

        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };

        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    private okhttp3.Call profileShare2Call(String token, String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientShare2Request;

        // create path and map variables
        String localVarPath = "/<callback_url>/api/v3/hiu/patient/on-share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }

        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }

        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };

        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    private okhttp3.Call profileShare3Call(String token, String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/hiecm/patient-share/v3/profile/getTokenDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (token != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + localVarApiClient.parameterToString(token));
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }

        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }

        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }

        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };

        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    public CompletionStage<Void> abdmPatientShareHip1AsyncCall(String token, String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmPatientShareHip1Request abdmPatientShareHip1Request) throws ApiException {
        FutureApiCallBack<Void> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = abdmPatientShareHip1ValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmPatientShareHip1Request, callback);
        Type localVarReturnType = new TypeToken<Void>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }

    public CompletionStage<Void> profileShare2AsyncCall(String token, String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, PatientShare2Request patientShare2Request) throws ApiException {
        FutureApiCallBack<Void> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = profileShare2ValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, X_HIU_ID, patientShare2Request, callback);
        Type localVarReturnType = new TypeToken<Void>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }

    public CompletionStage<ProfileShare3200Response> profileShare3AsyncCall(String token, String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_AUTH_TOKEN, String limit) throws ApiException {
        FutureApiCallBack<ProfileShare3200Response> callback = FutureApiCallBack.newCallback();
        okhttp3.Call localVarCall = profileShare3ValidateBeforeCall(token, REQUEST_ID, TIMESTAMP, X_CM_ID, X_AUTH_TOKEN, limit, callback);
        Type localVarReturnType = new TypeToken<ProfileShare3200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return callback.getFuture();
    }
}
