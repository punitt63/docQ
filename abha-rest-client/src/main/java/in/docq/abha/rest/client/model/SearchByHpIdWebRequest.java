/*
 * Healthcare Professional ID Service
 * It is important to standardize the process of identification of an individual across Healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue a Healthcare Professional ID to an individual, one only needs basic demographic details like **Name, Year of Birth, Gender**. In addition, citizens should be able to update contact information easily.  The Healthcare Professional ID will be used for the purposes of uniquely identifying persons, authenticating them, and threading their health records (only with the informed consent of the patient) across multiple systems and stakeholders. ## API Security</h4> You need Authorization Token and X-HIP-ID to consume APIs.   ## Notes:    <b>1. In order to have access to Healthcare Professional ID APIs, Your `ClientId`<sup style='color:red'>* required</sup> must have hid role in gateway. So if you want access to these APIs then please request it in your Ayushman Bharat Digital Mission (ABDM) on-boarding request.</b>   <b>2. When calling APIs, please ensure that Authorization header must have format as `Bearer <Token_Value>`. Please note that prefix Bearer followed by space before token value.</b>   <b>3. Please use latest version of **APIs (currently latest V2)**</b> as <b style=\"color:red\">older version may get deprecated soon.</b></b>   <b>4. Check the state and district codes from LGD directory [click here](https://lgdirectory.gov.in/)</b>    <b>5. Highlighted Changes in the API Version 2 </b>  - Sensitive data (Data like OTP, Aadhaar Number/Virtual ID/UID Token, Password, Username etc) have to be encrypted. - Data is encrypted by the public certificate. The certificate can be downloaded from the __/v1/auth/cert__  API under  __Authentication__ tag in the version 1. - RSA Encryption to encrypt the data. Cipher Type - <b>RSA/ECB/PKCS1Padding</b>.  online tool to encrypt data [click here](https://www.devglan.com/online-tools/rsa-encryption-decryption)    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import in.docq.abha.rest.client.JSON;

/**
 * SearchByHpIdWebRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-09T21:20:59.109435+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class SearchByHpIdWebRequest {
  public static final String SERIALIZED_NAME_ID_TYPE = "idType";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  @javax.annotation.Nullable
  private String idType;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  @javax.annotation.Nullable
  private String domainName;

  public static final String SERIALIZED_NAME_HPR_ID = "hprId";
  @SerializedName(SERIALIZED_NAME_HPR_ID)
  @javax.annotation.Nonnull
  private String hprId;

  public static final String SERIALIZED_NAME_YEAR_OF_BIRTH = "yearOfBirth";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_BIRTH)
  @javax.annotation.Nonnull
  private String yearOfBirth;

  public SearchByHpIdWebRequest() {
  }

  public SearchByHpIdWebRequest idType(@javax.annotation.Nullable String idType) {
    this.idType = idType;
    return this;
  }

  /**
   * Get idType
   * @return idType
   */
  @javax.annotation.Nullable
  public String getIdType() {
    return idType;
  }

  public void setIdType(@javax.annotation.Nullable String idType) {
    this.idType = idType;
  }


  public SearchByHpIdWebRequest domainName(@javax.annotation.Nullable String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(@javax.annotation.Nullable String domainName) {
    this.domainName = domainName;
  }


  public SearchByHpIdWebRequest hprId(@javax.annotation.Nonnull String hprId) {
    this.hprId = hprId;
    return this;
  }

  /**
   * Healthcare Professional ID  Number or Alias
   * @return hprId
   */
  @javax.annotation.Nonnull
  public String getHprId() {
    return hprId;
  }

  public void setHprId(@javax.annotation.Nonnull String hprId) {
    this.hprId = hprId;
  }


  public SearchByHpIdWebRequest yearOfBirth(@javax.annotation.Nonnull String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
    return this;
  }

  /**
   * Year of birth of the user.
   * @return yearOfBirth
   */
  @javax.annotation.Nonnull
  public String getYearOfBirth() {
    return yearOfBirth;
  }

  public void setYearOfBirth(@javax.annotation.Nonnull String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchByHpIdWebRequest searchByHpIdWebRequest = (SearchByHpIdWebRequest) o;
    return Objects.equals(this.idType, searchByHpIdWebRequest.idType) &&
        Objects.equals(this.domainName, searchByHpIdWebRequest.domainName) &&
        Objects.equals(this.hprId, searchByHpIdWebRequest.hprId) &&
        Objects.equals(this.yearOfBirth, searchByHpIdWebRequest.yearOfBirth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idType, domainName, hprId, yearOfBirth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchByHpIdWebRequest {\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    hprId: ").append(toIndentedString(hprId)).append("\n");
    sb.append("    yearOfBirth: ").append(toIndentedString(yearOfBirth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idType");
    openapiFields.add("domainName");
    openapiFields.add("hprId");
    openapiFields.add("yearOfBirth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hprId");
    openapiRequiredFields.add("yearOfBirth");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchByHpIdWebRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchByHpIdWebRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchByHpIdWebRequest is not found in the empty JSON string", SearchByHpIdWebRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchByHpIdWebRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchByHpIdWebRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchByHpIdWebRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("idType") != null && !jsonObj.get("idType").isJsonNull()) && !jsonObj.get("idType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idType").toString()));
      }
      if ((jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if (!jsonObj.get("hprId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hprId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hprId").toString()));
      }
      if (!jsonObj.get("yearOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearOfBirth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchByHpIdWebRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchByHpIdWebRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchByHpIdWebRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchByHpIdWebRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchByHpIdWebRequest>() {
           @Override
           public void write(JsonWriter out, SearchByHpIdWebRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchByHpIdWebRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchByHpIdWebRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchByHpIdWebRequest
   * @throws IOException if the JSON string is invalid with respect to SearchByHpIdWebRequest
   */
  public static SearchByHpIdWebRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchByHpIdWebRequest.class);
  }

  /**
   * Convert an instance of SearchByHpIdWebRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

