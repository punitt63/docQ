/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * FacilityBasicInfoAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityBasicInfoAddress {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_STATE_L_G_D_CODE = "stateLGDCode";
  @SerializedName(SERIALIZED_NAME_STATE_L_G_D_CODE)
  @javax.annotation.Nullable
  private String stateLGDCode;

  public static final String SERIALIZED_NAME_DISTRICT_L_G_D_CODE = "districtLGDCode";
  @SerializedName(SERIALIZED_NAME_DISTRICT_L_G_D_CODE)
  @javax.annotation.Nullable
  private String districtLGDCode;

  public static final String SERIALIZED_NAME_SUB_DISTRICT_L_G_D_CODE = "subDistrictLGDCode";
  @SerializedName(SERIALIZED_NAME_SUB_DISTRICT_L_G_D_CODE)
  @javax.annotation.Nullable
  private String subDistrictLGDCode;

  public static final String SERIALIZED_NAME_FACILITY_REGION = "facilityRegion";
  @SerializedName(SERIALIZED_NAME_FACILITY_REGION)
  @javax.annotation.Nullable
  private String facilityRegion;

  public static final String SERIALIZED_NAME_VILLAGE_CITY_TOWN_L_G_D_CODE = "villageCityTownLGDCode";
  @SerializedName(SERIALIZED_NAME_VILLAGE_CITY_TOWN_L_G_D_CODE)
  @javax.annotation.Nullable
  private String villageCityTownLGDCode;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  @javax.annotation.Nullable
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  @javax.annotation.Nullable
  private String addressLine2;

  public static final String SERIALIZED_NAME_PINCODE = "pincode";
  @SerializedName(SERIALIZED_NAME_PINCODE)
  @javax.annotation.Nullable
  private String pincode;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  @javax.annotation.Nullable
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  @javax.annotation.Nullable
  private String longitude;

  public FacilityBasicInfoAddress() {
  }

  public FacilityBasicInfoAddress country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public FacilityBasicInfoAddress stateLGDCode(@javax.annotation.Nullable String stateLGDCode) {
    this.stateLGDCode = stateLGDCode;
    return this;
  }

  /**
   * Get stateLGDCode
   * @return stateLGDCode
   */
  @javax.annotation.Nullable
  public String getStateLGDCode() {
    return stateLGDCode;
  }

  public void setStateLGDCode(@javax.annotation.Nullable String stateLGDCode) {
    this.stateLGDCode = stateLGDCode;
  }


  public FacilityBasicInfoAddress districtLGDCode(@javax.annotation.Nullable String districtLGDCode) {
    this.districtLGDCode = districtLGDCode;
    return this;
  }

  /**
   * Get districtLGDCode
   * @return districtLGDCode
   */
  @javax.annotation.Nullable
  public String getDistrictLGDCode() {
    return districtLGDCode;
  }

  public void setDistrictLGDCode(@javax.annotation.Nullable String districtLGDCode) {
    this.districtLGDCode = districtLGDCode;
  }


  public FacilityBasicInfoAddress subDistrictLGDCode(@javax.annotation.Nullable String subDistrictLGDCode) {
    this.subDistrictLGDCode = subDistrictLGDCode;
    return this;
  }

  /**
   * Get subDistrictLGDCode
   * @return subDistrictLGDCode
   */
  @javax.annotation.Nullable
  public String getSubDistrictLGDCode() {
    return subDistrictLGDCode;
  }

  public void setSubDistrictLGDCode(@javax.annotation.Nullable String subDistrictLGDCode) {
    this.subDistrictLGDCode = subDistrictLGDCode;
  }


  public FacilityBasicInfoAddress facilityRegion(@javax.annotation.Nullable String facilityRegion) {
    this.facilityRegion = facilityRegion;
    return this;
  }

  /**
   * Get facilityRegion
   * @return facilityRegion
   */
  @javax.annotation.Nullable
  public String getFacilityRegion() {
    return facilityRegion;
  }

  public void setFacilityRegion(@javax.annotation.Nullable String facilityRegion) {
    this.facilityRegion = facilityRegion;
  }


  public FacilityBasicInfoAddress villageCityTownLGDCode(@javax.annotation.Nullable String villageCityTownLGDCode) {
    this.villageCityTownLGDCode = villageCityTownLGDCode;
    return this;
  }

  /**
   * Get villageCityTownLGDCode
   * @return villageCityTownLGDCode
   */
  @javax.annotation.Nullable
  public String getVillageCityTownLGDCode() {
    return villageCityTownLGDCode;
  }

  public void setVillageCityTownLGDCode(@javax.annotation.Nullable String villageCityTownLGDCode) {
    this.villageCityTownLGDCode = villageCityTownLGDCode;
  }


  public FacilityBasicInfoAddress addressLine1(@javax.annotation.Nullable String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(@javax.annotation.Nullable String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public FacilityBasicInfoAddress addressLine2(@javax.annotation.Nullable String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(@javax.annotation.Nullable String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public FacilityBasicInfoAddress pincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
    return this;
  }

  /**
   * Get pincode
   * @return pincode
   */
  @javax.annotation.Nullable
  public String getPincode() {
    return pincode;
  }

  public void setPincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
  }


  public FacilityBasicInfoAddress latitude(@javax.annotation.Nullable String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(@javax.annotation.Nullable String latitude) {
    this.latitude = latitude;
  }


  public FacilityBasicInfoAddress longitude(@javax.annotation.Nullable String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(@javax.annotation.Nullable String longitude) {
    this.longitude = longitude;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityBasicInfoAddress facilityBasicInfoAddress = (FacilityBasicInfoAddress) o;
    return Objects.equals(this.country, facilityBasicInfoAddress.country) &&
        Objects.equals(this.stateLGDCode, facilityBasicInfoAddress.stateLGDCode) &&
        Objects.equals(this.districtLGDCode, facilityBasicInfoAddress.districtLGDCode) &&
        Objects.equals(this.subDistrictLGDCode, facilityBasicInfoAddress.subDistrictLGDCode) &&
        Objects.equals(this.facilityRegion, facilityBasicInfoAddress.facilityRegion) &&
        Objects.equals(this.villageCityTownLGDCode, facilityBasicInfoAddress.villageCityTownLGDCode) &&
        Objects.equals(this.addressLine1, facilityBasicInfoAddress.addressLine1) &&
        Objects.equals(this.addressLine2, facilityBasicInfoAddress.addressLine2) &&
        Objects.equals(this.pincode, facilityBasicInfoAddress.pincode) &&
        Objects.equals(this.latitude, facilityBasicInfoAddress.latitude) &&
        Objects.equals(this.longitude, facilityBasicInfoAddress.longitude);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, stateLGDCode, districtLGDCode, subDistrictLGDCode, facilityRegion, villageCityTownLGDCode, addressLine1, addressLine2, pincode, latitude, longitude);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityBasicInfoAddress {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    stateLGDCode: ").append(toIndentedString(stateLGDCode)).append("\n");
    sb.append("    districtLGDCode: ").append(toIndentedString(districtLGDCode)).append("\n");
    sb.append("    subDistrictLGDCode: ").append(toIndentedString(subDistrictLGDCode)).append("\n");
    sb.append("    facilityRegion: ").append(toIndentedString(facilityRegion)).append("\n");
    sb.append("    villageCityTownLGDCode: ").append(toIndentedString(villageCityTownLGDCode)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    pincode: ").append(toIndentedString(pincode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("stateLGDCode");
    openapiFields.add("districtLGDCode");
    openapiFields.add("subDistrictLGDCode");
    openapiFields.add("facilityRegion");
    openapiFields.add("villageCityTownLGDCode");
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("pincode");
    openapiFields.add("latitude");
    openapiFields.add("longitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityBasicInfoAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityBasicInfoAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityBasicInfoAddress is not found in the empty JSON string", FacilityBasicInfoAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityBasicInfoAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityBasicInfoAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("stateLGDCode") != null && !jsonObj.get("stateLGDCode").isJsonNull()) && !jsonObj.get("stateLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateLGDCode").toString()));
      }
      if ((jsonObj.get("districtLGDCode") != null && !jsonObj.get("districtLGDCode").isJsonNull()) && !jsonObj.get("districtLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtLGDCode").toString()));
      }
      if ((jsonObj.get("subDistrictLGDCode") != null && !jsonObj.get("subDistrictLGDCode").isJsonNull()) && !jsonObj.get("subDistrictLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subDistrictLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subDistrictLGDCode").toString()));
      }
      if ((jsonObj.get("facilityRegion") != null && !jsonObj.get("facilityRegion").isJsonNull()) && !jsonObj.get("facilityRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityRegion").toString()));
      }
      if ((jsonObj.get("villageCityTownLGDCode") != null && !jsonObj.get("villageCityTownLGDCode").isJsonNull()) && !jsonObj.get("villageCityTownLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `villageCityTownLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("villageCityTownLGDCode").toString()));
      }
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("addressLine2") != null && !jsonObj.get("addressLine2").isJsonNull()) && !jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      if ((jsonObj.get("pincode") != null && !jsonObj.get("pincode").isJsonNull()) && !jsonObj.get("pincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pincode").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityBasicInfoAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityBasicInfoAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityBasicInfoAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityBasicInfoAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityBasicInfoAddress>() {
           @Override
           public void write(JsonWriter out, FacilityBasicInfoAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityBasicInfoAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityBasicInfoAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityBasicInfoAddress
   * @throws IOException if the JSON string is invalid with respect to FacilityBasicInfoAddress
   */
  public static FacilityBasicInfoAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityBasicInfoAddress.class);
  }

  /**
   * Convert an instance of FacilityBasicInfoAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

