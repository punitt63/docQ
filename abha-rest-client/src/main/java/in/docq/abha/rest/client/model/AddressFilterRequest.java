/*
 * Health Facility Registry APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AddressFilterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-04T14:58:27.910059+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AddressFilterRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  @javax.annotation.Nullable
  private String district;

  public static final String SERIALIZED_NAME_SUB_DISTRICT = "subDistrict";
  @SerializedName(SERIALIZED_NAME_SUB_DISTRICT)
  @javax.annotation.Nullable
  private String subDistrict;

  public static final String SERIALIZED_NAME_VILLAGE = "village";
  @SerializedName(SERIALIZED_NAME_VILLAGE)
  @javax.annotation.Nullable
  private String village;

  public static final String SERIALIZED_NAME_GEOLOCATION = "geolocation";
  @SerializedName(SERIALIZED_NAME_GEOLOCATION)
  @javax.annotation.Nullable
  private String geolocation;

  public static final String SERIALIZED_NAME_FACILITY_ID = "facilityId";
  @SerializedName(SERIALIZED_NAME_FACILITY_ID)
  @javax.annotation.Nullable
  private String facilityId;

  public AddressFilterRequest() {
  }

  public AddressFilterRequest name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AddressFilterRequest address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public AddressFilterRequest district(@javax.annotation.Nullable String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(@javax.annotation.Nullable String district) {
    this.district = district;
  }


  public AddressFilterRequest subDistrict(@javax.annotation.Nullable String subDistrict) {
    this.subDistrict = subDistrict;
    return this;
  }

  /**
   * Get subDistrict
   * @return subDistrict
   */
  @javax.annotation.Nullable
  public String getSubDistrict() {
    return subDistrict;
  }

  public void setSubDistrict(@javax.annotation.Nullable String subDistrict) {
    this.subDistrict = subDistrict;
  }


  public AddressFilterRequest village(@javax.annotation.Nullable String village) {
    this.village = village;
    return this;
  }

  /**
   * Get village
   * @return village
   */
  @javax.annotation.Nullable
  public String getVillage() {
    return village;
  }

  public void setVillage(@javax.annotation.Nullable String village) {
    this.village = village;
  }


  public AddressFilterRequest geolocation(@javax.annotation.Nullable String geolocation) {
    this.geolocation = geolocation;
    return this;
  }

  /**
   * Get geolocation
   * @return geolocation
   */
  @javax.annotation.Nullable
  public String getGeolocation() {
    return geolocation;
  }

  public void setGeolocation(@javax.annotation.Nullable String geolocation) {
    this.geolocation = geolocation;
  }


  public AddressFilterRequest facilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
    return this;
  }

  /**
   * Get facilityId
   * @return facilityId
   */
  @javax.annotation.Nullable
  public String getFacilityId() {
    return facilityId;
  }

  public void setFacilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressFilterRequest addressFilterRequest = (AddressFilterRequest) o;
    return Objects.equals(this.name, addressFilterRequest.name) &&
        Objects.equals(this.address, addressFilterRequest.address) &&
        Objects.equals(this.district, addressFilterRequest.district) &&
        Objects.equals(this.subDistrict, addressFilterRequest.subDistrict) &&
        Objects.equals(this.village, addressFilterRequest.village) &&
        Objects.equals(this.geolocation, addressFilterRequest.geolocation) &&
        Objects.equals(this.facilityId, addressFilterRequest.facilityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address, district, subDistrict, village, geolocation, facilityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressFilterRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    subDistrict: ").append(toIndentedString(subDistrict)).append("\n");
    sb.append("    village: ").append(toIndentedString(village)).append("\n");
    sb.append("    geolocation: ").append(toIndentedString(geolocation)).append("\n");
    sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("district");
    openapiFields.add("subDistrict");
    openapiFields.add("village");
    openapiFields.add("geolocation");
    openapiFields.add("facilityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressFilterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressFilterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressFilterRequest is not found in the empty JSON string", AddressFilterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressFilterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressFilterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("subDistrict") != null && !jsonObj.get("subDistrict").isJsonNull()) && !jsonObj.get("subDistrict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subDistrict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subDistrict").toString()));
      }
      if ((jsonObj.get("village") != null && !jsonObj.get("village").isJsonNull()) && !jsonObj.get("village").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `village` to be a primitive type in the JSON string but got `%s`", jsonObj.get("village").toString()));
      }
      if ((jsonObj.get("geolocation") != null && !jsonObj.get("geolocation").isJsonNull()) && !jsonObj.get("geolocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geolocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geolocation").toString()));
      }
      if ((jsonObj.get("facilityId") != null && !jsonObj.get("facilityId").isJsonNull()) && !jsonObj.get("facilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressFilterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressFilterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressFilterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressFilterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressFilterRequest>() {
           @Override
           public void write(JsonWriter out, AddressFilterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressFilterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressFilterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressFilterRequest
   * @throws IOException if the JSON string is invalid with respect to AddressFilterRequest
   */
  public static AddressFilterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressFilterRequest.class);
  }

  /**
   * Convert an instance of AddressFilterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

