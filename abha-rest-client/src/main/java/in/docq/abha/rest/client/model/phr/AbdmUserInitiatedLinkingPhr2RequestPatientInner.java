/*
 * User Initiated Linking Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * AbdmUserInitiatedLinkingPhr2RequestPatientInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T17:25:36.087359+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmUserInitiatedLinkingPhr2RequestPatientInner {
  public static final String SERIALIZED_NAME_REFERENCE_NUMBER = "referenceNumber";
  @SerializedName(SERIALIZED_NAME_REFERENCE_NUMBER)
  @javax.annotation.Nonnull
  private String referenceNumber;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  @javax.annotation.Nullable
  private String display;

  public static final String SERIALIZED_NAME_CARE_CONTEXTS = "careContexts";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXTS)
  @javax.annotation.Nonnull
  private List<AbdmUserInitiatedLinking2RequestPatientInnerCareContextsInner> careContexts = new ArrayList<>();

  /**
   * The health information type
   */
  @JsonAdapter(HiTypeEnum.Adapter.class)
  public enum HiTypeEnum {
    PRESCRIPTION("Prescription"),
    
    DIAGNOSTIC_REPORT("DiagnosticReport"),
    
    OP_CONSULTATION("OPConsultation"),
    
    DISCHARGE_SUMMARY("DischargeSummary"),
    
    IMMUNIZATION_RECORD("ImmunizationRecord"),
    
    HEALTH_DOCUMENT_RECORD("HealthDocumentRecord"),
    
    WELLNESS_RECORD("WellnessRecord"),
    
    INVOICE("Invoice");

    private String value;

    HiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HiTypeEnum fromValue(String value) {
      for (HiTypeEnum b : HiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HI_TYPE = "hiType";
  @SerializedName(SERIALIZED_NAME_HI_TYPE)
  @javax.annotation.Nonnull
  private HiTypeEnum hiType;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  @javax.annotation.Nonnull
  private Integer count;

  public AbdmUserInitiatedLinkingPhr2RequestPatientInner() {
  }

  public AbdmUserInitiatedLinkingPhr2RequestPatientInner referenceNumber(@javax.annotation.Nonnull String referenceNumber) {
    this.referenceNumber = referenceNumber;
    return this;
  }

  /**
   * A patient identifier with which patient is registered in the facility/hospital.Allows alpha numeric characters and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. ()/:\\\\\\\\]{0,255}$\&quot;
   * @return referenceNumber
   */
  @javax.annotation.Nonnull
  public String getReferenceNumber() {
    return referenceNumber;
  }

  public void setReferenceNumber(@javax.annotation.Nonnull String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }


  public AbdmUserInitiatedLinkingPhr2RequestPatientInner display(@javax.annotation.Nullable String display) {
    this.display = display;
    return this;
  }

  /**
   * Display text for patient reference.Allows alpha numeric characters and special characters like \&quot;^[a-zA-Z0-9_\\\\-@,. \\\&quot;&#39;:|()/]{0,255}$\&quot;
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }

  public void setDisplay(@javax.annotation.Nullable String display) {
    this.display = display;
  }


  public AbdmUserInitiatedLinkingPhr2RequestPatientInner careContexts(@javax.annotation.Nonnull List<AbdmUserInitiatedLinking2RequestPatientInnerCareContextsInner> careContexts) {
    this.careContexts = careContexts;
    return this;
  }

  public AbdmUserInitiatedLinkingPhr2RequestPatientInner addCareContextsItem(AbdmUserInitiatedLinking2RequestPatientInnerCareContextsInner careContextsItem) {
    if (this.careContexts == null) {
      this.careContexts = new ArrayList<>();
    }
    this.careContexts.add(careContextsItem);
    return this;
  }

  /**
   * Get careContexts
   * @return careContexts
   */
  @javax.annotation.Nonnull
  public List<AbdmUserInitiatedLinking2RequestPatientInnerCareContextsInner> getCareContexts() {
    return careContexts;
  }

  public void setCareContexts(@javax.annotation.Nonnull List<AbdmUserInitiatedLinking2RequestPatientInnerCareContextsInner> careContexts) {
    this.careContexts = careContexts;
  }


  public AbdmUserInitiatedLinkingPhr2RequestPatientInner hiType(@javax.annotation.Nonnull HiTypeEnum hiType) {
    this.hiType = hiType;
    return this;
  }

  /**
   * The health information type
   * @return hiType
   */
  @javax.annotation.Nonnull
  public HiTypeEnum getHiType() {
    return hiType;
  }

  public void setHiType(@javax.annotation.Nonnull HiTypeEnum hiType) {
    this.hiType = hiType;
  }


  public AbdmUserInitiatedLinkingPhr2RequestPatientInner count(@javax.annotation.Nonnull Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The count should match the number of care contexts in the payload
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(@javax.annotation.Nonnull Integer count) {
    this.count = count;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmUserInitiatedLinkingPhr2RequestPatientInner abdmUserInitiatedLinkingPhr2RequestPatientInner = (AbdmUserInitiatedLinkingPhr2RequestPatientInner) o;
    return Objects.equals(this.referenceNumber, abdmUserInitiatedLinkingPhr2RequestPatientInner.referenceNumber) &&
        Objects.equals(this.display, abdmUserInitiatedLinkingPhr2RequestPatientInner.display) &&
        Objects.equals(this.careContexts, abdmUserInitiatedLinkingPhr2RequestPatientInner.careContexts) &&
        Objects.equals(this.hiType, abdmUserInitiatedLinkingPhr2RequestPatientInner.hiType) &&
        Objects.equals(this.count, abdmUserInitiatedLinkingPhr2RequestPatientInner.count);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceNumber, display, careContexts, hiType, count);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmUserInitiatedLinkingPhr2RequestPatientInner {\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    careContexts: ").append(toIndentedString(careContexts)).append("\n");
    sb.append("    hiType: ").append(toIndentedString(hiType)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("referenceNumber");
    openapiFields.add("display");
    openapiFields.add("careContexts");
    openapiFields.add("hiType");
    openapiFields.add("count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("referenceNumber");
    openapiRequiredFields.add("careContexts");
    openapiRequiredFields.add("hiType");
    openapiRequiredFields.add("count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmUserInitiatedLinkingPhr2RequestPatientInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmUserInitiatedLinkingPhr2RequestPatientInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmUserInitiatedLinkingPhr2RequestPatientInner is not found in the empty JSON string", AbdmUserInitiatedLinkingPhr2RequestPatientInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmUserInitiatedLinkingPhr2RequestPatientInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmUserInitiatedLinkingPhr2RequestPatientInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmUserInitiatedLinkingPhr2RequestPatientInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("referenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceNumber").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("careContexts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `careContexts` to be an array in the JSON string but got `%s`", jsonObj.get("careContexts").toString()));
      }

      JsonArray jsonArraycareContexts = jsonObj.getAsJsonArray("careContexts");
      // validate the required field `careContexts` (array)
      for (int i = 0; i < jsonArraycareContexts.size(); i++) {
        AbdmUserInitiatedLinking2RequestPatientInnerCareContextsInner.validateJsonElement(jsonArraycareContexts.get(i));
      };
      if (!jsonObj.get("hiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hiType").toString()));
      }
      // validate the required field `hiType`
      HiTypeEnum.validateJsonElement(jsonObj.get("hiType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmUserInitiatedLinkingPhr2RequestPatientInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmUserInitiatedLinkingPhr2RequestPatientInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmUserInitiatedLinkingPhr2RequestPatientInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmUserInitiatedLinkingPhr2RequestPatientInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmUserInitiatedLinkingPhr2RequestPatientInner>() {
           @Override
           public void write(JsonWriter out, AbdmUserInitiatedLinkingPhr2RequestPatientInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmUserInitiatedLinkingPhr2RequestPatientInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmUserInitiatedLinkingPhr2RequestPatientInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmUserInitiatedLinkingPhr2RequestPatientInner
   * @throws IOException if the JSON string is invalid with respect to AbdmUserInitiatedLinkingPhr2RequestPatientInner
   */
  public static AbdmUserInitiatedLinkingPhr2RequestPatientInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmUserInitiatedLinkingPhr2RequestPatientInner.class);
  }

  /**
   * Convert an instance of AbdmUserInitiatedLinkingPhr2RequestPatientInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

