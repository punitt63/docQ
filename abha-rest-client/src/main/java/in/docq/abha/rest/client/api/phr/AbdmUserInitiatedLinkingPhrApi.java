/*
 * User Initiated Linking Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.api.phr;

import com.google.gson.reflect.TypeToken;
import in.docq.abha.rest.client.*;
import in.docq.abha.rest.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AbdmUserInitiatedLinkingPhrApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AbdmUserInitiatedLinkingPhrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AbdmUserInitiatedLinkingPhrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for abdmUserInitiatedLinkingPhr1
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr1Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr1Request abdmUserInitiatedLinkingPhr1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmUserInitiatedLinkingPhr1Request;

        // create path and map variables
        String localVarPath = "/api/hiecm/user-initiated-linking/v3/patient/care-context/discover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmUserInitiatedLinkingPhr1ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr1Request abdmUserInitiatedLinkingPhr1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmUserInitiatedLinkingPhr1(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmUserInitiatedLinkingPhr1(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmUserInitiatedLinkingPhr1(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmUserInitiatedLinkingPhr1(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmUserInitiatedLinkingPhr1(Async)");
        }

        // verify the required parameter 'abdmUserInitiatedLinkingPhr1Request' is set
        if (abdmUserInitiatedLinkingPhr1Request == null) {
            throw new ApiException("Missing the required parameter 'abdmUserInitiatedLinkingPhr1Request' when calling abdmUserInitiatedLinkingPhr1(Async)");
        }

        return abdmUserInitiatedLinkingPhr1Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr1Request, _callback);

    }

    /**
     * This API will be invoked by the patient/user from PHR application to discover his/her health records.
     * This API endpoint is designed to be invoked by the patient or user through the Personal Health Record (PHR) application to discover their health records. By using this API, patients can initiate a search to locate and access their health information across various Health Information Providers (HIPs). This functionality empowers patients to have greater control and visibility over their health data, facilitating a more informed and engaged approach to managing their health. The API supports the seamless retrieval of health records, ensuring that patients can easily discover and review their care contexts.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr1Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public void abdmUserInitiatedLinkingPhr1(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr1Request abdmUserInitiatedLinkingPhr1Request) throws ApiException {
        abdmUserInitiatedLinkingPhr1WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr1Request);
    }

    /**
     * This API will be invoked by the patient/user from PHR application to discover his/her health records.
     * This API endpoint is designed to be invoked by the patient or user through the Personal Health Record (PHR) application to discover their health records. By using this API, patients can initiate a search to locate and access their health information across various Health Information Providers (HIPs). This functionality empowers patients to have greater control and visibility over their health data, facilitating a more informed and engaged approach to managing their health. The API supports the seamless retrieval of health records, ensuring that patients can easily discover and review their care contexts.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr1Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmUserInitiatedLinkingPhr1WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr1Request abdmUserInitiatedLinkingPhr1Request) throws ApiException {
        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr1ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API will be invoked by the patient/user from PHR application to discover his/her health records. (asynchronously)
     * This API endpoint is designed to be invoked by the patient or user through the Personal Health Record (PHR) application to discover their health records. By using this API, patients can initiate a search to locate and access their health information across various Health Information Providers (HIPs). This functionality empowers patients to have greater control and visibility over their health data, facilitating a more informed and engaged approach to managing their health. The API supports the seamless retrieval of health records, ensuring that patients can easily discover and review their care contexts.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr1Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr1Request abdmUserInitiatedLinkingPhr1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr1ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmUserInitiatedLinkingPhr2
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr2Call(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr2Request abdmUserInitiatedLinkingPhr2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmUserInitiatedLinkingPhr2Request;

        // create path and map variables
        String localVarPath = "/<callback_url>/api/v3/hiu/patient/care-context/on-discover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmUserInitiatedLinkingPhr2ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr2Request abdmUserInitiatedLinkingPhr2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmUserInitiatedLinkingPhr2(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmUserInitiatedLinkingPhr2(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmUserInitiatedLinkingPhr2(Async)");
        }

        // verify the required parameter 'abdmUserInitiatedLinkingPhr2Request' is set
        if (abdmUserInitiatedLinkingPhr2Request == null) {
            throw new ApiException("Missing the required parameter 'abdmUserInitiatedLinkingPhr2Request' when calling abdmUserInitiatedLinkingPhr2(Async)");
        }

        return abdmUserInitiatedLinkingPhr2Call(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr2Request, _callback);

    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive the discovered care contexts of a patient. It provides detailed information about the patient’s care contexts, including any errors encountered during the discovery process.
     * The on-discover API endpoint allows HIUs to receive and process the care contexts associated with a patient. When a request is made to this endpoint, it returns a detailed response containing the patient’s care contexts, transaction details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request body, either &#39;patient&#39; or &#39;error&#39; must be included. &lt;ol type &#x3D; \&quot;a\&quot;&gt; &lt;li&gt;In case of success scenario, patient object is mandatory and error object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;In case of error scenario, error object is mandatory and patient object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;Response is mandatory in both scenarios&lt;/li&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr2Request  (required)
     * @return AbdmUserInitiatedLinkingPhr2200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public AbdmUserInitiatedLinkingPhr2200Response abdmUserInitiatedLinkingPhr2(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr2Request abdmUserInitiatedLinkingPhr2Request) throws ApiException {
        ApiResponse<AbdmUserInitiatedLinkingPhr2200Response> localVarResp = abdmUserInitiatedLinkingPhr2WithHttpInfo(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr2Request);
        return localVarResp.getData();
    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive the discovered care contexts of a patient. It provides detailed information about the patient’s care contexts, including any errors encountered during the discovery process.
     * The on-discover API endpoint allows HIUs to receive and process the care contexts associated with a patient. When a request is made to this endpoint, it returns a detailed response containing the patient’s care contexts, transaction details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request body, either &#39;patient&#39; or &#39;error&#39; must be included. &lt;ol type &#x3D; \&quot;a\&quot;&gt; &lt;li&gt;In case of success scenario, patient object is mandatory and error object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;In case of error scenario, error object is mandatory and patient object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;Response is mandatory in both scenarios&lt;/li&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr2Request  (required)
     * @return ApiResponse&lt;AbdmUserInitiatedLinkingPhr2200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbdmUserInitiatedLinkingPhr2200Response> abdmUserInitiatedLinkingPhr2WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr2Request abdmUserInitiatedLinkingPhr2Request) throws ApiException {
        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr2ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr2Request, null);
        Type localVarReturnType = new TypeToken<AbdmUserInitiatedLinkingPhr2200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive the discovered care contexts of a patient. It provides detailed information about the patient’s care contexts, including any errors encountered during the discovery process. (asynchronously)
     * The on-discover API endpoint allows HIUs to receive and process the care contexts associated with a patient. When a request is made to this endpoint, it returns a detailed response containing the patient’s care contexts, transaction details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request body, either &#39;patient&#39; or &#39;error&#39; must be included. &lt;ol type &#x3D; \&quot;a\&quot;&gt; &lt;li&gt;In case of success scenario, patient object is mandatory and error object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;In case of error scenario, error object is mandatory and patient object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;Response is mandatory in both scenarios&lt;/li&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr2Async(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr2Request abdmUserInitiatedLinkingPhr2Request, final ApiCallback<AbdmUserInitiatedLinkingPhr2200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr2ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr2Request, _callback);
        Type localVarReturnType = new TypeToken<AbdmUserInitiatedLinkingPhr2200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmUserInitiatedLinkingPhr3
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr3Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr3Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr3Request abdmUserInitiatedLinkingPhr3Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmUserInitiatedLinkingPhr3Request;

        // create path and map variables
        String localVarPath = "/api/hiecm/user-initiated-linking/v3/link/care-context/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmUserInitiatedLinkingPhr3ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr3Request abdmUserInitiatedLinkingPhr3Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmUserInitiatedLinkingPhr3(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmUserInitiatedLinkingPhr3(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmUserInitiatedLinkingPhr3(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmUserInitiatedLinkingPhr3(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmUserInitiatedLinkingPhr3(Async)");
        }

        // verify the required parameter 'abdmUserInitiatedLinkingPhr3Request' is set
        if (abdmUserInitiatedLinkingPhr3Request == null) {
            throw new ApiException("Missing the required parameter 'abdmUserInitiatedLinkingPhr3Request' when calling abdmUserInitiatedLinkingPhr3(Async)");
        }

        return abdmUserInitiatedLinkingPhr3Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr3Request, _callback);

    }

    /**
     * This API will be invoked by the patient/user to link his/her health records.
     * This API endpoint is designed to be invoked by the patient or user to link their health records. By using this API, patients can initiate the process of associating their health information with their ABHA (Ayushman Bharat Health Account) address. This functionality empowers patients to actively manage and consolidate their health records, ensuring that all relevant care contexts are accurately linked and accessible. The API supports a seamless and efficient health information exchange, enhancing the overall quality and continuity of care within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr3Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public void abdmUserInitiatedLinkingPhr3(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr3Request abdmUserInitiatedLinkingPhr3Request) throws ApiException {
        abdmUserInitiatedLinkingPhr3WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr3Request);
    }

    /**
     * This API will be invoked by the patient/user to link his/her health records.
     * This API endpoint is designed to be invoked by the patient or user to link their health records. By using this API, patients can initiate the process of associating their health information with their ABHA (Ayushman Bharat Health Account) address. This functionality empowers patients to actively manage and consolidate their health records, ensuring that all relevant care contexts are accurately linked and accessible. The API supports a seamless and efficient health information exchange, enhancing the overall quality and continuity of care within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr3Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmUserInitiatedLinkingPhr3WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr3Request abdmUserInitiatedLinkingPhr3Request) throws ApiException {
        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr3ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr3Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API will be invoked by the patient/user to link his/her health records. (asynchronously)
     * This API endpoint is designed to be invoked by the patient or user to link their health records. By using this API, patients can initiate the process of associating their health information with their ABHA (Ayushman Bharat Health Account) address. This functionality empowers patients to actively manage and consolidate their health records, ensuring that all relevant care contexts are accurately linked and accessible. The API supports a seamless and efficient health information exchange, enhancing the overall quality and continuity of care within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr3Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr3Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr3Request abdmUserInitiatedLinkingPhr3Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr3ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr3Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmUserInitiatedLinkingPhr4
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr4Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr4Call(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr4Request abdmUserInitiatedLinkingPhr4Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmUserInitiatedLinkingPhr4Request;

        // create path and map variables
        String localVarPath = "/<callback_url>/api/v3/hiu/patient/care-context/on-init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmUserInitiatedLinkingPhr4ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr4Request abdmUserInitiatedLinkingPhr4Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmUserInitiatedLinkingPhr4(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmUserInitiatedLinkingPhr4(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmUserInitiatedLinkingPhr4(Async)");
        }

        // verify the required parameter 'abdmUserInitiatedLinkingPhr4Request' is set
        if (abdmUserInitiatedLinkingPhr4Request == null) {
            throw new ApiException("Missing the required parameter 'abdmUserInitiatedLinkingPhr4Request' when calling abdmUserInitiatedLinkingPhr4(Async)");
        }

        return abdmUserInitiatedLinkingPhr4Call(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr4Request, _callback);

    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive the initial linking of care contexts for a patient. It provides detailed information about the linking process, including authentication details and any errors encountered.
     * The on-init API endpoint allows HIUs to receive and process the initial linking of care contexts associated with a patient. When a request is made to this endpoint, it returns a detailed response containing the transaction ID, linking information, authentication details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr4Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public void abdmUserInitiatedLinkingPhr4(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr4Request abdmUserInitiatedLinkingPhr4Request) throws ApiException {
        abdmUserInitiatedLinkingPhr4WithHttpInfo(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr4Request);
    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive the initial linking of care contexts for a patient. It provides detailed information about the linking process, including authentication details and any errors encountered.
     * The on-init API endpoint allows HIUs to receive and process the initial linking of care contexts associated with a patient. When a request is made to this endpoint, it returns a detailed response containing the transaction ID, linking information, authentication details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr4Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmUserInitiatedLinkingPhr4WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr4Request abdmUserInitiatedLinkingPhr4Request) throws ApiException {
        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr4ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr4Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive the initial linking of care contexts for a patient. It provides detailed information about the linking process, including authentication details and any errors encountered. (asynchronously)
     * The on-init API endpoint allows HIUs to receive and process the initial linking of care contexts associated with a patient. When a request is made to this endpoint, it returns a detailed response containing the transaction ID, linking information, authentication details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr4Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr4Async(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr4Request abdmUserInitiatedLinkingPhr4Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr4ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr4Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmUserInitiatedLinkingPhr5
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr5Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr5Call(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr5Request abdmUserInitiatedLinkingPhr5Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmUserInitiatedLinkingPhr5Request;

        // create path and map variables
        String localVarPath = "/api/hiecm/user-initiated-linking/v3/link/care-context/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_CM_ID != null) {
            localVarHeaderParams.put("X-CM-ID", localVarApiClient.parameterToString(X_CM_ID));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        if (X_AUTH_TOKEN != null) {
            localVarHeaderParams.put("X-AUTH-TOKEN", localVarApiClient.parameterToString(X_AUTH_TOKEN));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmUserInitiatedLinkingPhr5ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr5Request abdmUserInitiatedLinkingPhr5Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmUserInitiatedLinkingPhr5(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmUserInitiatedLinkingPhr5(Async)");
        }

        // verify the required parameter 'X_CM_ID' is set
        if (X_CM_ID == null) {
            throw new ApiException("Missing the required parameter 'X_CM_ID' when calling abdmUserInitiatedLinkingPhr5(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmUserInitiatedLinkingPhr5(Async)");
        }

        // verify the required parameter 'X_AUTH_TOKEN' is set
        if (X_AUTH_TOKEN == null) {
            throw new ApiException("Missing the required parameter 'X_AUTH_TOKEN' when calling abdmUserInitiatedLinkingPhr5(Async)");
        }

        // verify the required parameter 'abdmUserInitiatedLinkingPhr5Request' is set
        if (abdmUserInitiatedLinkingPhr5Request == null) {
            throw new ApiException("Missing the required parameter 'abdmUserInitiatedLinkingPhr5Request' when calling abdmUserInitiatedLinkingPhr5(Async)");
        }

        return abdmUserInitiatedLinkingPhr5Call(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr5Request, _callback);

    }

    /**
     * This API will be invoked by the patient/user to confirm his/her health records.
     * This API endpoint is designed to be invoked by the patient or user to confirm their health records. By using this API, patients can validate and confirm the linkage of their health information to their ABHA (Ayushman Bharat Health Account) address. This confirmation process ensures that all relevant care contexts are accurately linked and verified, providing patients with control over their health data. The API supports a seamless and efficient health information exchange, enhancing the overall quality and continuity of care within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr5Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public void abdmUserInitiatedLinkingPhr5(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr5Request abdmUserInitiatedLinkingPhr5Request) throws ApiException {
        abdmUserInitiatedLinkingPhr5WithHttpInfo(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr5Request);
    }

    /**
     * This API will be invoked by the patient/user to confirm his/her health records.
     * This API endpoint is designed to be invoked by the patient or user to confirm their health records. By using this API, patients can validate and confirm the linkage of their health information to their ABHA (Ayushman Bharat Health Account) address. This confirmation process ensures that all relevant care contexts are accurately linked and verified, providing patients with control over their health data. The API supports a seamless and efficient health information exchange, enhancing the overall quality and continuity of care within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr5Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmUserInitiatedLinkingPhr5WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr5Request abdmUserInitiatedLinkingPhr5Request) throws ApiException {
        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr5ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr5Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API will be invoked by the patient/user to confirm his/her health records. (asynchronously)
     * This API endpoint is designed to be invoked by the patient or user to confirm their health records. By using this API, patients can validate and confirm the linkage of their health information to their ABHA (Ayushman Bharat Health Account) address. This confirmation process ensures that all relevant care contexts are accurately linked and verified, providing patients with control over their health data. The API supports a seamless and efficient health information exchange, enhancing the overall quality and continuity of care within the healthcare ecosystem.
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_CM_ID Suffix of the consent manager to which the request was intended (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param X_AUTH_TOKEN JWT Authentication token which was issued by ABDM after successful validation of username and password (required)
     * @param abdmUserInitiatedLinkingPhr5Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr5Async(String REQUEST_ID, String TIMESTAMP, String X_CM_ID, String X_HIU_ID, String X_AUTH_TOKEN, AbdmUserInitiatedLinkingPhr5Request abdmUserInitiatedLinkingPhr5Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr5ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_CM_ID, X_HIU_ID, X_AUTH_TOKEN, abdmUserInitiatedLinkingPhr5Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for abdmUserInitiatedLinkingPhr6
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr6Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr6Call(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr6Request abdmUserInitiatedLinkingPhr6Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abdmUserInitiatedLinkingPhr6Request;

        // create path and map variables
        String localVarPath = "/<callback_url>/api/v3/hiu/patient/care-context/on-confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (REQUEST_ID != null) {
            localVarHeaderParams.put("REQUEST-ID", localVarApiClient.parameterToString(REQUEST_ID));
        }


        if (TIMESTAMP != null) {
            localVarHeaderParams.put("TIMESTAMP", localVarApiClient.parameterToString(TIMESTAMP));
        }


        if (X_HIU_ID != null) {
            localVarHeaderParams.put("X-HIU-ID", localVarApiClient.parameterToString(X_HIU_ID));
        }


        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abdmUserInitiatedLinkingPhr6ValidateBeforeCall(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr6Request abdmUserInitiatedLinkingPhr6Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'REQUEST_ID' is set
        if (REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'REQUEST_ID' when calling abdmUserInitiatedLinkingPhr6(Async)");
        }

        // verify the required parameter 'TIMESTAMP' is set
        if (TIMESTAMP == null) {
            throw new ApiException("Missing the required parameter 'TIMESTAMP' when calling abdmUserInitiatedLinkingPhr6(Async)");
        }

        // verify the required parameter 'X_HIU_ID' is set
        if (X_HIU_ID == null) {
            throw new ApiException("Missing the required parameter 'X_HIU_ID' when calling abdmUserInitiatedLinkingPhr6(Async)");
        }

        // verify the required parameter 'abdmUserInitiatedLinkingPhr6Request' is set
        if (abdmUserInitiatedLinkingPhr6Request == null) {
            throw new ApiException("Missing the required parameter 'abdmUserInitiatedLinkingPhr6Request' when calling abdmUserInitiatedLinkingPhr6(Async)");
        }

        return abdmUserInitiatedLinkingPhr6Call(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr6Request, _callback);

    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive confirmation of the linked care contexts for a patient. It provides detailed information about the patient’s care contexts, including any errors encountered during the confirmation process.
     * The on-confirm API endpoint allows HIUs to receive and process the confirmation of care context linking for a patient. When a request is made to this endpoint, it returns a detailed response containing the patient’s care contexts, transaction details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively and verify that the care contexts have been correctly linked. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request body, either &#39;patient&#39; or &#39;error&#39; must be included. &lt;ol type &#x3D; \&quot;a\&quot;&gt; &lt;li&gt;In case of success scenario, patient object is mandatory and error object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;In case of failure scenario, error object is mandatory and patient object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;Response is mandatory in both scenarios&lt;/li&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr6Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public void abdmUserInitiatedLinkingPhr6(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr6Request abdmUserInitiatedLinkingPhr6Request) throws ApiException {
        abdmUserInitiatedLinkingPhr6WithHttpInfo(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr6Request);
    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive confirmation of the linked care contexts for a patient. It provides detailed information about the patient’s care contexts, including any errors encountered during the confirmation process.
     * The on-confirm API endpoint allows HIUs to receive and process the confirmation of care context linking for a patient. When a request is made to this endpoint, it returns a detailed response containing the patient’s care contexts, transaction details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively and verify that the care contexts have been correctly linked. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request body, either &#39;patient&#39; or &#39;error&#39; must be included. &lt;ol type &#x3D; \&quot;a\&quot;&gt; &lt;li&gt;In case of success scenario, patient object is mandatory and error object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;In case of failure scenario, error object is mandatory and patient object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;Response is mandatory in both scenarios&lt;/li&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr6Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> abdmUserInitiatedLinkingPhr6WithHttpInfo(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr6Request abdmUserInitiatedLinkingPhr6Request) throws ApiException {
        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr6ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr6Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This API endpoint is used by healthcare information users (HIUs) to receive confirmation of the linked care contexts for a patient. It provides detailed information about the patient’s care contexts, including any errors encountered during the confirmation process. (asynchronously)
     * The on-confirm API endpoint allows HIUs to receive and process the confirmation of care context linking for a patient. When a request is made to this endpoint, it returns a detailed response containing the patient’s care contexts, transaction details, and any errors that occurred. This ensures that HIUs have the necessary information to manage patient care effectively and verify that the care contexts have been correctly linked. &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request body, either &#39;patient&#39; or &#39;error&#39; must be included. &lt;ol type &#x3D; \&quot;a\&quot;&gt; &lt;li&gt;In case of success scenario, patient object is mandatory and error object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;In case of failure scenario, error object is mandatory and patient object is optional&lt;/li&gt; &lt;br&gt; &lt;li&gt;Response is mandatory in both scenarios&lt;/li&gt; &lt;/ol&gt;
     * @param REQUEST_ID Unique UUID for track the end to end request transaction (required)
     * @param TIMESTAMP Actual time of the request was initiated, ISO 8601 represents date and time by starting with the year, followed by the month, the day, the hour, the minutes, seconds and milliseconds (required)
     * @param X_HIU_ID Identifier of the health information user to which the request was intended (required)
     * @param abdmUserInitiatedLinkingPhr6Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error -&gt; It is just one example, for every api the path will be changed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abdmUserInitiatedLinkingPhr6Async(String REQUEST_ID, String TIMESTAMP, String X_HIU_ID, AbdmUserInitiatedLinkingPhr6Request abdmUserInitiatedLinkingPhr6Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = abdmUserInitiatedLinkingPhr6ValidateBeforeCall(REQUEST_ID, TIMESTAMP, X_HIU_ID, abdmUserInitiatedLinkingPhr6Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
