/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * FacilityBasicInfoUploads
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class FacilityBasicInfoUploads {
  public static final String SERIALIZED_NAME_FACILITY_BOARD_PHOTO = "facilityBoardPhoto";
  @SerializedName(SERIALIZED_NAME_FACILITY_BOARD_PHOTO)
  @javax.annotation.Nullable
  private FacilityBasicAttachment facilityBoardPhoto;

  public static final String SERIALIZED_NAME_FACILITY_BUILDING_PHOTO = "facilityBuildingPhoto";
  @SerializedName(SERIALIZED_NAME_FACILITY_BUILDING_PHOTO)
  @javax.annotation.Nullable
  private FacilityBasicAttachment facilityBuildingPhoto;

  public FacilityBasicInfoUploads() {
  }

  public FacilityBasicInfoUploads facilityBoardPhoto(@javax.annotation.Nullable FacilityBasicAttachment facilityBoardPhoto) {
    this.facilityBoardPhoto = facilityBoardPhoto;
    return this;
  }

  /**
   * Get facilityBoardPhoto
   * @return facilityBoardPhoto
   */
  @javax.annotation.Nullable
  public FacilityBasicAttachment getFacilityBoardPhoto() {
    return facilityBoardPhoto;
  }

  public void setFacilityBoardPhoto(@javax.annotation.Nullable FacilityBasicAttachment facilityBoardPhoto) {
    this.facilityBoardPhoto = facilityBoardPhoto;
  }


  public FacilityBasicInfoUploads facilityBuildingPhoto(@javax.annotation.Nullable FacilityBasicAttachment facilityBuildingPhoto) {
    this.facilityBuildingPhoto = facilityBuildingPhoto;
    return this;
  }

  /**
   * Get facilityBuildingPhoto
   * @return facilityBuildingPhoto
   */
  @javax.annotation.Nullable
  public FacilityBasicAttachment getFacilityBuildingPhoto() {
    return facilityBuildingPhoto;
  }

  public void setFacilityBuildingPhoto(@javax.annotation.Nullable FacilityBasicAttachment facilityBuildingPhoto) {
    this.facilityBuildingPhoto = facilityBuildingPhoto;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityBasicInfoUploads facilityBasicInfoUploads = (FacilityBasicInfoUploads) o;
    return Objects.equals(this.facilityBoardPhoto, facilityBasicInfoUploads.facilityBoardPhoto) &&
        Objects.equals(this.facilityBuildingPhoto, facilityBasicInfoUploads.facilityBuildingPhoto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facilityBoardPhoto, facilityBuildingPhoto);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityBasicInfoUploads {\n");
    sb.append("    facilityBoardPhoto: ").append(toIndentedString(facilityBoardPhoto)).append("\n");
    sb.append("    facilityBuildingPhoto: ").append(toIndentedString(facilityBuildingPhoto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facilityBoardPhoto");
    openapiFields.add("facilityBuildingPhoto");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityBasicInfoUploads
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityBasicInfoUploads.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityBasicInfoUploads is not found in the empty JSON string", FacilityBasicInfoUploads.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityBasicInfoUploads.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityBasicInfoUploads` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `facilityBoardPhoto`
      if (jsonObj.get("facilityBoardPhoto") != null && !jsonObj.get("facilityBoardPhoto").isJsonNull()) {
        FacilityBasicAttachment.validateJsonElement(jsonObj.get("facilityBoardPhoto"));
      }
      // validate the optional field `facilityBuildingPhoto`
      if (jsonObj.get("facilityBuildingPhoto") != null && !jsonObj.get("facilityBuildingPhoto").isJsonNull()) {
        FacilityBasicAttachment.validateJsonElement(jsonObj.get("facilityBuildingPhoto"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityBasicInfoUploads.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityBasicInfoUploads' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityBasicInfoUploads> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityBasicInfoUploads.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityBasicInfoUploads>() {
           @Override
           public void write(JsonWriter out, FacilityBasicInfoUploads value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityBasicInfoUploads read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityBasicInfoUploads given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityBasicInfoUploads
   * @throws IOException if the JSON string is invalid with respect to FacilityBasicInfoUploads
   */
  public static FacilityBasicInfoUploads fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityBasicInfoUploads.class);
  }

  /**
   * Convert an instance of FacilityBasicInfoUploads to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

