/*
 * PHR V3 Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * EnrollAbhaAddress200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T18:02:09.764020+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class EnrollAbhaAddress200Response {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_PHR_DETAILS = "phrDetails";
  @SerializedName(SERIALIZED_NAME_PHR_DETAILS)
  @javax.annotation.Nullable
  private EnrollAbhaAddress200ResponsePhrDetails phrDetails;

  public static final String SERIALIZED_NAME_TOKENS = "tokens";
  @SerializedName(SERIALIZED_NAME_TOKENS)
  @javax.annotation.Nullable
  private OtpVerifyMobile200ResponseTokens tokens;

  public static final String SERIALIZED_NAME_TXN_ID = "txnId";
  @SerializedName(SERIALIZED_NAME_TXN_ID)
  @javax.annotation.Nullable
  private String txnId;

  public EnrollAbhaAddress200Response() {
  }

  public EnrollAbhaAddress200Response message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public EnrollAbhaAddress200Response phrDetails(@javax.annotation.Nullable EnrollAbhaAddress200ResponsePhrDetails phrDetails) {
    this.phrDetails = phrDetails;
    return this;
  }

  /**
   * Get phrDetails
   * @return phrDetails
   */
  @javax.annotation.Nullable
  public EnrollAbhaAddress200ResponsePhrDetails getPhrDetails() {
    return phrDetails;
  }

  public void setPhrDetails(@javax.annotation.Nullable EnrollAbhaAddress200ResponsePhrDetails phrDetails) {
    this.phrDetails = phrDetails;
  }


  public EnrollAbhaAddress200Response tokens(@javax.annotation.Nullable OtpVerifyMobile200ResponseTokens tokens) {
    this.tokens = tokens;
    return this;
  }

  /**
   * Get tokens
   * @return tokens
   */
  @javax.annotation.Nullable
  public OtpVerifyMobile200ResponseTokens getTokens() {
    return tokens;
  }

  public void setTokens(@javax.annotation.Nullable OtpVerifyMobile200ResponseTokens tokens) {
    this.tokens = tokens;
  }


  public EnrollAbhaAddress200Response txnId(@javax.annotation.Nullable String txnId) {
    this.txnId = txnId;
    return this;
  }

  /**
   * Get txnId
   * @return txnId
   */
  @javax.annotation.Nullable
  public String getTxnId() {
    return txnId;
  }

  public void setTxnId(@javax.annotation.Nullable String txnId) {
    this.txnId = txnId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrollAbhaAddress200Response enrollAbhaAddress200Response = (EnrollAbhaAddress200Response) o;
    return Objects.equals(this.message, enrollAbhaAddress200Response.message) &&
        Objects.equals(this.phrDetails, enrollAbhaAddress200Response.phrDetails) &&
        Objects.equals(this.tokens, enrollAbhaAddress200Response.tokens) &&
        Objects.equals(this.txnId, enrollAbhaAddress200Response.txnId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, phrDetails, tokens, txnId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrollAbhaAddress200Response {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    phrDetails: ").append(toIndentedString(phrDetails)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("    txnId: ").append(toIndentedString(txnId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("phrDetails");
    openapiFields.add("tokens");
    openapiFields.add("txnId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnrollAbhaAddress200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnrollAbhaAddress200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrollAbhaAddress200Response is not found in the empty JSON string", EnrollAbhaAddress200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnrollAbhaAddress200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnrollAbhaAddress200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `phrDetails`
      if (jsonObj.get("phrDetails") != null && !jsonObj.get("phrDetails").isJsonNull()) {
        EnrollAbhaAddress200ResponsePhrDetails.validateJsonElement(jsonObj.get("phrDetails"));
      }
      // validate the optional field `tokens`
      if (jsonObj.get("tokens") != null && !jsonObj.get("tokens").isJsonNull()) {
        OtpVerifyMobile200ResponseTokens.validateJsonElement(jsonObj.get("tokens"));
      }
      if ((jsonObj.get("txnId") != null && !jsonObj.get("txnId").isJsonNull()) && !jsonObj.get("txnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txnId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrollAbhaAddress200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrollAbhaAddress200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrollAbhaAddress200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrollAbhaAddress200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrollAbhaAddress200Response>() {
           @Override
           public void write(JsonWriter out, EnrollAbhaAddress200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrollAbhaAddress200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnrollAbhaAddress200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnrollAbhaAddress200Response
   * @throws IOException if the JSON string is invalid with respect to EnrollAbhaAddress200Response
   */
  public static EnrollAbhaAddress200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrollAbhaAddress200Response.class);
  }

  /**
   * Convert an instance of EnrollAbhaAddress200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

