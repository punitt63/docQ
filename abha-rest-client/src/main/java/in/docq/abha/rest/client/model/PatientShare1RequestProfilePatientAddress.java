/*
 * HIE-CM Profile Share
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.*;

/**
 * PatientShare1RequestProfilePatientAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T12:11:20.742865+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class PatientShare1RequestProfilePatientAddress {
  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  @javax.annotation.Nullable
  private String line;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  @javax.annotation.Nullable
  private String district;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_PINCODE = "pincode";
  @SerializedName(SERIALIZED_NAME_PINCODE)
  @javax.annotation.Nullable
  private String pincode;

  public PatientShare1RequestProfilePatientAddress() {
  }

  public PatientShare1RequestProfilePatientAddress line(@javax.annotation.Nullable String line) {
    this.line = line;
    return this;
  }

  /**
   * The address line
   * @return line
   */
  @javax.annotation.Nullable
  public String getLine() {
    return line;
  }

  public void setLine(@javax.annotation.Nullable String line) {
    this.line = line;
  }


  public PatientShare1RequestProfilePatientAddress district(@javax.annotation.Nullable String district) {
    this.district = district;
    return this;
  }

  /**
   * The district and should only contain alphabets
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(@javax.annotation.Nullable String district) {
    this.district = district;
  }


  public PatientShare1RequestProfilePatientAddress state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * The state and should only contain alphabets like [A-Z a-z]+[A-Z a-z //&#39; &#39;]*$
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public PatientShare1RequestProfilePatientAddress pincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
    return this;
  }

  /**
   * Should be 5 digits and only contain numbers
   * @return pincode
   */
  @javax.annotation.Nullable
  public String getPincode() {
    return pincode;
  }

  public void setPincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientShare1RequestProfilePatientAddress patientShare1RequestProfilePatientAddress = (PatientShare1RequestProfilePatientAddress) o;
    return Objects.equals(this.line, patientShare1RequestProfilePatientAddress.line) &&
        Objects.equals(this.district, patientShare1RequestProfilePatientAddress.district) &&
        Objects.equals(this.state, patientShare1RequestProfilePatientAddress.state) &&
        Objects.equals(this.pincode, patientShare1RequestProfilePatientAddress.pincode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(line, district, state, pincode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientShare1RequestProfilePatientAddress {\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    pincode: ").append(toIndentedString(pincode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line");
    openapiFields.add("district");
    openapiFields.add("state");
    openapiFields.add("pincode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("line");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientShare1RequestProfilePatientAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientShare1RequestProfilePatientAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientShare1RequestProfilePatientAddress is not found in the empty JSON string", PatientShare1RequestProfilePatientAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientShare1RequestProfilePatientAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientShare1RequestProfilePatientAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientShare1RequestProfilePatientAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("line") != null && !jsonObj.get("line").isJsonNull()) && !jsonObj.get("line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("pincode") != null && !jsonObj.get("pincode").isJsonNull()) && !jsonObj.get("pincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pincode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientShare1RequestProfilePatientAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientShare1RequestProfilePatientAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientShare1RequestProfilePatientAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientShare1RequestProfilePatientAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientShare1RequestProfilePatientAddress>() {
           @Override
           public void write(JsonWriter out, PatientShare1RequestProfilePatientAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientShare1RequestProfilePatientAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientShare1RequestProfilePatientAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientShare1RequestProfilePatientAddress
   * @throws IOException if the JSON string is invalid with respect to PatientShare1RequestProfilePatientAddress
   */
  public static PatientShare1RequestProfilePatientAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientShare1RequestProfilePatientAddress.class);
  }

  /**
   * Convert an instance of PatientShare1RequestProfilePatientAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

