/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey {
  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  @javax.annotation.Nonnull
  private String expiry;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nonnull
  private String parameters;

  public static final String SERIALIZED_NAME_KEY_VALUE = "keyValue";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE)
  @javax.annotation.Nonnull
  private String keyValue;

  public AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey() {
  }

  public AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey expiry(@javax.annotation.Nonnull String expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * UTC.Allows alpha numeric character and special characters like \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\&quot;
   * @return expiry
   */
  @javax.annotation.Nonnull
  public String getExpiry() {
    return expiry;
  }

  public void setExpiry(@javax.annotation.Nonnull String expiry) {
    this.expiry = expiry;
  }


  public AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey parameters(@javax.annotation.Nonnull String parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Allows alpha numeric character and special characters like ^[a-zA-Z0-9_\\-@,+#&#x3D;. \&quot;:/]{0,255}$
   * @return parameters
   */
  @javax.annotation.Nonnull
  public String getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nonnull String parameters) {
    this.parameters = parameters;
  }


  public AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey keyValue(@javax.annotation.Nonnull String keyValue) {
    this.keyValue = keyValue;
    return this;
  }

  /**
   * Get keyValue
   * @return keyValue
   */
  @javax.annotation.Nonnull
  public String getKeyValue() {
    return keyValue;
  }

  public void setKeyValue(@javax.annotation.Nonnull String keyValue) {
    this.keyValue = keyValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey abdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey = (AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey) o;
    return Objects.equals(this.expiry, abdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.expiry) &&
        Objects.equals(this.parameters, abdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.parameters) &&
        Objects.equals(this.keyValue, abdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.keyValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiry, parameters, keyValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey {\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    keyValue: ").append(toIndentedString(keyValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiry");
    openapiFields.add("parameters");
    openapiFields.add("keyValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expiry");
    openapiRequiredFields.add("parameters");
    openapiRequiredFields.add("keyValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey is not found in the empty JSON string", AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("expiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiry").toString()));
      }
      if (!jsonObj.get("parameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }
      if (!jsonObj.get("keyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey>() {
           @Override
           public void write(JsonWriter out, AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey
   * @throws IOException if the JSON string is invalid with respect to AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey
   */
  public static AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey.class);
  }

  /**
   * Convert an instance of AbdmConsentManagement3RequestHiRequestKeyMaterialDhPublicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

