/*
 * HFR APIs
 * The following are APIs hosted by HFR for public use.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SearchForFacilitiesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-25T14:50:59.077868+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class  SearchForFacilitiesRequest {
  public static final String SERIALIZED_NAME_OWNERSHIP_CODE = "ownershipCode";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_CODE)
  @javax.annotation.Nullable
  private String ownershipCode;

  public static final String SERIALIZED_NAME_STATE_L_G_D_CODE = "stateLGDCode";
  @SerializedName(SERIALIZED_NAME_STATE_L_G_D_CODE)
  @javax.annotation.Nullable
  private String stateLGDCode;

  public static final String SERIALIZED_NAME_DISTRICT_L_G_D_CODE = "districtLGDCode";
  @SerializedName(SERIALIZED_NAME_DISTRICT_L_G_D_CODE)
  @javax.annotation.Nullable
  private String districtLGDCode;

  public static final String SERIALIZED_NAME_SUB_DISTRICT_L_G_D_CODE = "subDistrictLGDCode";
  @SerializedName(SERIALIZED_NAME_SUB_DISTRICT_L_G_D_CODE)
  @javax.annotation.Nullable
  private String subDistrictLGDCode;

  public static final String SERIALIZED_NAME_PINCODE = "pincode";
  @SerializedName(SERIALIZED_NAME_PINCODE)
  @javax.annotation.Nullable
  private String pincode;

  public static final String SERIALIZED_NAME_FACILITY_NAME = "facilityName";
  @SerializedName(SERIALIZED_NAME_FACILITY_NAME)
  @javax.annotation.Nullable
  private String facilityName;

  public static final String SERIALIZED_NAME_FACILITY_ID = "facilityId";
  @SerializedName(SERIALIZED_NAME_FACILITY_ID)
  @javax.annotation.Nullable
  private String facilityId;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  @javax.annotation.Nullable
  private Integer page;

  public static final String SERIALIZED_NAME_RESULTS_PER_PAGE = "resultsPerPage";
  @SerializedName(SERIALIZED_NAME_RESULTS_PER_PAGE)
  @javax.annotation.Nullable
  private Integer resultsPerPage;

  public SearchForFacilitiesRequest() {
  }

  public SearchForFacilitiesRequest ownershipCode(@javax.annotation.Nullable String ownershipCode) {
    this.ownershipCode = ownershipCode;
    return this;
  }

  /**
   * Get ownershipCode
   * @return ownershipCode
   */
  @javax.annotation.Nullable
  public String getOwnershipCode() {
    return ownershipCode;
  }

  public void setOwnershipCode(@javax.annotation.Nullable String ownershipCode) {
    this.ownershipCode = ownershipCode;
  }


  public SearchForFacilitiesRequest stateLGDCode(@javax.annotation.Nullable String stateLGDCode) {
    this.stateLGDCode = stateLGDCode;
    return this;
  }

  /**
   * Get stateLGDCode
   * @return stateLGDCode
   */
  @javax.annotation.Nullable
  public String getStateLGDCode() {
    return stateLGDCode;
  }

  public void setStateLGDCode(@javax.annotation.Nullable String stateLGDCode) {
    this.stateLGDCode = stateLGDCode;
  }


  public SearchForFacilitiesRequest districtLGDCode(@javax.annotation.Nullable String districtLGDCode) {
    this.districtLGDCode = districtLGDCode;
    return this;
  }

  /**
   * Get districtLGDCode
   * @return districtLGDCode
   */
  @javax.annotation.Nullable
  public String getDistrictLGDCode() {
    return districtLGDCode;
  }

  public void setDistrictLGDCode(@javax.annotation.Nullable String districtLGDCode) {
    this.districtLGDCode = districtLGDCode;
  }


  public SearchForFacilitiesRequest subDistrictLGDCode(@javax.annotation.Nullable String subDistrictLGDCode) {
    this.subDistrictLGDCode = subDistrictLGDCode;
    return this;
  }

  /**
   * Get subDistrictLGDCode
   * @return subDistrictLGDCode
   */
  @javax.annotation.Nullable
  public String getSubDistrictLGDCode() {
    return subDistrictLGDCode;
  }

  public void setSubDistrictLGDCode(@javax.annotation.Nullable String subDistrictLGDCode) {
    this.subDistrictLGDCode = subDistrictLGDCode;
  }


  public SearchForFacilitiesRequest pincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
    return this;
  }

  /**
   * Get pincode
   * @return pincode
   */
  @javax.annotation.Nullable
  public String getPincode() {
    return pincode;
  }

  public void setPincode(@javax.annotation.Nullable String pincode) {
    this.pincode = pincode;
  }


  public SearchForFacilitiesRequest facilityName(@javax.annotation.Nullable String facilityName) {
    this.facilityName = facilityName;
    return this;
  }

  /**
   * Get facilityName
   * @return facilityName
   */
  @javax.annotation.Nullable
  public String getFacilityName() {
    return facilityName;
  }

  public void setFacilityName(@javax.annotation.Nullable String facilityName) {
    this.facilityName = facilityName;
  }


  public SearchForFacilitiesRequest facilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
    return this;
  }

  /**
   * Get facilityId
   * @return facilityId
   */
  @javax.annotation.Nullable
  public String getFacilityId() {
    return facilityId;
  }

  public void setFacilityId(@javax.annotation.Nullable String facilityId) {
    this.facilityId = facilityId;
  }


  public SearchForFacilitiesRequest page(@javax.annotation.Nullable Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(@javax.annotation.Nullable Integer page) {
    this.page = page;
  }


  public SearchForFacilitiesRequest resultsPerPage(@javax.annotation.Nullable Integer resultsPerPage) {
    this.resultsPerPage = resultsPerPage;
    return this;
  }

  /**
   * Get resultsPerPage
   * @return resultsPerPage
   */
  @javax.annotation.Nullable
  public Integer getResultsPerPage() {
    return resultsPerPage;
  }

  public void setResultsPerPage(@javax.annotation.Nullable Integer resultsPerPage) {
    this.resultsPerPage = resultsPerPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchForFacilitiesRequest searchForFacilitiesRequest = (SearchForFacilitiesRequest) o;
    return Objects.equals(this.ownershipCode, searchForFacilitiesRequest.ownershipCode) &&
        Objects.equals(this.stateLGDCode, searchForFacilitiesRequest.stateLGDCode) &&
        Objects.equals(this.districtLGDCode, searchForFacilitiesRequest.districtLGDCode) &&
        Objects.equals(this.subDistrictLGDCode, searchForFacilitiesRequest.subDistrictLGDCode) &&
        Objects.equals(this.pincode, searchForFacilitiesRequest.pincode) &&
        Objects.equals(this.facilityName, searchForFacilitiesRequest.facilityName) &&
        Objects.equals(this.facilityId, searchForFacilitiesRequest.facilityId) &&
        Objects.equals(this.page, searchForFacilitiesRequest.page) &&
        Objects.equals(this.resultsPerPage, searchForFacilitiesRequest.resultsPerPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownershipCode, stateLGDCode, districtLGDCode, subDistrictLGDCode, pincode, facilityName, facilityId, page, resultsPerPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchForFacilitiesRequest {\n");
    sb.append("    ownershipCode: ").append(toIndentedString(ownershipCode)).append("\n");
    sb.append("    stateLGDCode: ").append(toIndentedString(stateLGDCode)).append("\n");
    sb.append("    districtLGDCode: ").append(toIndentedString(districtLGDCode)).append("\n");
    sb.append("    subDistrictLGDCode: ").append(toIndentedString(subDistrictLGDCode)).append("\n");
    sb.append("    pincode: ").append(toIndentedString(pincode)).append("\n");
    sb.append("    facilityName: ").append(toIndentedString(facilityName)).append("\n");
    sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    resultsPerPage: ").append(toIndentedString(resultsPerPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ownershipCode");
    openapiFields.add("stateLGDCode");
    openapiFields.add("districtLGDCode");
    openapiFields.add("subDistrictLGDCode");
    openapiFields.add("pincode");
    openapiFields.add("facilityName");
    openapiFields.add("facilityId");
    openapiFields.add("page");
    openapiFields.add("resultsPerPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchForFacilitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchForFacilitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchForFacilitiesRequest is not found in the empty JSON string", SearchForFacilitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchForFacilitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchForFacilitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ownershipCode") != null && !jsonObj.get("ownershipCode").isJsonNull()) && !jsonObj.get("ownershipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipCode").toString()));
      }
      if ((jsonObj.get("stateLGDCode") != null && !jsonObj.get("stateLGDCode").isJsonNull()) && !jsonObj.get("stateLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateLGDCode").toString()));
      }
      if ((jsonObj.get("districtLGDCode") != null && !jsonObj.get("districtLGDCode").isJsonNull()) && !jsonObj.get("districtLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtLGDCode").toString()));
      }
      if ((jsonObj.get("subDistrictLGDCode") != null && !jsonObj.get("subDistrictLGDCode").isJsonNull()) && !jsonObj.get("subDistrictLGDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subDistrictLGDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subDistrictLGDCode").toString()));
      }
      if ((jsonObj.get("pincode") != null && !jsonObj.get("pincode").isJsonNull()) && !jsonObj.get("pincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pincode").toString()));
      }
      if ((jsonObj.get("facilityName") != null && !jsonObj.get("facilityName").isJsonNull()) && !jsonObj.get("facilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityName").toString()));
      }
      if ((jsonObj.get("facilityId") != null && !jsonObj.get("facilityId").isJsonNull()) && !jsonObj.get("facilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchForFacilitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchForFacilitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchForFacilitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchForFacilitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchForFacilitiesRequest>() {
           @Override
           public void write(JsonWriter out, SearchForFacilitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchForFacilitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchForFacilitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchForFacilitiesRequest
   * @throws IOException if the JSON string is invalid with respect to SearchForFacilitiesRequest
   */
  public static SearchForFacilitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchForFacilitiesRequest.class);
  }

  /**
   * Convert an instance of SearchForFacilitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

