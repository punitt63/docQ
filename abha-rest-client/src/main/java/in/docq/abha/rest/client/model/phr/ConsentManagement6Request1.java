/*
 * Ayushman Bharat Digital Mission - Consent Management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package in.docq.abha.rest.client.model.phr;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import in.docq.abha.rest.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * In the request body, either ‘consent’ or ‘error’ must be included.&lt;br&gt; &lt;ol type&#x3D;&#39;a&#39;&gt;&lt;br/&gt; &lt;li&gt;Incase of success scenario,consent is mandatory and error is optional &lt;/li&gt; &lt;li&gt;Incase of failure scenario,error is mandatory and consent is optional&lt;/li&gt; &lt;li&gt;response is mandatory object in both the cases&lt;/li&gt; &lt;/ol&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T19:03:49.762814+05:30[Asia/Kolkata]", comments = "Generator version: 7.11.0")
public class ConsentManagement6Request1 {
  public static final String SERIALIZED_NAME_CONSENT = "consent";
  @SerializedName(SERIALIZED_NAME_CONSENT)
  @javax.annotation.Nonnull
  private ConsentManagement6Request1Consent consent;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private Object error;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  @javax.annotation.Nonnull
  private ConsentManagement4RequestResponse response;

  public static final String SERIALIZED_NAME_RESP = "resp";
  @SerializedName(SERIALIZED_NAME_RESP)
  @javax.annotation.Nullable
  private String resp;

  public ConsentManagement6Request1() {
  }

  public ConsentManagement6Request1 consent(@javax.annotation.Nonnull ConsentManagement6Request1Consent consent) {
    this.consent = consent;
    return this;
  }

  /**
   * Get consent
   * @return consent
   */
  @javax.annotation.Nonnull
  public ConsentManagement6Request1Consent getConsent() {
    return consent;
  }

  public void setConsent(@javax.annotation.Nonnull ConsentManagement6Request1Consent consent) {
    this.consent = consent;
  }


  public ConsentManagement6Request1 error(@javax.annotation.Nullable Object error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Object getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable Object error) {
    this.error = error;
  }


  public ConsentManagement6Request1 response(@javax.annotation.Nonnull ConsentManagement4RequestResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public ConsentManagement4RequestResponse getResponse() {
    return response;
  }

  public void setResponse(@javax.annotation.Nonnull ConsentManagement4RequestResponse response) {
    this.response = response;
  }


  public ConsentManagement6Request1 resp(@javax.annotation.Nullable String resp) {
    this.resp = resp;
    return this;
  }

  /**
   * Get resp
   * @return resp
   */
  @javax.annotation.Nullable
  public String getResp() {
    return resp;
  }

  public void setResp(@javax.annotation.Nullable String resp) {
    this.resp = resp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentManagement6Request1 consentManagement6Request1 = (ConsentManagement6Request1) o;
    return Objects.equals(this.consent, consentManagement6Request1.consent) &&
        Objects.equals(this.error, consentManagement6Request1.error) &&
        Objects.equals(this.response, consentManagement6Request1.response) &&
        Objects.equals(this.resp, consentManagement6Request1.resp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(consent, error, response, resp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentManagement6Request1 {\n");
    sb.append("    consent: ").append(toIndentedString(consent)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    resp: ").append(toIndentedString(resp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consent");
    openapiFields.add("error");
    openapiFields.add("response");
    openapiFields.add("resp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consent");
    openapiRequiredFields.add("error");
    openapiRequiredFields.add("response");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsentManagement6Request1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsentManagement6Request1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsentManagement6Request1 is not found in the empty JSON string", ConsentManagement6Request1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsentManagement6Request1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsentManagement6Request1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsentManagement6Request1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `consent`
      ConsentManagement6Request1Consent.validateJsonElement(jsonObj.get("consent"));
      // validate the required field `response`
      ConsentManagement4RequestResponse.validateJsonElement(jsonObj.get("response"));
      if ((jsonObj.get("resp") != null && !jsonObj.get("resp").isJsonNull()) && !jsonObj.get("resp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsentManagement6Request1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsentManagement6Request1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsentManagement6Request1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsentManagement6Request1.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsentManagement6Request1>() {
           @Override
           public void write(JsonWriter out, ConsentManagement6Request1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsentManagement6Request1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsentManagement6Request1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsentManagement6Request1
   * @throws IOException if the JSON string is invalid with respect to ConsentManagement6Request1
   */
  public static ConsentManagement6Request1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsentManagement6Request1.class);
  }

  /**
   * Convert an instance of ConsentManagement6Request1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

